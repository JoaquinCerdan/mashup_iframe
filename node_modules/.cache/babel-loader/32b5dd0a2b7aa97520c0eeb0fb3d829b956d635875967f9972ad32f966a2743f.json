{"ast":null,"code":"import { Looker40SDK } from '@looker/sdk';\nimport { AuthToken, AuthSession, BrowserTransport, DefaultSettings } from '@looker/sdk-rtl';\nclass SDKSession extends AuthSession {\n  // This is a placeholder for the fetchToken function.\n  // It is modified to make it useful later.\n  async fetchToken() {\n    return fetch('');\n  }\n  constructor(settings, transport) {\n    super(settings, transport || new BrowserTransport(settings));\n    this.activeToken = new AuthToken();\n  }\n\n  // This function checks to see if the user is already authenticated\n  isAuthenticated() {\n    const token = this.activeToken;\n    if (!(token && token.access_token)) return false;\n    return token.isActive();\n  }\n\n  // This function gets the current token or fetches a new one if necessary\n  async getToken() {\n    if (!this.isAuthenticated()) {\n      const token = await this.fetchToken();\n      const res = await token.json();\n      this.activeToken.setToken(res.user_token);\n    }\n    return this.activeToken;\n  }\n\n  // This function authenticates a user, which involves getting a new token\n  // It returns a modified object with a new authorization header.\n  async authenticate(props) {\n    const token = await this.getToken();\n    if (token && token.access_token) {\n      props.mode = 'cors';\n      delete props.credentials;\n      props.headers = {\n        ...props.headers,\n        Authorization: `Bearer ${this.activeToken.access_token}`\n      };\n    }\n    return props;\n  }\n}\n\n// This class sets the fetchToken to use the 'real' address of the backend server.\nclass SDKSessionEmbed extends SDKSession {\n  async fetchToken() {\n    return fetch(`${process.env.REACT_APP_BACKEND_SERVER}`);\n  }\n}\n\n// This creates a new session with the 'real' address used above\nconst session = new SDKSessionEmbed({\n  ...DefaultSettings,\n  base_url: process.env.REACT_APP_LOOKER_API_HOST\n});\n\n// This exports the SDK with the authenticated session\nexport const sdk = new Looker40SDK(session);","map":{"version":3,"names":["Looker40SDK","AuthToken","AuthSession","BrowserTransport","DefaultSettings","SDKSession","fetchToken","fetch","constructor","settings","transport","activeToken","isAuthenticated","token","access_token","isActive","getToken","res","json","setToken","user_token","authenticate","props","mode","credentials","headers","Authorization","SDKSessionEmbed","process","env","REACT_APP_BACKEND_SERVER","session","base_url","REACT_APP_LOOKER_API_HOST","sdk"],"sources":["C:/Users/ximo.cerdan/AppData/Local/Google/Cloud SDK/mashup_iframe/src/looker/looker-connection.js"],"sourcesContent":["import { Looker40SDK } from '@looker/sdk'\r\nimport {\r\n  AuthToken,\r\n  AuthSession,\r\n  BrowserTransport,\r\n  DefaultSettings,\r\n} from '@looker/sdk-rtl'\r\n\r\nclass SDKSession extends AuthSession {\r\n  // This is a placeholder for the fetchToken function.\r\n  // It is modified to make it useful later.\r\n  async fetchToken() {\r\n    return fetch('')\r\n  }\r\n\r\n  activeToken = new AuthToken()\r\n  constructor(settings, transport) {\r\n    super(settings, transport || new BrowserTransport(settings))\r\n  }\r\n\r\n  // This function checks to see if the user is already authenticated\r\n  isAuthenticated() {\r\n    const token = this.activeToken\r\n    if (!(token && token.access_token)) return false\r\n    return token.isActive()\r\n  }\r\n\r\n  // This function gets the current token or fetches a new one if necessary\r\n  async getToken() {\r\n    if (!this.isAuthenticated()) {\r\n      const token = await this.fetchToken()\r\n      const res = await token.json()\r\n      this.activeToken.setToken(res.user_token)\r\n    }\r\n    return this.activeToken\r\n  }\r\n\r\n  // This function authenticates a user, which involves getting a new token\r\n  // It returns a modified object with a new authorization header.\r\n  async authenticate(props) {\r\n    const token = await this.getToken()\r\n    if (token && token.access_token) {\r\n      props.mode = 'cors'\r\n      delete props.credentials\r\n      props.headers = {\r\n        ...props.headers,\r\n        Authorization: `Bearer ${this.activeToken.access_token}`,\r\n      }\r\n    }\r\n    return props\r\n  }\r\n}\r\n\r\n// This class sets the fetchToken to use the 'real' address of the backend server.\r\nclass SDKSessionEmbed extends SDKSession {\r\n  async fetchToken() {\r\n    return fetch(`${process.env.REACT_APP_BACKEND_SERVER}`)\r\n  }\r\n}\r\n\r\n// This creates a new session with the 'real' address used above\r\nconst session = new SDKSessionEmbed({\r\n  ...DefaultSettings,\r\n  base_url: process.env.REACT_APP_LOOKER_API_HOST,\r\n})\r\n\r\n// This exports the SDK with the authenticated session\r\nexport const sdk = new Looker40SDK(session)"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SACEC,SAAS,EACTC,WAAW,EACXC,gBAAgB,EAChBC,eAAe,QACV,iBAAiB;AAExB,MAAMC,UAAU,SAASH,WAAW,CAAC;EACnC;EACA;EACA,MAAMI,UAAUA,CAAA,EAAG;IACjB,OAAOC,KAAK,CAAC,EAAE,CAAC;EAClB;EAGAC,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IAC/B,KAAK,CAACD,QAAQ,EAAEC,SAAS,IAAI,IAAIP,gBAAgB,CAACM,QAAQ,CAAC,CAAC;IAAA,KAF9DE,WAAW,GAAG,IAAIV,SAAS,CAAC,CAAC;EAG7B;;EAEA;EACAW,eAAeA,CAAA,EAAG;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACF,WAAW;IAC9B,IAAI,EAAEE,KAAK,IAAIA,KAAK,CAACC,YAAY,CAAC,EAAE,OAAO,KAAK;IAChD,OAAOD,KAAK,CAACE,QAAQ,CAAC,CAAC;EACzB;;EAEA;EACA,MAAMC,QAAQA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACJ,eAAe,CAAC,CAAC,EAAE;MAC3B,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACP,UAAU,CAAC,CAAC;MACrC,MAAMW,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,CAAC;MAC9B,IAAI,CAACP,WAAW,CAACQ,QAAQ,CAACF,GAAG,CAACG,UAAU,CAAC;IAC3C;IACA,OAAO,IAAI,CAACT,WAAW;EACzB;;EAEA;EACA;EACA,MAAMU,YAAYA,CAACC,KAAK,EAAE;IACxB,MAAMT,KAAK,GAAG,MAAM,IAAI,CAACG,QAAQ,CAAC,CAAC;IACnC,IAAIH,KAAK,IAAIA,KAAK,CAACC,YAAY,EAAE;MAC/BQ,KAAK,CAACC,IAAI,GAAG,MAAM;MACnB,OAAOD,KAAK,CAACE,WAAW;MACxBF,KAAK,CAACG,OAAO,GAAG;QACd,GAAGH,KAAK,CAACG,OAAO;QAChBC,aAAa,EAAG,UAAS,IAAI,CAACf,WAAW,CAACG,YAAa;MACzD,CAAC;IACH;IACA,OAAOQ,KAAK;EACd;AACF;;AAEA;AACA,MAAMK,eAAe,SAAStB,UAAU,CAAC;EACvC,MAAMC,UAAUA,CAAA,EAAG;IACjB,OAAOC,KAAK,CAAE,GAAEqB,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC,CAAC;EACzD;AACF;;AAEA;AACA,MAAMC,OAAO,GAAG,IAAIJ,eAAe,CAAC;EAClC,GAAGvB,eAAe;EAClB4B,QAAQ,EAAEJ,OAAO,CAACC,GAAG,CAACI;AACxB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,GAAG,GAAG,IAAIlC,WAAW,CAAC+B,OAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}