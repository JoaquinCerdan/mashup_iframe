{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nimport { encodeParam, functionalSdk } from '@looker/sdk-rtl';\nimport { sdkVersion } from '../constants';\nexport var functionalSdk40 = authSession => {\n  return functionalSdk(authSession, '4.0', sdkVersion);\n};\nexport var follow_alert = function () {\n  var _ref = _asyncToGenerator(function* (sdk, alert_id, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.post(\"/alerts/\".concat(alert_id, \"/follow\"), null, null, options);\n  });\n  return function follow_alert(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var unfollow_alert = function () {\n  var _ref2 = _asyncToGenerator(function* (sdk, alert_id, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.delete(\"/alerts/\".concat(alert_id, \"/follow\"), null, null, options);\n  });\n  return function unfollow_alert(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var search_alerts = function () {\n  var _ref3 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/alerts/search', {\n      limit: request.limit,\n      offset: request.offset,\n      group_by: request.group_by,\n      fields: request.fields,\n      disabled: request.disabled,\n      frequency: request.frequency,\n      condition_met: request.condition_met,\n      last_run_start: request.last_run_start,\n      last_run_end: request.last_run_end,\n      all_owners: request.all_owners\n    }, null, options);\n  });\n  return function search_alerts(_x7, _x8, _x9) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var get_alert = function () {\n  var _ref4 = _asyncToGenerator(function* (sdk, alert_id, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.get(\"/alerts/\".concat(alert_id), null, null, options);\n  });\n  return function get_alert(_x10, _x11, _x12) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var update_alert = function () {\n  var _ref5 = _asyncToGenerator(function* (sdk, alert_id, body, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.put(\"/alerts/\".concat(alert_id), null, body, options);\n  });\n  return function update_alert(_x13, _x14, _x15, _x16) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var update_alert_field = function () {\n  var _ref6 = _asyncToGenerator(function* (sdk, alert_id, body, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.patch(\"/alerts/\".concat(alert_id), null, body, options);\n  });\n  return function update_alert_field(_x17, _x18, _x19, _x20) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var delete_alert = function () {\n  var _ref7 = _asyncToGenerator(function* (sdk, alert_id, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.delete(\"/alerts/\".concat(alert_id), null, null, options);\n  });\n  return function delete_alert(_x21, _x22, _x23) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var create_alert = function () {\n  var _ref8 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/alerts', null, body, options);\n  });\n  return function create_alert(_x24, _x25, _x26) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var enqueue_alert = function () {\n  var _ref9 = _asyncToGenerator(function* (sdk, alert_id, force, options) {\n    alert_id = encodeParam(alert_id);\n    return sdk.post(\"/alerts/\".concat(alert_id, \"/enqueue\"), {\n      force\n    }, null, options);\n  });\n  return function enqueue_alert(_x27, _x28, _x29, _x30) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var alert_notifications = function () {\n  var _ref10 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/alert_notifications', {\n      limit: request.limit,\n      offset: request.offset\n    }, null, options);\n  });\n  return function alert_notifications(_x31, _x32, _x33) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var read_alert_notification = function () {\n  var _ref11 = _asyncToGenerator(function* (sdk, alert_notification_id, options) {\n    alert_notification_id = encodeParam(alert_notification_id);\n    return sdk.patch(\"/alert_notifications/\".concat(alert_notification_id), null, null, options);\n  });\n  return function read_alert_notification(_x34, _x35, _x36) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nexport var login = function () {\n  var _ref12 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.post('/login', {\n      client_id: request.client_id,\n      client_secret: request.client_secret\n    }, null, options);\n  });\n  return function login(_x37, _x38, _x39) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nexport var login_user = function () {\n  var _ref13 = _asyncToGenerator(function* (sdk, user_id, associative, options) {\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/login/\".concat(user_id), {\n      associative\n    }, null, options);\n  });\n  return function login_user(_x40, _x41, _x42, _x43) {\n    return _ref13.apply(this, arguments);\n  };\n}();\nexport var logout = function () {\n  var _ref14 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.delete('/logout', null, null, options);\n  });\n  return function logout(_x44, _x45) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nexport var artifact_usage = function () {\n  var _ref15 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/artifact/usage', {\n      fields\n    }, null, options);\n  });\n  return function artifact_usage(_x46, _x47, _x48) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nexport var artifact_namespaces = function () {\n  var _ref16 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/artifact/namespaces', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset\n    }, null, options);\n  });\n  return function artifact_namespaces(_x49, _x50, _x51) {\n    return _ref16.apply(this, arguments);\n  };\n}();\nexport var artifact_value = function () {\n  var _ref17 = _asyncToGenerator(function* (sdk, namespace, key, options) {\n    namespace = encodeParam(namespace);\n    return sdk.get(\"/artifact/\".concat(namespace, \"/value\"), {\n      key\n    }, null, options);\n  });\n  return function artifact_value(_x52, _x53, _x54, _x55) {\n    return _ref17.apply(this, arguments);\n  };\n}();\nexport var purge_artifacts = function () {\n  var _ref18 = _asyncToGenerator(function* (sdk, namespace, options) {\n    namespace = encodeParam(namespace);\n    return sdk.delete(\"/artifact/\".concat(namespace, \"/purge\"), null, null, options);\n  });\n  return function purge_artifacts(_x56, _x57, _x58) {\n    return _ref18.apply(this, arguments);\n  };\n}();\nexport var search_artifacts = function () {\n  var _ref19 = _asyncToGenerator(function* (sdk, request, options) {\n    request.namespace = encodeParam(request.namespace);\n    return sdk.get(\"/artifact/\".concat(request.namespace, \"/search\"), {\n      fields: request.fields,\n      key: request.key,\n      user_ids: request.user_ids,\n      min_size: request.min_size,\n      max_size: request.max_size,\n      limit: request.limit,\n      offset: request.offset\n    }, null, options);\n  });\n  return function search_artifacts(_x59, _x60, _x61) {\n    return _ref19.apply(this, arguments);\n  };\n}();\nexport var artifact = function () {\n  var _ref20 = _asyncToGenerator(function* (sdk, request, options) {\n    request.namespace = encodeParam(request.namespace);\n    return sdk.get(\"/artifact/\".concat(request.namespace), {\n      key: request.key,\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset\n    }, null, options);\n  });\n  return function artifact(_x62, _x63, _x64) {\n    return _ref20.apply(this, arguments);\n  };\n}();\nexport var delete_artifact = function () {\n  var _ref21 = _asyncToGenerator(function* (sdk, namespace, key, options) {\n    namespace = encodeParam(namespace);\n    return sdk.delete(\"/artifact/\".concat(namespace), {\n      key\n    }, null, options);\n  });\n  return function delete_artifact(_x65, _x66, _x67, _x68) {\n    return _ref21.apply(this, arguments);\n  };\n}();\nexport var update_artifacts = function () {\n  var _ref22 = _asyncToGenerator(function* (sdk, namespace, body, fields, options) {\n    namespace = encodeParam(namespace);\n    return sdk.put(\"/artifacts/\".concat(namespace), {\n      fields\n    }, body, options);\n  });\n  return function update_artifacts(_x69, _x70, _x71, _x72, _x73) {\n    return _ref22.apply(this, arguments);\n  };\n}();\nexport var create_embed_secret = function () {\n  var _ref23 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/embed_config/secrets', null, body, options);\n  });\n  return function create_embed_secret(_x74, _x75, _x76) {\n    return _ref23.apply(this, arguments);\n  };\n}();\nexport var delete_embed_secret = function () {\n  var _ref24 = _asyncToGenerator(function* (sdk, embed_secret_id, options) {\n    embed_secret_id = encodeParam(embed_secret_id);\n    return sdk.delete(\"/embed_config/secrets/\".concat(embed_secret_id), null, null, options);\n  });\n  return function delete_embed_secret(_x77, _x78, _x79) {\n    return _ref24.apply(this, arguments);\n  };\n}();\nexport var create_sso_embed_url = function () {\n  var _ref25 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/embed/sso_url', null, body, options);\n  });\n  return function create_sso_embed_url(_x80, _x81, _x82) {\n    return _ref25.apply(this, arguments);\n  };\n}();\nexport var create_embed_url_as_me = function () {\n  var _ref26 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/embed/token_url/me', null, body, options);\n  });\n  return function create_embed_url_as_me(_x83, _x84, _x85) {\n    return _ref26.apply(this, arguments);\n  };\n}();\nexport var acquire_embed_cookieless_session = function () {\n  var _ref27 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/embed/cookieless_session/acquire', null, body, options);\n  });\n  return function acquire_embed_cookieless_session(_x86, _x87, _x88) {\n    return _ref27.apply(this, arguments);\n  };\n}();\nexport var delete_embed_cookieless_session = function () {\n  var _ref28 = _asyncToGenerator(function* (sdk, session_reference_token, options) {\n    session_reference_token = encodeParam(session_reference_token);\n    return sdk.delete(\"/embed/cookieless_session/\".concat(session_reference_token), null, null, options);\n  });\n  return function delete_embed_cookieless_session(_x89, _x90, _x91) {\n    return _ref28.apply(this, arguments);\n  };\n}();\nexport var generate_tokens_for_cookieless_session = function () {\n  var _ref29 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/embed/cookieless_session/generate_tokens', null, body, options);\n  });\n  return function generate_tokens_for_cookieless_session(_x92, _x93, _x94) {\n    return _ref29.apply(this, arguments);\n  };\n}();\nexport var ldap_config = function () {\n  var _ref30 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/ldap_config', null, null, options);\n  });\n  return function ldap_config(_x95, _x96) {\n    return _ref30.apply(this, arguments);\n  };\n}();\nexport var update_ldap_config = function () {\n  var _ref31 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/ldap_config', null, body, options);\n  });\n  return function update_ldap_config(_x97, _x98, _x99) {\n    return _ref31.apply(this, arguments);\n  };\n}();\nexport var test_ldap_config_connection = function () {\n  var _ref32 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/ldap_config/test_connection', null, body, options);\n  });\n  return function test_ldap_config_connection(_x100, _x101, _x102) {\n    return _ref32.apply(this, arguments);\n  };\n}();\nexport var test_ldap_config_auth = function () {\n  var _ref33 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/ldap_config/test_auth', null, body, options);\n  });\n  return function test_ldap_config_auth(_x103, _x104, _x105) {\n    return _ref33.apply(this, arguments);\n  };\n}();\nexport var test_ldap_config_user_info = function () {\n  var _ref34 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/ldap_config/test_user_info', null, body, options);\n  });\n  return function test_ldap_config_user_info(_x106, _x107, _x108) {\n    return _ref34.apply(this, arguments);\n  };\n}();\nexport var test_ldap_config_user_auth = function () {\n  var _ref35 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/ldap_config/test_user_auth', null, body, options);\n  });\n  return function test_ldap_config_user_auth(_x109, _x110, _x111) {\n    return _ref35.apply(this, arguments);\n  };\n}();\nexport var register_mobile_device = function () {\n  var _ref36 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/mobile/device', null, body, options);\n  });\n  return function register_mobile_device(_x112, _x113, _x114) {\n    return _ref36.apply(this, arguments);\n  };\n}();\nexport var update_mobile_device_registration = function () {\n  var _ref37 = _asyncToGenerator(function* (sdk, device_id, options) {\n    device_id = encodeParam(device_id);\n    return sdk.patch(\"/mobile/device/\".concat(device_id), null, null, options);\n  });\n  return function update_mobile_device_registration(_x115, _x116, _x117) {\n    return _ref37.apply(this, arguments);\n  };\n}();\nexport var deregister_mobile_device = function () {\n  var _ref38 = _asyncToGenerator(function* (sdk, device_id, options) {\n    device_id = encodeParam(device_id);\n    return sdk.delete(\"/mobile/device/\".concat(device_id), null, null, options);\n  });\n  return function deregister_mobile_device(_x118, _x119, _x120) {\n    return _ref38.apply(this, arguments);\n  };\n}();\nexport var all_oauth_client_apps = function () {\n  var _ref39 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/oauth_client_apps', {\n      fields\n    }, null, options);\n  });\n  return function all_oauth_client_apps(_x121, _x122, _x123) {\n    return _ref39.apply(this, arguments);\n  };\n}();\nexport var oauth_client_app = function () {\n  var _ref40 = _asyncToGenerator(function* (sdk, client_guid, fields, options) {\n    client_guid = encodeParam(client_guid);\n    return sdk.get(\"/oauth_client_apps/\".concat(client_guid), {\n      fields\n    }, null, options);\n  });\n  return function oauth_client_app(_x124, _x125, _x126, _x127) {\n    return _ref40.apply(this, arguments);\n  };\n}();\nexport var register_oauth_client_app = function () {\n  var _ref41 = _asyncToGenerator(function* (sdk, client_guid, body, fields, options) {\n    client_guid = encodeParam(client_guid);\n    return sdk.post(\"/oauth_client_apps/\".concat(client_guid), {\n      fields\n    }, body, options);\n  });\n  return function register_oauth_client_app(_x128, _x129, _x130, _x131, _x132) {\n    return _ref41.apply(this, arguments);\n  };\n}();\nexport var update_oauth_client_app = function () {\n  var _ref42 = _asyncToGenerator(function* (sdk, client_guid, body, fields, options) {\n    client_guid = encodeParam(client_guid);\n    return sdk.patch(\"/oauth_client_apps/\".concat(client_guid), {\n      fields\n    }, body, options);\n  });\n  return function update_oauth_client_app(_x133, _x134, _x135, _x136, _x137) {\n    return _ref42.apply(this, arguments);\n  };\n}();\nexport var delete_oauth_client_app = function () {\n  var _ref43 = _asyncToGenerator(function* (sdk, client_guid, options) {\n    client_guid = encodeParam(client_guid);\n    return sdk.delete(\"/oauth_client_apps/\".concat(client_guid), null, null, options);\n  });\n  return function delete_oauth_client_app(_x138, _x139, _x140) {\n    return _ref43.apply(this, arguments);\n  };\n}();\nexport var invalidate_tokens = function () {\n  var _ref44 = _asyncToGenerator(function* (sdk, client_guid, options) {\n    client_guid = encodeParam(client_guid);\n    return sdk.delete(\"/oauth_client_apps/\".concat(client_guid, \"/tokens\"), null, null, options);\n  });\n  return function invalidate_tokens(_x141, _x142, _x143) {\n    return _ref44.apply(this, arguments);\n  };\n}();\nexport var activate_app_user = function () {\n  var _ref45 = _asyncToGenerator(function* (sdk, client_guid, user_id, fields, options) {\n    client_guid = encodeParam(client_guid);\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/oauth_client_apps/\".concat(client_guid, \"/users/\").concat(user_id), {\n      fields\n    }, null, options);\n  });\n  return function activate_app_user(_x144, _x145, _x146, _x147, _x148) {\n    return _ref45.apply(this, arguments);\n  };\n}();\nexport var deactivate_app_user = function () {\n  var _ref46 = _asyncToGenerator(function* (sdk, client_guid, user_id, fields, options) {\n    client_guid = encodeParam(client_guid);\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/oauth_client_apps/\".concat(client_guid, \"/users/\").concat(user_id), {\n      fields\n    }, null, options);\n  });\n  return function deactivate_app_user(_x149, _x150, _x151, _x152, _x153) {\n    return _ref46.apply(this, arguments);\n  };\n}();\nexport var oidc_config = function () {\n  var _ref47 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/oidc_config', null, null, options);\n  });\n  return function oidc_config(_x154, _x155) {\n    return _ref47.apply(this, arguments);\n  };\n}();\nexport var update_oidc_config = function () {\n  var _ref48 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/oidc_config', null, body, options);\n  });\n  return function update_oidc_config(_x156, _x157, _x158) {\n    return _ref48.apply(this, arguments);\n  };\n}();\nexport var oidc_test_config = function () {\n  var _ref49 = _asyncToGenerator(function* (sdk, test_slug, options) {\n    test_slug = encodeParam(test_slug);\n    return sdk.get(\"/oidc_test_configs/\".concat(test_slug), null, null, options);\n  });\n  return function oidc_test_config(_x159, _x160, _x161) {\n    return _ref49.apply(this, arguments);\n  };\n}();\nexport var delete_oidc_test_config = function () {\n  var _ref50 = _asyncToGenerator(function* (sdk, test_slug, options) {\n    test_slug = encodeParam(test_slug);\n    return sdk.delete(\"/oidc_test_configs/\".concat(test_slug), null, null, options);\n  });\n  return function delete_oidc_test_config(_x162, _x163, _x164) {\n    return _ref50.apply(this, arguments);\n  };\n}();\nexport var create_oidc_test_config = function () {\n  var _ref51 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/oidc_test_configs', null, body, options);\n  });\n  return function create_oidc_test_config(_x165, _x166, _x167) {\n    return _ref51.apply(this, arguments);\n  };\n}();\nexport var password_config = function () {\n  var _ref52 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/password_config', null, null, options);\n  });\n  return function password_config(_x168, _x169) {\n    return _ref52.apply(this, arguments);\n  };\n}();\nexport var update_password_config = function () {\n  var _ref53 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/password_config', null, body, options);\n  });\n  return function update_password_config(_x170, _x171, _x172) {\n    return _ref53.apply(this, arguments);\n  };\n}();\nexport var force_password_reset_at_next_login_for_all_users = function () {\n  var _ref54 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.put('/password_config/force_password_reset_at_next_login_for_all_users', null, null, options);\n  });\n  return function force_password_reset_at_next_login_for_all_users(_x173, _x174) {\n    return _ref54.apply(this, arguments);\n  };\n}();\nexport var saml_config = function () {\n  var _ref55 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/saml_config', null, null, options);\n  });\n  return function saml_config(_x175, _x176) {\n    return _ref55.apply(this, arguments);\n  };\n}();\nexport var update_saml_config = function () {\n  var _ref56 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/saml_config', null, body, options);\n  });\n  return function update_saml_config(_x177, _x178, _x179) {\n    return _ref56.apply(this, arguments);\n  };\n}();\nexport var saml_test_config = function () {\n  var _ref57 = _asyncToGenerator(function* (sdk, test_slug, options) {\n    test_slug = encodeParam(test_slug);\n    return sdk.get(\"/saml_test_configs/\".concat(test_slug), null, null, options);\n  });\n  return function saml_test_config(_x180, _x181, _x182) {\n    return _ref57.apply(this, arguments);\n  };\n}();\nexport var delete_saml_test_config = function () {\n  var _ref58 = _asyncToGenerator(function* (sdk, test_slug, options) {\n    test_slug = encodeParam(test_slug);\n    return sdk.delete(\"/saml_test_configs/\".concat(test_slug), null, null, options);\n  });\n  return function delete_saml_test_config(_x183, _x184, _x185) {\n    return _ref58.apply(this, arguments);\n  };\n}();\nexport var create_saml_test_config = function () {\n  var _ref59 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/saml_test_configs', null, body, options);\n  });\n  return function create_saml_test_config(_x186, _x187, _x188) {\n    return _ref59.apply(this, arguments);\n  };\n}();\nexport var parse_saml_idp_metadata = function () {\n  var _ref60 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/parse_saml_idp_metadata', null, body, options);\n  });\n  return function parse_saml_idp_metadata(_x189, _x190, _x191) {\n    return _ref60.apply(this, arguments);\n  };\n}();\nexport var fetch_and_parse_saml_idp_metadata = function () {\n  var _ref61 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/fetch_and_parse_saml_idp_metadata', null, body, options);\n  });\n  return function fetch_and_parse_saml_idp_metadata(_x192, _x193, _x194) {\n    return _ref61.apply(this, arguments);\n  };\n}();\nexport var session_config = function () {\n  var _ref62 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/session_config', null, null, options);\n  });\n  return function session_config(_x195, _x196) {\n    return _ref62.apply(this, arguments);\n  };\n}();\nexport var update_session_config = function () {\n  var _ref63 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/session_config', null, body, options);\n  });\n  return function update_session_config(_x197, _x198, _x199) {\n    return _ref63.apply(this, arguments);\n  };\n}();\nexport var get_support_access_allowlist_entries = function () {\n  var _ref64 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/support_access/allowlist', {\n      fields\n    }, null, options);\n  });\n  return function get_support_access_allowlist_entries(_x200, _x201, _x202) {\n    return _ref64.apply(this, arguments);\n  };\n}();\nexport var add_support_access_allowlist_entries = function () {\n  var _ref65 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/support_access/allowlist', null, body, options);\n  });\n  return function add_support_access_allowlist_entries(_x203, _x204, _x205) {\n    return _ref65.apply(this, arguments);\n  };\n}();\nexport var delete_support_access_allowlist_entry = function () {\n  var _ref66 = _asyncToGenerator(function* (sdk, entry_id, options) {\n    entry_id = encodeParam(entry_id);\n    return sdk.delete(\"/support_access/allowlist/\".concat(entry_id), null, null, options);\n  });\n  return function delete_support_access_allowlist_entry(_x206, _x207, _x208) {\n    return _ref66.apply(this, arguments);\n  };\n}();\nexport var enable_support_access = function () {\n  var _ref67 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/support_access/enable', null, body, options);\n  });\n  return function enable_support_access(_x209, _x210, _x211) {\n    return _ref67.apply(this, arguments);\n  };\n}();\nexport var disable_support_access = function () {\n  var _ref68 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.put('/support_access/disable', null, null, options);\n  });\n  return function disable_support_access(_x212, _x213) {\n    return _ref68.apply(this, arguments);\n  };\n}();\nexport var support_access_status = function () {\n  var _ref69 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/support_access/status', null, null, options);\n  });\n  return function support_access_status(_x214, _x215) {\n    return _ref69.apply(this, arguments);\n  };\n}();\nexport var all_user_login_lockouts = function () {\n  var _ref70 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/user_login_lockouts', {\n      fields\n    }, null, options);\n  });\n  return function all_user_login_lockouts(_x216, _x217, _x218) {\n    return _ref70.apply(this, arguments);\n  };\n}();\nexport var search_user_login_lockouts = function () {\n  var _ref71 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/user_login_lockouts/search', {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      auth_type: request.auth_type,\n      full_name: request.full_name,\n      email: request.email,\n      remote_id: request.remote_id,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_user_login_lockouts(_x219, _x220, _x221) {\n    return _ref71.apply(this, arguments);\n  };\n}();\nexport var delete_user_login_lockout = function () {\n  var _ref72 = _asyncToGenerator(function* (sdk, key, options) {\n    key = encodeParam(key);\n    return sdk.delete(\"/user_login_lockout/\".concat(key), null, null, options);\n  });\n  return function delete_user_login_lockout(_x222, _x223, _x224) {\n    return _ref72.apply(this, arguments);\n  };\n}();\nexport var all_boards = function () {\n  var _ref73 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/boards', {\n      fields\n    }, null, options);\n  });\n  return function all_boards(_x225, _x226, _x227) {\n    return _ref73.apply(this, arguments);\n  };\n}();\nexport var create_board = function () {\n  var _ref74 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/boards', {\n      fields\n    }, body, options);\n  });\n  return function create_board(_x228, _x229, _x230, _x231) {\n    return _ref74.apply(this, arguments);\n  };\n}();\nexport var search_boards = function () {\n  var _ref75 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/boards/search', {\n      title: request.title,\n      created_at: request.created_at,\n      first_name: request.first_name,\n      last_name: request.last_name,\n      fields: request.fields,\n      favorited: request.favorited,\n      creator_id: request.creator_id,\n      sorts: request.sorts,\n      page: request.page,\n      per_page: request.per_page,\n      offset: request.offset,\n      limit: request.limit,\n      filter_or: request.filter_or,\n      permission: request.permission\n    }, null, options);\n  });\n  return function search_boards(_x232, _x233, _x234) {\n    return _ref75.apply(this, arguments);\n  };\n}();\nexport var board = function () {\n  var _ref76 = _asyncToGenerator(function* (sdk, board_id, fields, options) {\n    board_id = encodeParam(board_id);\n    return sdk.get(\"/boards/\".concat(board_id), {\n      fields\n    }, null, options);\n  });\n  return function board(_x235, _x236, _x237, _x238) {\n    return _ref76.apply(this, arguments);\n  };\n}();\nexport var update_board = function () {\n  var _ref77 = _asyncToGenerator(function* (sdk, board_id, body, fields, options) {\n    board_id = encodeParam(board_id);\n    return sdk.patch(\"/boards/\".concat(board_id), {\n      fields\n    }, body, options);\n  });\n  return function update_board(_x239, _x240, _x241, _x242, _x243) {\n    return _ref77.apply(this, arguments);\n  };\n}();\nexport var delete_board = function () {\n  var _ref78 = _asyncToGenerator(function* (sdk, board_id, options) {\n    board_id = encodeParam(board_id);\n    return sdk.delete(\"/boards/\".concat(board_id), null, null, options);\n  });\n  return function delete_board(_x244, _x245, _x246) {\n    return _ref78.apply(this, arguments);\n  };\n}();\nexport var all_board_items = function () {\n  var _ref79 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/board_items', {\n      fields: request.fields,\n      sorts: request.sorts,\n      board_section_id: request.board_section_id\n    }, null, options);\n  });\n  return function all_board_items(_x247, _x248, _x249) {\n    return _ref79.apply(this, arguments);\n  };\n}();\nexport var create_board_item = function () {\n  var _ref80 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/board_items', {\n      fields\n    }, body, options);\n  });\n  return function create_board_item(_x250, _x251, _x252, _x253) {\n    return _ref80.apply(this, arguments);\n  };\n}();\nexport var board_item = function () {\n  var _ref81 = _asyncToGenerator(function* (sdk, board_item_id, fields, options) {\n    board_item_id = encodeParam(board_item_id);\n    return sdk.get(\"/board_items/\".concat(board_item_id), {\n      fields\n    }, null, options);\n  });\n  return function board_item(_x254, _x255, _x256, _x257) {\n    return _ref81.apply(this, arguments);\n  };\n}();\nexport var update_board_item = function () {\n  var _ref82 = _asyncToGenerator(function* (sdk, board_item_id, body, fields, options) {\n    board_item_id = encodeParam(board_item_id);\n    return sdk.patch(\"/board_items/\".concat(board_item_id), {\n      fields\n    }, body, options);\n  });\n  return function update_board_item(_x258, _x259, _x260, _x261, _x262) {\n    return _ref82.apply(this, arguments);\n  };\n}();\nexport var delete_board_item = function () {\n  var _ref83 = _asyncToGenerator(function* (sdk, board_item_id, options) {\n    board_item_id = encodeParam(board_item_id);\n    return sdk.delete(\"/board_items/\".concat(board_item_id), null, null, options);\n  });\n  return function delete_board_item(_x263, _x264, _x265) {\n    return _ref83.apply(this, arguments);\n  };\n}();\nexport var all_board_sections = function () {\n  var _ref84 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/board_sections', {\n      fields: request.fields,\n      sorts: request.sorts\n    }, null, options);\n  });\n  return function all_board_sections(_x266, _x267, _x268) {\n    return _ref84.apply(this, arguments);\n  };\n}();\nexport var create_board_section = function () {\n  var _ref85 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/board_sections', {\n      fields\n    }, body, options);\n  });\n  return function create_board_section(_x269, _x270, _x271, _x272) {\n    return _ref85.apply(this, arguments);\n  };\n}();\nexport var board_section = function () {\n  var _ref86 = _asyncToGenerator(function* (sdk, board_section_id, fields, options) {\n    board_section_id = encodeParam(board_section_id);\n    return sdk.get(\"/board_sections/\".concat(board_section_id), {\n      fields\n    }, null, options);\n  });\n  return function board_section(_x273, _x274, _x275, _x276) {\n    return _ref86.apply(this, arguments);\n  };\n}();\nexport var update_board_section = function () {\n  var _ref87 = _asyncToGenerator(function* (sdk, board_section_id, body, fields, options) {\n    board_section_id = encodeParam(board_section_id);\n    return sdk.patch(\"/board_sections/\".concat(board_section_id), {\n      fields\n    }, body, options);\n  });\n  return function update_board_section(_x277, _x278, _x279, _x280, _x281) {\n    return _ref87.apply(this, arguments);\n  };\n}();\nexport var delete_board_section = function () {\n  var _ref88 = _asyncToGenerator(function* (sdk, board_section_id, options) {\n    board_section_id = encodeParam(board_section_id);\n    return sdk.delete(\"/board_sections/\".concat(board_section_id), null, null, options);\n  });\n  return function delete_board_section(_x282, _x283, _x284) {\n    return _ref88.apply(this, arguments);\n  };\n}();\nexport var all_color_collections = function () {\n  var _ref89 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/color_collections', {\n      fields\n    }, null, options);\n  });\n  return function all_color_collections(_x285, _x286, _x287) {\n    return _ref89.apply(this, arguments);\n  };\n}();\nexport var create_color_collection = function () {\n  var _ref90 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/color_collections', null, body, options);\n  });\n  return function create_color_collection(_x288, _x289, _x290) {\n    return _ref90.apply(this, arguments);\n  };\n}();\nexport var color_collections_custom = function () {\n  var _ref91 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/color_collections/custom', {\n      fields\n    }, null, options);\n  });\n  return function color_collections_custom(_x291, _x292, _x293) {\n    return _ref91.apply(this, arguments);\n  };\n}();\nexport var color_collections_standard = function () {\n  var _ref92 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/color_collections/standard', {\n      fields\n    }, null, options);\n  });\n  return function color_collections_standard(_x294, _x295, _x296) {\n    return _ref92.apply(this, arguments);\n  };\n}();\nexport var default_color_collection = function () {\n  var _ref93 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/color_collections/default', null, null, options);\n  });\n  return function default_color_collection(_x297, _x298) {\n    return _ref93.apply(this, arguments);\n  };\n}();\nexport var set_default_color_collection = function () {\n  var _ref94 = _asyncToGenerator(function* (sdk, collection_id, options) {\n    return sdk.put('/color_collections/default', {\n      collection_id\n    }, null, options);\n  });\n  return function set_default_color_collection(_x299, _x300, _x301) {\n    return _ref94.apply(this, arguments);\n  };\n}();\nexport var color_collection = function () {\n  var _ref95 = _asyncToGenerator(function* (sdk, collection_id, fields, options) {\n    collection_id = encodeParam(collection_id);\n    return sdk.get(\"/color_collections/\".concat(collection_id), {\n      fields\n    }, null, options);\n  });\n  return function color_collection(_x302, _x303, _x304, _x305) {\n    return _ref95.apply(this, arguments);\n  };\n}();\nexport var update_color_collection = function () {\n  var _ref96 = _asyncToGenerator(function* (sdk, collection_id, body, options) {\n    collection_id = encodeParam(collection_id);\n    return sdk.patch(\"/color_collections/\".concat(collection_id), null, body, options);\n  });\n  return function update_color_collection(_x306, _x307, _x308, _x309) {\n    return _ref96.apply(this, arguments);\n  };\n}();\nexport var delete_color_collection = function () {\n  var _ref97 = _asyncToGenerator(function* (sdk, collection_id, options) {\n    collection_id = encodeParam(collection_id);\n    return sdk.delete(\"/color_collections/\".concat(collection_id), null, null, options);\n  });\n  return function delete_color_collection(_x310, _x311, _x312) {\n    return _ref97.apply(this, arguments);\n  };\n}();\nexport var cloud_storage_configuration = function () {\n  var _ref98 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/cloud_storage', null, null, options);\n  });\n  return function cloud_storage_configuration(_x313, _x314) {\n    return _ref98.apply(this, arguments);\n  };\n}();\nexport var update_cloud_storage_configuration = function () {\n  var _ref99 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/cloud_storage', null, body, options);\n  });\n  return function update_cloud_storage_configuration(_x315, _x316, _x317) {\n    return _ref99.apply(this, arguments);\n  };\n}();\nexport var configuration_force_refresh = function () {\n  var _ref100 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.put('/configuration_force_refresh', null, null, options);\n  });\n  return function configuration_force_refresh(_x318, _x319) {\n    return _ref100.apply(this, arguments);\n  };\n}();\nexport var custom_welcome_email = function () {\n  var _ref101 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/custom_welcome_email', null, null, options);\n  });\n  return function custom_welcome_email(_x320, _x321) {\n    return _ref101.apply(this, arguments);\n  };\n}();\nexport var update_custom_welcome_email = function () {\n  var _ref102 = _asyncToGenerator(function* (sdk, body, send_test_welcome_email, options) {\n    return sdk.patch('/custom_welcome_email', {\n      send_test_welcome_email\n    }, body, options);\n  });\n  return function update_custom_welcome_email(_x322, _x323, _x324, _x325) {\n    return _ref102.apply(this, arguments);\n  };\n}();\nexport var update_custom_welcome_email_test = function () {\n  var _ref103 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/custom_welcome_email_test', null, body, options);\n  });\n  return function update_custom_welcome_email_test(_x326, _x327, _x328) {\n    return _ref103.apply(this, arguments);\n  };\n}();\nexport var digest_emails_enabled = function () {\n  var _ref104 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/digest_emails_enabled', null, null, options);\n  });\n  return function digest_emails_enabled(_x329, _x330) {\n    return _ref104.apply(this, arguments);\n  };\n}();\nexport var update_digest_emails_enabled = function () {\n  var _ref105 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/digest_emails_enabled', null, body, options);\n  });\n  return function update_digest_emails_enabled(_x331, _x332, _x333) {\n    return _ref105.apply(this, arguments);\n  };\n}();\nexport var create_digest_email_send = function () {\n  var _ref106 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.post('/digest_email_send', null, null, options);\n  });\n  return function create_digest_email_send(_x334, _x335) {\n    return _ref106.apply(this, arguments);\n  };\n}();\nexport var public_egress_ip_addresses = function () {\n  var _ref107 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/public_egress_ip_addresses', null, null, options);\n  });\n  return function public_egress_ip_addresses(_x336, _x337) {\n    return _ref107.apply(this, arguments);\n  };\n}();\nexport var internal_help_resources_content = function () {\n  var _ref108 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/internal_help_resources_content', null, null, options);\n  });\n  return function internal_help_resources_content(_x338, _x339) {\n    return _ref108.apply(this, arguments);\n  };\n}();\nexport var update_internal_help_resources_content = function () {\n  var _ref109 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/internal_help_resources_content', null, body, options);\n  });\n  return function update_internal_help_resources_content(_x340, _x341, _x342) {\n    return _ref109.apply(this, arguments);\n  };\n}();\nexport var internal_help_resources = function () {\n  var _ref110 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/internal_help_resources_enabled', null, null, options);\n  });\n  return function internal_help_resources(_x343, _x344) {\n    return _ref110.apply(this, arguments);\n  };\n}();\nexport var update_internal_help_resources = function () {\n  var _ref111 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/internal_help_resources', null, body, options);\n  });\n  return function update_internal_help_resources(_x345, _x346, _x347) {\n    return _ref111.apply(this, arguments);\n  };\n}();\nexport var all_legacy_features = function () {\n  var _ref112 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/legacy_features', null, null, options);\n  });\n  return function all_legacy_features(_x348, _x349) {\n    return _ref112.apply(this, arguments);\n  };\n}();\nexport var legacy_feature = function () {\n  var _ref113 = _asyncToGenerator(function* (sdk, legacy_feature_id, options) {\n    legacy_feature_id = encodeParam(legacy_feature_id);\n    return sdk.get(\"/legacy_features/\".concat(legacy_feature_id), null, null, options);\n  });\n  return function legacy_feature(_x350, _x351, _x352) {\n    return _ref113.apply(this, arguments);\n  };\n}();\nexport var update_legacy_feature = function () {\n  var _ref114 = _asyncToGenerator(function* (sdk, legacy_feature_id, body, options) {\n    legacy_feature_id = encodeParam(legacy_feature_id);\n    return sdk.patch(\"/legacy_features/\".concat(legacy_feature_id), null, body, options);\n  });\n  return function update_legacy_feature(_x353, _x354, _x355, _x356) {\n    return _ref114.apply(this, arguments);\n  };\n}();\nexport var all_locales = function () {\n  var _ref115 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/locales', null, null, options);\n  });\n  return function all_locales(_x357, _x358) {\n    return _ref115.apply(this, arguments);\n  };\n}();\nexport var mobile_settings = function () {\n  var _ref116 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/mobile/settings', null, null, options);\n  });\n  return function mobile_settings(_x359, _x360) {\n    return _ref116.apply(this, arguments);\n  };\n}();\nexport var get_setting = function () {\n  var _ref117 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/setting', {\n      fields\n    }, null, options);\n  });\n  return function get_setting(_x361, _x362, _x363) {\n    return _ref117.apply(this, arguments);\n  };\n}();\nexport var set_setting = function () {\n  var _ref118 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.patch('/setting', {\n      fields\n    }, body, options);\n  });\n  return function set_setting(_x364, _x365, _x366, _x367) {\n    return _ref118.apply(this, arguments);\n  };\n}();\nexport var set_smtp_settings = function () {\n  var _ref119 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/smtp_settings', null, body, options);\n  });\n  return function set_smtp_settings(_x368, _x369, _x370) {\n    return _ref119.apply(this, arguments);\n  };\n}();\nexport var smtp_status = function () {\n  var _ref120 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/smtp_status', {\n      fields\n    }, null, options);\n  });\n  return function smtp_status(_x371, _x372, _x373) {\n    return _ref120.apply(this, arguments);\n  };\n}();\nexport var all_timezones = function () {\n  var _ref121 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/timezones', null, null, options);\n  });\n  return function all_timezones(_x374, _x375) {\n    return _ref121.apply(this, arguments);\n  };\n}();\nexport var versions = function () {\n  var _ref122 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/versions', {\n      fields\n    }, null, options);\n  });\n  return function versions(_x376, _x377, _x378) {\n    return _ref122.apply(this, arguments);\n  };\n}();\nexport var api_spec = function () {\n  var _ref123 = _asyncToGenerator(function* (sdk, api_version, specification, options) {\n    api_version = encodeParam(api_version);\n    specification = encodeParam(specification);\n    return sdk.get(\"/api_spec/\".concat(api_version, \"/\").concat(specification), null, null, options);\n  });\n  return function api_spec(_x379, _x380, _x381, _x382) {\n    return _ref123.apply(this, arguments);\n  };\n}();\nexport var whitelabel_configuration = function () {\n  var _ref124 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/whitelabel_configuration', {\n      fields\n    }, null, options);\n  });\n  return function whitelabel_configuration(_x383, _x384, _x385) {\n    return _ref124.apply(this, arguments);\n  };\n}();\nexport var update_whitelabel_configuration = function () {\n  var _ref125 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.put('/whitelabel_configuration', null, body, options);\n  });\n  return function update_whitelabel_configuration(_x386, _x387, _x388) {\n    return _ref125.apply(this, arguments);\n  };\n}();\nexport var all_connections = function () {\n  var _ref126 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/connections', {\n      fields\n    }, null, options);\n  });\n  return function all_connections(_x389, _x390, _x391) {\n    return _ref126.apply(this, arguments);\n  };\n}();\nexport var create_connection = function () {\n  var _ref127 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/connections', null, body, options);\n  });\n  return function create_connection(_x392, _x393, _x394) {\n    return _ref127.apply(this, arguments);\n  };\n}();\nexport var connection = function () {\n  var _ref128 = _asyncToGenerator(function* (sdk, connection_name, fields, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.get(\"/connections/\".concat(connection_name), {\n      fields\n    }, null, options);\n  });\n  return function connection(_x395, _x396, _x397, _x398) {\n    return _ref128.apply(this, arguments);\n  };\n}();\nexport var update_connection = function () {\n  var _ref129 = _asyncToGenerator(function* (sdk, connection_name, body, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.patch(\"/connections/\".concat(connection_name), null, body, options);\n  });\n  return function update_connection(_x399, _x400, _x401, _x402) {\n    return _ref129.apply(this, arguments);\n  };\n}();\nexport var delete_connection = function () {\n  var _ref130 = _asyncToGenerator(function* (sdk, connection_name, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.delete(\"/connections/\".concat(connection_name), null, null, options);\n  });\n  return function delete_connection(_x403, _x404, _x405) {\n    return _ref130.apply(this, arguments);\n  };\n}();\nexport var delete_connection_override = function () {\n  var _ref131 = _asyncToGenerator(function* (sdk, connection_name, override_context, options) {\n    connection_name = encodeParam(connection_name);\n    override_context = encodeParam(override_context);\n    return sdk.delete(\"/connections/\".concat(connection_name, \"/connection_override/\").concat(override_context), null, null, options);\n  });\n  return function delete_connection_override(_x406, _x407, _x408, _x409) {\n    return _ref131.apply(this, arguments);\n  };\n}();\nexport var test_connection = function () {\n  var _ref132 = _asyncToGenerator(function* (sdk, connection_name, tests, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.put(\"/connections/\".concat(connection_name, \"/test\"), {\n      tests\n    }, null, options);\n  });\n  return function test_connection(_x410, _x411, _x412, _x413) {\n    return _ref132.apply(this, arguments);\n  };\n}();\nexport var test_connection_config = function () {\n  var _ref133 = _asyncToGenerator(function* (sdk, body, tests, options) {\n    return sdk.put('/connections/test', {\n      tests\n    }, body, options);\n  });\n  return function test_connection_config(_x414, _x415, _x416, _x417) {\n    return _ref133.apply(this, arguments);\n  };\n}();\nexport var all_dialect_infos = function () {\n  var _ref134 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/dialect_info', {\n      fields\n    }, null, options);\n  });\n  return function all_dialect_infos(_x418, _x419, _x420) {\n    return _ref134.apply(this, arguments);\n  };\n}();\nexport var all_external_oauth_applications = function () {\n  var _ref135 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/external_oauth_applications', {\n      name: request.name,\n      client_id: request.client_id\n    }, null, options);\n  });\n  return function all_external_oauth_applications(_x421, _x422, _x423) {\n    return _ref135.apply(this, arguments);\n  };\n}();\nexport var create_external_oauth_application = function () {\n  var _ref136 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/external_oauth_applications', null, body, options);\n  });\n  return function create_external_oauth_application(_x424, _x425, _x426) {\n    return _ref136.apply(this, arguments);\n  };\n}();\nexport var create_oauth_application_user_state = function () {\n  var _ref137 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/external_oauth_applications/user_state', null, body, options);\n  });\n  return function create_oauth_application_user_state(_x427, _x428, _x429) {\n    return _ref137.apply(this, arguments);\n  };\n}();\nexport var all_ssh_servers = function () {\n  var _ref138 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/ssh_servers', {\n      fields\n    }, null, options);\n  });\n  return function all_ssh_servers(_x430, _x431, _x432) {\n    return _ref138.apply(this, arguments);\n  };\n}();\nexport var create_ssh_server = function () {\n  var _ref139 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/ssh_servers', null, body, options);\n  });\n  return function create_ssh_server(_x433, _x434, _x435) {\n    return _ref139.apply(this, arguments);\n  };\n}();\nexport var ssh_server = function () {\n  var _ref140 = _asyncToGenerator(function* (sdk, ssh_server_id, options) {\n    ssh_server_id = encodeParam(ssh_server_id);\n    return sdk.get(\"/ssh_server/\".concat(ssh_server_id), null, null, options);\n  });\n  return function ssh_server(_x436, _x437, _x438) {\n    return _ref140.apply(this, arguments);\n  };\n}();\nexport var update_ssh_server = function () {\n  var _ref141 = _asyncToGenerator(function* (sdk, ssh_server_id, body, options) {\n    ssh_server_id = encodeParam(ssh_server_id);\n    return sdk.patch(\"/ssh_server/\".concat(ssh_server_id), null, body, options);\n  });\n  return function update_ssh_server(_x439, _x440, _x441, _x442) {\n    return _ref141.apply(this, arguments);\n  };\n}();\nexport var delete_ssh_server = function () {\n  var _ref142 = _asyncToGenerator(function* (sdk, ssh_server_id, options) {\n    ssh_server_id = encodeParam(ssh_server_id);\n    return sdk.delete(\"/ssh_server/\".concat(ssh_server_id), null, null, options);\n  });\n  return function delete_ssh_server(_x443, _x444, _x445) {\n    return _ref142.apply(this, arguments);\n  };\n}();\nexport var test_ssh_server = function () {\n  var _ref143 = _asyncToGenerator(function* (sdk, ssh_server_id, options) {\n    ssh_server_id = encodeParam(ssh_server_id);\n    return sdk.get(\"/ssh_server/\".concat(ssh_server_id, \"/test\"), null, null, options);\n  });\n  return function test_ssh_server(_x446, _x447, _x448) {\n    return _ref143.apply(this, arguments);\n  };\n}();\nexport var all_ssh_tunnels = function () {\n  var _ref144 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/ssh_tunnels', {\n      fields\n    }, null, options);\n  });\n  return function all_ssh_tunnels(_x449, _x450, _x451) {\n    return _ref144.apply(this, arguments);\n  };\n}();\nexport var create_ssh_tunnel = function () {\n  var _ref145 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/ssh_tunnels', null, body, options);\n  });\n  return function create_ssh_tunnel(_x452, _x453, _x454) {\n    return _ref145.apply(this, arguments);\n  };\n}();\nexport var ssh_tunnel = function () {\n  var _ref146 = _asyncToGenerator(function* (sdk, ssh_tunnel_id, options) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id);\n    return sdk.get(\"/ssh_tunnel/\".concat(ssh_tunnel_id), null, null, options);\n  });\n  return function ssh_tunnel(_x455, _x456, _x457) {\n    return _ref146.apply(this, arguments);\n  };\n}();\nexport var update_ssh_tunnel = function () {\n  var _ref147 = _asyncToGenerator(function* (sdk, ssh_tunnel_id, body, options) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id);\n    return sdk.patch(\"/ssh_tunnel/\".concat(ssh_tunnel_id), null, body, options);\n  });\n  return function update_ssh_tunnel(_x458, _x459, _x460, _x461) {\n    return _ref147.apply(this, arguments);\n  };\n}();\nexport var delete_ssh_tunnel = function () {\n  var _ref148 = _asyncToGenerator(function* (sdk, ssh_tunnel_id, options) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id);\n    return sdk.delete(\"/ssh_tunnel/\".concat(ssh_tunnel_id), null, null, options);\n  });\n  return function delete_ssh_tunnel(_x462, _x463, _x464) {\n    return _ref148.apply(this, arguments);\n  };\n}();\nexport var test_ssh_tunnel = function () {\n  var _ref149 = _asyncToGenerator(function* (sdk, ssh_tunnel_id, options) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id);\n    return sdk.get(\"/ssh_tunnel/\".concat(ssh_tunnel_id, \"/test\"), null, null, options);\n  });\n  return function test_ssh_tunnel(_x465, _x466, _x467) {\n    return _ref149.apply(this, arguments);\n  };\n}();\nexport var ssh_public_key = function () {\n  var _ref150 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/ssh_public_key', null, null, options);\n  });\n  return function ssh_public_key(_x468, _x469) {\n    return _ref150.apply(this, arguments);\n  };\n}();\nexport var search_content_favorites = function () {\n  var _ref151 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/content_favorite/search', {\n      id: request.id,\n      user_id: request.user_id,\n      content_metadata_id: request.content_metadata_id,\n      dashboard_id: request.dashboard_id,\n      look_id: request.look_id,\n      board_id: request.board_id,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      fields: request.fields,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_content_favorites(_x470, _x471, _x472) {\n    return _ref151.apply(this, arguments);\n  };\n}();\nexport var content_favorite = function () {\n  var _ref152 = _asyncToGenerator(function* (sdk, content_favorite_id, fields, options) {\n    content_favorite_id = encodeParam(content_favorite_id);\n    return sdk.get(\"/content_favorite/\".concat(content_favorite_id), {\n      fields\n    }, null, options);\n  });\n  return function content_favorite(_x473, _x474, _x475, _x476) {\n    return _ref152.apply(this, arguments);\n  };\n}();\nexport var delete_content_favorite = function () {\n  var _ref153 = _asyncToGenerator(function* (sdk, content_favorite_id, options) {\n    content_favorite_id = encodeParam(content_favorite_id);\n    return sdk.delete(\"/content_favorite/\".concat(content_favorite_id), null, null, options);\n  });\n  return function delete_content_favorite(_x477, _x478, _x479) {\n    return _ref153.apply(this, arguments);\n  };\n}();\nexport var create_content_favorite = function () {\n  var _ref154 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/content_favorite', null, body, options);\n  });\n  return function create_content_favorite(_x480, _x481, _x482) {\n    return _ref154.apply(this, arguments);\n  };\n}();\nexport var all_content_metadatas = function () {\n  var _ref155 = _asyncToGenerator(function* (sdk, parent_id, fields, options) {\n    return sdk.get('/content_metadata', {\n      parent_id,\n      fields\n    }, null, options);\n  });\n  return function all_content_metadatas(_x483, _x484, _x485, _x486) {\n    return _ref155.apply(this, arguments);\n  };\n}();\nexport var content_metadata = function () {\n  var _ref156 = _asyncToGenerator(function* (sdk, content_metadata_id, fields, options) {\n    content_metadata_id = encodeParam(content_metadata_id);\n    return sdk.get(\"/content_metadata/\".concat(content_metadata_id), {\n      fields\n    }, null, options);\n  });\n  return function content_metadata(_x487, _x488, _x489, _x490) {\n    return _ref156.apply(this, arguments);\n  };\n}();\nexport var update_content_metadata = function () {\n  var _ref157 = _asyncToGenerator(function* (sdk, content_metadata_id, body, options) {\n    content_metadata_id = encodeParam(content_metadata_id);\n    return sdk.patch(\"/content_metadata/\".concat(content_metadata_id), null, body, options);\n  });\n  return function update_content_metadata(_x491, _x492, _x493, _x494) {\n    return _ref157.apply(this, arguments);\n  };\n}();\nexport var all_content_metadata_accesses = function () {\n  var _ref158 = _asyncToGenerator(function* (sdk, content_metadata_id, fields, options) {\n    return sdk.get('/content_metadata_access', {\n      content_metadata_id,\n      fields\n    }, null, options);\n  });\n  return function all_content_metadata_accesses(_x495, _x496, _x497, _x498) {\n    return _ref158.apply(this, arguments);\n  };\n}();\nexport var create_content_metadata_access = function () {\n  var _ref159 = _asyncToGenerator(function* (sdk, body, send_boards_notification_email, options) {\n    return sdk.post('/content_metadata_access', {\n      send_boards_notification_email\n    }, body, options);\n  });\n  return function create_content_metadata_access(_x499, _x500, _x501, _x502) {\n    return _ref159.apply(this, arguments);\n  };\n}();\nexport var update_content_metadata_access = function () {\n  var _ref160 = _asyncToGenerator(function* (sdk, content_metadata_access_id, body, options) {\n    content_metadata_access_id = encodeParam(content_metadata_access_id);\n    return sdk.put(\"/content_metadata_access/\".concat(content_metadata_access_id), null, body, options);\n  });\n  return function update_content_metadata_access(_x503, _x504, _x505, _x506) {\n    return _ref160.apply(this, arguments);\n  };\n}();\nexport var delete_content_metadata_access = function () {\n  var _ref161 = _asyncToGenerator(function* (sdk, content_metadata_access_id, options) {\n    content_metadata_access_id = encodeParam(content_metadata_access_id);\n    return sdk.delete(\"/content_metadata_access/\".concat(content_metadata_access_id), null, null, options);\n  });\n  return function delete_content_metadata_access(_x507, _x508, _x509) {\n    return _ref161.apply(this, arguments);\n  };\n}();\nexport var content_thumbnail = function () {\n  var _ref162 = _asyncToGenerator(function* (sdk, request, options) {\n    request.type = encodeParam(request.type);\n    request.resource_id = encodeParam(request.resource_id);\n    return sdk.get(\"/content_thumbnail/\".concat(request.type, \"/\").concat(request.resource_id), {\n      reload: request.reload,\n      format: request.format,\n      width: request.width,\n      height: request.height\n    }, null, options);\n  });\n  return function content_thumbnail(_x510, _x511, _x512) {\n    return _ref162.apply(this, arguments);\n  };\n}();\nexport var content_validation = function () {\n  var _ref163 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/content_validation', {\n      fields\n    }, null, options);\n  });\n  return function content_validation(_x513, _x514, _x515) {\n    return _ref163.apply(this, arguments);\n  };\n}();\nexport var search_content_views = function () {\n  var _ref164 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/content_view/search', {\n      view_count: request.view_count,\n      group_id: request.group_id,\n      look_id: request.look_id,\n      dashboard_id: request.dashboard_id,\n      content_metadata_id: request.content_metadata_id,\n      start_of_week_date: request.start_of_week_date,\n      all_time: request.all_time,\n      user_id: request.user_id,\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_content_views(_x516, _x517, _x518) {\n    return _ref164.apply(this, arguments);\n  };\n}();\nexport var vector_thumbnail = function () {\n  var _ref165 = _asyncToGenerator(function* (sdk, type, resource_id, reload, options) {\n    type = encodeParam(type);\n    resource_id = encodeParam(resource_id);\n    return sdk.get(\"/vector_thumbnail/\".concat(type, \"/\").concat(resource_id), {\n      reload\n    }, null, options);\n  });\n  return function vector_thumbnail(_x519, _x520, _x521, _x522, _x523) {\n    return _ref165.apply(this, arguments);\n  };\n}();\nexport var all_dashboards = function () {\n  var _ref166 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/dashboards', {\n      fields\n    }, null, options);\n  });\n  return function all_dashboards(_x524, _x525, _x526) {\n    return _ref166.apply(this, arguments);\n  };\n}();\nexport var create_dashboard = function () {\n  var _ref167 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/dashboards', null, body, options);\n  });\n  return function create_dashboard(_x527, _x528, _x529) {\n    return _ref167.apply(this, arguments);\n  };\n}();\nexport var search_dashboards = function () {\n  var _ref168 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/dashboards/search', {\n      id: request.id,\n      slug: request.slug,\n      title: request.title,\n      description: request.description,\n      content_favorite_id: request.content_favorite_id,\n      folder_id: request.folder_id,\n      deleted: request.deleted,\n      user_id: request.user_id,\n      view_count: request.view_count,\n      content_metadata_id: request.content_metadata_id,\n      curate: request.curate,\n      last_viewed_at: request.last_viewed_at,\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_dashboards(_x530, _x531, _x532) {\n    return _ref168.apply(this, arguments);\n  };\n}();\nexport var import_lookml_dashboard = function () {\n  var _ref169 = _asyncToGenerator(function* (sdk, lookml_dashboard_id, space_id, body, raw_locale, options) {\n    lookml_dashboard_id = encodeParam(lookml_dashboard_id);\n    space_id = encodeParam(space_id);\n    return sdk.post(\"/dashboards/\".concat(lookml_dashboard_id, \"/import/\").concat(space_id), {\n      raw_locale\n    }, body, options);\n  });\n  return function import_lookml_dashboard(_x533, _x534, _x535, _x536, _x537, _x538) {\n    return _ref169.apply(this, arguments);\n  };\n}();\nexport var sync_lookml_dashboard = function () {\n  var _ref170 = _asyncToGenerator(function* (sdk, lookml_dashboard_id, body, raw_locale, options) {\n    lookml_dashboard_id = encodeParam(lookml_dashboard_id);\n    return sdk.patch(\"/dashboards/\".concat(lookml_dashboard_id, \"/sync\"), {\n      raw_locale\n    }, body, options);\n  });\n  return function sync_lookml_dashboard(_x539, _x540, _x541, _x542, _x543) {\n    return _ref170.apply(this, arguments);\n  };\n}();\nexport var dashboard = function () {\n  var _ref171 = _asyncToGenerator(function* (sdk, dashboard_id, fields, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.get(\"/dashboards/\".concat(dashboard_id), {\n      fields\n    }, null, options);\n  });\n  return function dashboard(_x544, _x545, _x546, _x547) {\n    return _ref171.apply(this, arguments);\n  };\n}();\nexport var update_dashboard = function () {\n  var _ref172 = _asyncToGenerator(function* (sdk, dashboard_id, body, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.patch(\"/dashboards/\".concat(dashboard_id), null, body, options);\n  });\n  return function update_dashboard(_x548, _x549, _x550, _x551) {\n    return _ref172.apply(this, arguments);\n  };\n}();\nexport var delete_dashboard = function () {\n  var _ref173 = _asyncToGenerator(function* (sdk, dashboard_id, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.delete(\"/dashboards/\".concat(dashboard_id), null, null, options);\n  });\n  return function delete_dashboard(_x552, _x553, _x554) {\n    return _ref173.apply(this, arguments);\n  };\n}();\nexport var dashboard_aggregate_table_lookml = function () {\n  var _ref174 = _asyncToGenerator(function* (sdk, dashboard_id, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.get(\"/dashboards/aggregate_table_lookml/\".concat(dashboard_id), null, null, options);\n  });\n  return function dashboard_aggregate_table_lookml(_x555, _x556, _x557) {\n    return _ref174.apply(this, arguments);\n  };\n}();\nexport var dashboard_lookml = function () {\n  var _ref175 = _asyncToGenerator(function* (sdk, dashboard_id, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.get(\"/dashboards/lookml/\".concat(dashboard_id), null, null, options);\n  });\n  return function dashboard_lookml(_x558, _x559, _x560) {\n    return _ref175.apply(this, arguments);\n  };\n}();\nexport var move_dashboard = function () {\n  var _ref176 = _asyncToGenerator(function* (sdk, dashboard_id, folder_id, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.patch(\"/dashboards/\".concat(dashboard_id, \"/move\"), {\n      folder_id\n    }, null, options);\n  });\n  return function move_dashboard(_x561, _x562, _x563, _x564) {\n    return _ref176.apply(this, arguments);\n  };\n}();\nexport var import_dashboard_from_lookml = function () {\n  var _ref177 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/dashboards/lookml', null, body, options);\n  });\n  return function import_dashboard_from_lookml(_x565, _x566, _x567) {\n    return _ref177.apply(this, arguments);\n  };\n}();\nexport var create_dashboard_from_lookml = function () {\n  var _ref178 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/dashboards/from_lookml', null, body, options);\n  });\n  return function create_dashboard_from_lookml(_x568, _x569, _x570) {\n    return _ref178.apply(this, arguments);\n  };\n}();\nexport var copy_dashboard = function () {\n  var _ref179 = _asyncToGenerator(function* (sdk, dashboard_id, folder_id, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.post(\"/dashboards/\".concat(dashboard_id, \"/copy\"), {\n      folder_id\n    }, null, options);\n  });\n  return function copy_dashboard(_x571, _x572, _x573, _x574) {\n    return _ref179.apply(this, arguments);\n  };\n}();\nexport var search_dashboard_elements = function () {\n  var _ref180 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/dashboard_elements/search', {\n      dashboard_id: request.dashboard_id,\n      look_id: request.look_id,\n      title: request.title,\n      deleted: request.deleted,\n      fields: request.fields,\n      filter_or: request.filter_or,\n      sorts: request.sorts\n    }, null, options);\n  });\n  return function search_dashboard_elements(_x575, _x576, _x577) {\n    return _ref180.apply(this, arguments);\n  };\n}();\nexport var dashboard_element = function () {\n  var _ref181 = _asyncToGenerator(function* (sdk, dashboard_element_id, fields, options) {\n    dashboard_element_id = encodeParam(dashboard_element_id);\n    return sdk.get(\"/dashboard_elements/\".concat(dashboard_element_id), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_element(_x578, _x579, _x580, _x581) {\n    return _ref181.apply(this, arguments);\n  };\n}();\nexport var update_dashboard_element = function () {\n  var _ref182 = _asyncToGenerator(function* (sdk, dashboard_element_id, body, fields, options) {\n    dashboard_element_id = encodeParam(dashboard_element_id);\n    return sdk.patch(\"/dashboard_elements/\".concat(dashboard_element_id), {\n      fields\n    }, body, options);\n  });\n  return function update_dashboard_element(_x582, _x583, _x584, _x585, _x586) {\n    return _ref182.apply(this, arguments);\n  };\n}();\nexport var delete_dashboard_element = function () {\n  var _ref183 = _asyncToGenerator(function* (sdk, dashboard_element_id, options) {\n    dashboard_element_id = encodeParam(dashboard_element_id);\n    return sdk.delete(\"/dashboard_elements/\".concat(dashboard_element_id), null, null, options);\n  });\n  return function delete_dashboard_element(_x587, _x588, _x589) {\n    return _ref183.apply(this, arguments);\n  };\n}();\nexport var dashboard_dashboard_elements = function () {\n  var _ref184 = _asyncToGenerator(function* (sdk, dashboard_id, fields, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.get(\"/dashboards/\".concat(dashboard_id, \"/dashboard_elements\"), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_dashboard_elements(_x590, _x591, _x592, _x593) {\n    return _ref184.apply(this, arguments);\n  };\n}();\nexport var create_dashboard_element = function () {\n  var _ref185 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.post('/dashboard_elements', {\n      fields: request.fields,\n      apply_filters: request.apply_filters\n    }, request.body, options);\n  });\n  return function create_dashboard_element(_x594, _x595, _x596) {\n    return _ref185.apply(this, arguments);\n  };\n}();\nexport var dashboard_filter = function () {\n  var _ref186 = _asyncToGenerator(function* (sdk, dashboard_filter_id, fields, options) {\n    dashboard_filter_id = encodeParam(dashboard_filter_id);\n    return sdk.get(\"/dashboard_filters/\".concat(dashboard_filter_id), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_filter(_x597, _x598, _x599, _x600) {\n    return _ref186.apply(this, arguments);\n  };\n}();\nexport var update_dashboard_filter = function () {\n  var _ref187 = _asyncToGenerator(function* (sdk, dashboard_filter_id, body, fields, options) {\n    dashboard_filter_id = encodeParam(dashboard_filter_id);\n    return sdk.patch(\"/dashboard_filters/\".concat(dashboard_filter_id), {\n      fields\n    }, body, options);\n  });\n  return function update_dashboard_filter(_x601, _x602, _x603, _x604, _x605) {\n    return _ref187.apply(this, arguments);\n  };\n}();\nexport var delete_dashboard_filter = function () {\n  var _ref188 = _asyncToGenerator(function* (sdk, dashboard_filter_id, options) {\n    dashboard_filter_id = encodeParam(dashboard_filter_id);\n    return sdk.delete(\"/dashboard_filters/\".concat(dashboard_filter_id), null, null, options);\n  });\n  return function delete_dashboard_filter(_x606, _x607, _x608) {\n    return _ref188.apply(this, arguments);\n  };\n}();\nexport var dashboard_dashboard_filters = function () {\n  var _ref189 = _asyncToGenerator(function* (sdk, dashboard_id, fields, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.get(\"/dashboards/\".concat(dashboard_id, \"/dashboard_filters\"), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_dashboard_filters(_x609, _x610, _x611, _x612) {\n    return _ref189.apply(this, arguments);\n  };\n}();\nexport var create_dashboard_filter = function () {\n  var _ref190 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/dashboard_filters', {\n      fields\n    }, body, options);\n  });\n  return function create_dashboard_filter(_x613, _x614, _x615, _x616) {\n    return _ref190.apply(this, arguments);\n  };\n}();\nexport var dashboard_layout_component = function () {\n  var _ref191 = _asyncToGenerator(function* (sdk, dashboard_layout_component_id, fields, options) {\n    dashboard_layout_component_id = encodeParam(dashboard_layout_component_id);\n    return sdk.get(\"/dashboard_layout_components/\".concat(dashboard_layout_component_id), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_layout_component(_x617, _x618, _x619, _x620) {\n    return _ref191.apply(this, arguments);\n  };\n}();\nexport var update_dashboard_layout_component = function () {\n  var _ref192 = _asyncToGenerator(function* (sdk, dashboard_layout_component_id, body, fields, options) {\n    dashboard_layout_component_id = encodeParam(dashboard_layout_component_id);\n    return sdk.patch(\"/dashboard_layout_components/\".concat(dashboard_layout_component_id), {\n      fields\n    }, body, options);\n  });\n  return function update_dashboard_layout_component(_x621, _x622, _x623, _x624, _x625) {\n    return _ref192.apply(this, arguments);\n  };\n}();\nexport var dashboard_layout_dashboard_layout_components = function () {\n  var _ref193 = _asyncToGenerator(function* (sdk, dashboard_layout_id, fields, options) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id);\n    return sdk.get(\"/dashboard_layouts/\".concat(dashboard_layout_id, \"/dashboard_layout_components\"), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_layout_dashboard_layout_components(_x626, _x627, _x628, _x629) {\n    return _ref193.apply(this, arguments);\n  };\n}();\nexport var dashboard_layout = function () {\n  var _ref194 = _asyncToGenerator(function* (sdk, dashboard_layout_id, fields, options) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id);\n    return sdk.get(\"/dashboard_layouts/\".concat(dashboard_layout_id), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_layout(_x630, _x631, _x632, _x633) {\n    return _ref194.apply(this, arguments);\n  };\n}();\nexport var update_dashboard_layout = function () {\n  var _ref195 = _asyncToGenerator(function* (sdk, dashboard_layout_id, body, fields, options) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id);\n    return sdk.patch(\"/dashboard_layouts/\".concat(dashboard_layout_id), {\n      fields\n    }, body, options);\n  });\n  return function update_dashboard_layout(_x634, _x635, _x636, _x637, _x638) {\n    return _ref195.apply(this, arguments);\n  };\n}();\nexport var delete_dashboard_layout = function () {\n  var _ref196 = _asyncToGenerator(function* (sdk, dashboard_layout_id, options) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id);\n    return sdk.delete(\"/dashboard_layouts/\".concat(dashboard_layout_id), null, null, options);\n  });\n  return function delete_dashboard_layout(_x639, _x640, _x641) {\n    return _ref196.apply(this, arguments);\n  };\n}();\nexport var dashboard_dashboard_layouts = function () {\n  var _ref197 = _asyncToGenerator(function* (sdk, dashboard_id, fields, options) {\n    dashboard_id = encodeParam(dashboard_id);\n    return sdk.get(\"/dashboards/\".concat(dashboard_id, \"/dashboard_layouts\"), {\n      fields\n    }, null, options);\n  });\n  return function dashboard_dashboard_layouts(_x642, _x643, _x644, _x645) {\n    return _ref197.apply(this, arguments);\n  };\n}();\nexport var create_dashboard_layout = function () {\n  var _ref198 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/dashboard_layouts', {\n      fields\n    }, body, options);\n  });\n  return function create_dashboard_layout(_x646, _x647, _x648, _x649) {\n    return _ref198.apply(this, arguments);\n  };\n}();\nexport var perform_data_action = function () {\n  var _ref199 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/data_actions', null, body, options);\n  });\n  return function perform_data_action(_x650, _x651, _x652) {\n    return _ref199.apply(this, arguments);\n  };\n}();\nexport var fetch_remote_data_action_form = function () {\n  var _ref200 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/data_actions/form', null, body, options);\n  });\n  return function fetch_remote_data_action_form(_x653, _x654, _x655) {\n    return _ref200.apply(this, arguments);\n  };\n}();\nexport var all_datagroups = function () {\n  var _ref201 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/datagroups', null, null, options);\n  });\n  return function all_datagroups(_x656, _x657) {\n    return _ref201.apply(this, arguments);\n  };\n}();\nexport var datagroup = function () {\n  var _ref202 = _asyncToGenerator(function* (sdk, datagroup_id, options) {\n    datagroup_id = encodeParam(datagroup_id);\n    return sdk.get(\"/datagroups/\".concat(datagroup_id), null, null, options);\n  });\n  return function datagroup(_x658, _x659, _x660) {\n    return _ref202.apply(this, arguments);\n  };\n}();\nexport var update_datagroup = function () {\n  var _ref203 = _asyncToGenerator(function* (sdk, datagroup_id, body, options) {\n    datagroup_id = encodeParam(datagroup_id);\n    return sdk.patch(\"/datagroups/\".concat(datagroup_id), null, body, options);\n  });\n  return function update_datagroup(_x661, _x662, _x663, _x664) {\n    return _ref203.apply(this, arguments);\n  };\n}();\nexport var graph_derived_tables_for_model = function () {\n  var _ref204 = _asyncToGenerator(function* (sdk, request, options) {\n    request.model = encodeParam(request.model);\n    return sdk.get(\"/derived_table/graph/model/\".concat(request.model), {\n      format: request.format,\n      color: request.color\n    }, null, options);\n  });\n  return function graph_derived_tables_for_model(_x665, _x666, _x667) {\n    return _ref204.apply(this, arguments);\n  };\n}();\nexport var graph_derived_tables_for_view = function () {\n  var _ref205 = _asyncToGenerator(function* (sdk, request, options) {\n    request.view = encodeParam(request.view);\n    return sdk.get(\"/derived_table/graph/view/\".concat(request.view), {\n      models: request.models,\n      workspace: request.workspace\n    }, null, options);\n  });\n  return function graph_derived_tables_for_view(_x668, _x669, _x670) {\n    return _ref205.apply(this, arguments);\n  };\n}();\nexport var start_pdt_build = function () {\n  var _ref206 = _asyncToGenerator(function* (sdk, request, options) {\n    request.model_name = encodeParam(request.model_name);\n    request.view_name = encodeParam(request.view_name);\n    return sdk.get(\"/derived_table/\".concat(request.model_name, \"/\").concat(request.view_name, \"/start\"), {\n      force_rebuild: request.force_rebuild,\n      force_full_incremental: request.force_full_incremental,\n      workspace: request.workspace,\n      source: request.source\n    }, null, options);\n  });\n  return function start_pdt_build(_x671, _x672, _x673) {\n    return _ref206.apply(this, arguments);\n  };\n}();\nexport var check_pdt_build = function () {\n  var _ref207 = _asyncToGenerator(function* (sdk, materialization_id, options) {\n    materialization_id = encodeParam(materialization_id);\n    return sdk.get(\"/derived_table/\".concat(materialization_id, \"/status\"), null, null, options);\n  });\n  return function check_pdt_build(_x674, _x675, _x676) {\n    return _ref207.apply(this, arguments);\n  };\n}();\nexport var stop_pdt_build = function () {\n  var _ref208 = _asyncToGenerator(function* (sdk, materialization_id, source, options) {\n    materialization_id = encodeParam(materialization_id);\n    return sdk.get(\"/derived_table/\".concat(materialization_id, \"/stop\"), {\n      source\n    }, null, options);\n  });\n  return function stop_pdt_build(_x677, _x678, _x679, _x680) {\n    return _ref208.apply(this, arguments);\n  };\n}();\nexport var search_folders = function () {\n  var _ref209 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/folders/search', {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      name: request.name,\n      id: request.id,\n      parent_id: request.parent_id,\n      creator_id: request.creator_id,\n      filter_or: request.filter_or,\n      is_shared_root: request.is_shared_root\n    }, null, options);\n  });\n  return function search_folders(_x681, _x682, _x683) {\n    return _ref209.apply(this, arguments);\n  };\n}();\nexport var folder = function () {\n  var _ref210 = _asyncToGenerator(function* (sdk, folder_id, fields, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.get(\"/folders/\".concat(folder_id), {\n      fields\n    }, null, options);\n  });\n  return function folder(_x684, _x685, _x686, _x687) {\n    return _ref210.apply(this, arguments);\n  };\n}();\nexport var update_folder = function () {\n  var _ref211 = _asyncToGenerator(function* (sdk, folder_id, body, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.patch(\"/folders/\".concat(folder_id), null, body, options);\n  });\n  return function update_folder(_x688, _x689, _x690, _x691) {\n    return _ref211.apply(this, arguments);\n  };\n}();\nexport var delete_folder = function () {\n  var _ref212 = _asyncToGenerator(function* (sdk, folder_id, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.delete(\"/folders/\".concat(folder_id), null, null, options);\n  });\n  return function delete_folder(_x692, _x693, _x694) {\n    return _ref212.apply(this, arguments);\n  };\n}();\nexport var all_folders = function () {\n  var _ref213 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/folders', {\n      fields\n    }, null, options);\n  });\n  return function all_folders(_x695, _x696, _x697) {\n    return _ref213.apply(this, arguments);\n  };\n}();\nexport var create_folder = function () {\n  var _ref214 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/folders', null, body, options);\n  });\n  return function create_folder(_x698, _x699, _x700) {\n    return _ref214.apply(this, arguments);\n  };\n}();\nexport var folder_children = function () {\n  var _ref215 = _asyncToGenerator(function* (sdk, request, options) {\n    request.folder_id = encodeParam(request.folder_id);\n    return sdk.get(\"/folders/\".concat(request.folder_id, \"/children\"), {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts\n    }, null, options);\n  });\n  return function folder_children(_x701, _x702, _x703) {\n    return _ref215.apply(this, arguments);\n  };\n}();\nexport var folder_children_search = function () {\n  var _ref216 = _asyncToGenerator(function* (sdk, request, options) {\n    request.folder_id = encodeParam(request.folder_id);\n    return sdk.get(\"/folders/\".concat(request.folder_id, \"/children/search\"), {\n      fields: request.fields,\n      sorts: request.sorts,\n      name: request.name\n    }, null, options);\n  });\n  return function folder_children_search(_x704, _x705, _x706) {\n    return _ref216.apply(this, arguments);\n  };\n}();\nexport var folder_parent = function () {\n  var _ref217 = _asyncToGenerator(function* (sdk, folder_id, fields, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.get(\"/folders/\".concat(folder_id, \"/parent\"), {\n      fields\n    }, null, options);\n  });\n  return function folder_parent(_x707, _x708, _x709, _x710) {\n    return _ref217.apply(this, arguments);\n  };\n}();\nexport var folder_ancestors = function () {\n  var _ref218 = _asyncToGenerator(function* (sdk, folder_id, fields, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.get(\"/folders/\".concat(folder_id, \"/ancestors\"), {\n      fields\n    }, null, options);\n  });\n  return function folder_ancestors(_x711, _x712, _x713, _x714) {\n    return _ref218.apply(this, arguments);\n  };\n}();\nexport var folder_looks = function () {\n  var _ref219 = _asyncToGenerator(function* (sdk, folder_id, fields, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.get(\"/folders/\".concat(folder_id, \"/looks\"), {\n      fields\n    }, null, options);\n  });\n  return function folder_looks(_x715, _x716, _x717, _x718) {\n    return _ref219.apply(this, arguments);\n  };\n}();\nexport var folder_dashboards = function () {\n  var _ref220 = _asyncToGenerator(function* (sdk, folder_id, fields, options) {\n    folder_id = encodeParam(folder_id);\n    return sdk.get(\"/folders/\".concat(folder_id, \"/dashboards\"), {\n      fields\n    }, null, options);\n  });\n  return function folder_dashboards(_x719, _x720, _x721, _x722) {\n    return _ref220.apply(this, arguments);\n  };\n}();\nexport var all_groups = function () {\n  var _ref221 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/groups', {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      ids: request.ids,\n      content_metadata_id: request.content_metadata_id,\n      can_add_to_content_metadata: request.can_add_to_content_metadata\n    }, null, options);\n  });\n  return function all_groups(_x723, _x724, _x725) {\n    return _ref221.apply(this, arguments);\n  };\n}();\nexport var create_group = function () {\n  var _ref222 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/groups', {\n      fields\n    }, body, options);\n  });\n  return function create_group(_x726, _x727, _x728, _x729) {\n    return _ref222.apply(this, arguments);\n  };\n}();\nexport var search_groups = function () {\n  var _ref223 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/groups/search', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n      id: request.id,\n      name: request.name,\n      external_group_id: request.external_group_id,\n      externally_managed: request.externally_managed,\n      externally_orphaned: request.externally_orphaned\n    }, null, options);\n  });\n  return function search_groups(_x730, _x731, _x732) {\n    return _ref223.apply(this, arguments);\n  };\n}();\nexport var search_groups_with_roles = function () {\n  var _ref224 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/groups/search/with_roles', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n      id: request.id,\n      name: request.name,\n      external_group_id: request.external_group_id,\n      externally_managed: request.externally_managed,\n      externally_orphaned: request.externally_orphaned\n    }, null, options);\n  });\n  return function search_groups_with_roles(_x733, _x734, _x735) {\n    return _ref224.apply(this, arguments);\n  };\n}();\nexport var search_groups_with_hierarchy = function () {\n  var _ref225 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/groups/search/with_hierarchy', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n      id: request.id,\n      name: request.name,\n      external_group_id: request.external_group_id,\n      externally_managed: request.externally_managed,\n      externally_orphaned: request.externally_orphaned\n    }, null, options);\n  });\n  return function search_groups_with_hierarchy(_x736, _x737, _x738) {\n    return _ref225.apply(this, arguments);\n  };\n}();\nexport var group = function () {\n  var _ref226 = _asyncToGenerator(function* (sdk, group_id, fields, options) {\n    group_id = encodeParam(group_id);\n    return sdk.get(\"/groups/\".concat(group_id), {\n      fields\n    }, null, options);\n  });\n  return function group(_x739, _x740, _x741, _x742) {\n    return _ref226.apply(this, arguments);\n  };\n}();\nexport var update_group = function () {\n  var _ref227 = _asyncToGenerator(function* (sdk, group_id, body, fields, options) {\n    group_id = encodeParam(group_id);\n    return sdk.patch(\"/groups/\".concat(group_id), {\n      fields\n    }, body, options);\n  });\n  return function update_group(_x743, _x744, _x745, _x746, _x747) {\n    return _ref227.apply(this, arguments);\n  };\n}();\nexport var delete_group = function () {\n  var _ref228 = _asyncToGenerator(function* (sdk, group_id, options) {\n    group_id = encodeParam(group_id);\n    return sdk.delete(\"/groups/\".concat(group_id), null, null, options);\n  });\n  return function delete_group(_x748, _x749, _x750) {\n    return _ref228.apply(this, arguments);\n  };\n}();\nexport var all_group_groups = function () {\n  var _ref229 = _asyncToGenerator(function* (sdk, group_id, fields, options) {\n    group_id = encodeParam(group_id);\n    return sdk.get(\"/groups/\".concat(group_id, \"/groups\"), {\n      fields\n    }, null, options);\n  });\n  return function all_group_groups(_x751, _x752, _x753, _x754) {\n    return _ref229.apply(this, arguments);\n  };\n}();\nexport var add_group_group = function () {\n  var _ref230 = _asyncToGenerator(function* (sdk, group_id, body, options) {\n    group_id = encodeParam(group_id);\n    return sdk.post(\"/groups/\".concat(group_id, \"/groups\"), null, body, options);\n  });\n  return function add_group_group(_x755, _x756, _x757, _x758) {\n    return _ref230.apply(this, arguments);\n  };\n}();\nexport var all_group_users = function () {\n  var _ref231 = _asyncToGenerator(function* (sdk, request, options) {\n    request.group_id = encodeParam(request.group_id);\n    return sdk.get(\"/groups/\".concat(request.group_id, \"/users\"), {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts\n    }, null, options);\n  });\n  return function all_group_users(_x759, _x760, _x761) {\n    return _ref231.apply(this, arguments);\n  };\n}();\nexport var add_group_user = function () {\n  var _ref232 = _asyncToGenerator(function* (sdk, group_id, body, options) {\n    group_id = encodeParam(group_id);\n    return sdk.post(\"/groups/\".concat(group_id, \"/users\"), null, body, options);\n  });\n  return function add_group_user(_x762, _x763, _x764, _x765) {\n    return _ref232.apply(this, arguments);\n  };\n}();\nexport var delete_group_user = function () {\n  var _ref233 = _asyncToGenerator(function* (sdk, group_id, user_id, options) {\n    group_id = encodeParam(group_id);\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/groups/\".concat(group_id, \"/users/\").concat(user_id), null, null, options);\n  });\n  return function delete_group_user(_x766, _x767, _x768, _x769) {\n    return _ref233.apply(this, arguments);\n  };\n}();\nexport var delete_group_from_group = function () {\n  var _ref234 = _asyncToGenerator(function* (sdk, group_id, deleting_group_id, options) {\n    group_id = encodeParam(group_id);\n    deleting_group_id = encodeParam(deleting_group_id);\n    return sdk.delete(\"/groups/\".concat(group_id, \"/groups/\").concat(deleting_group_id), null, null, options);\n  });\n  return function delete_group_from_group(_x770, _x771, _x772, _x773) {\n    return _ref234.apply(this, arguments);\n  };\n}();\nexport var update_user_attribute_group_value = function () {\n  var _ref235 = _asyncToGenerator(function* (sdk, group_id, user_attribute_id, body, options) {\n    group_id = encodeParam(group_id);\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.patch(\"/groups/\".concat(group_id, \"/attribute_values/\").concat(user_attribute_id), null, body, options);\n  });\n  return function update_user_attribute_group_value(_x774, _x775, _x776, _x777, _x778) {\n    return _ref235.apply(this, arguments);\n  };\n}();\nexport var delete_user_attribute_group_value = function () {\n  var _ref236 = _asyncToGenerator(function* (sdk, group_id, user_attribute_id, options) {\n    group_id = encodeParam(group_id);\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.delete(\"/groups/\".concat(group_id, \"/attribute_values/\").concat(user_attribute_id), null, null, options);\n  });\n  return function delete_user_attribute_group_value(_x779, _x780, _x781, _x782) {\n    return _ref236.apply(this, arguments);\n  };\n}();\nexport var all_primary_homepage_sections = function () {\n  var _ref237 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/primary_homepage_sections', {\n      fields\n    }, null, options);\n  });\n  return function all_primary_homepage_sections(_x783, _x784, _x785) {\n    return _ref237.apply(this, arguments);\n  };\n}();\nexport var all_integration_hubs = function () {\n  var _ref238 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/integration_hubs', {\n      fields\n    }, null, options);\n  });\n  return function all_integration_hubs(_x786, _x787, _x788) {\n    return _ref238.apply(this, arguments);\n  };\n}();\nexport var create_integration_hub = function () {\n  var _ref239 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/integration_hubs', {\n      fields\n    }, body, options);\n  });\n  return function create_integration_hub(_x789, _x790, _x791, _x792) {\n    return _ref239.apply(this, arguments);\n  };\n}();\nexport var integration_hub = function () {\n  var _ref240 = _asyncToGenerator(function* (sdk, integration_hub_id, fields, options) {\n    integration_hub_id = encodeParam(integration_hub_id);\n    return sdk.get(\"/integration_hubs/\".concat(integration_hub_id), {\n      fields\n    }, null, options);\n  });\n  return function integration_hub(_x793, _x794, _x795, _x796) {\n    return _ref240.apply(this, arguments);\n  };\n}();\nexport var update_integration_hub = function () {\n  var _ref241 = _asyncToGenerator(function* (sdk, integration_hub_id, body, fields, options) {\n    integration_hub_id = encodeParam(integration_hub_id);\n    return sdk.patch(\"/integration_hubs/\".concat(integration_hub_id), {\n      fields\n    }, body, options);\n  });\n  return function update_integration_hub(_x797, _x798, _x799, _x800, _x801) {\n    return _ref241.apply(this, arguments);\n  };\n}();\nexport var delete_integration_hub = function () {\n  var _ref242 = _asyncToGenerator(function* (sdk, integration_hub_id, options) {\n    integration_hub_id = encodeParam(integration_hub_id);\n    return sdk.delete(\"/integration_hubs/\".concat(integration_hub_id), null, null, options);\n  });\n  return function delete_integration_hub(_x802, _x803, _x804) {\n    return _ref242.apply(this, arguments);\n  };\n}();\nexport var accept_integration_hub_legal_agreement = function () {\n  var _ref243 = _asyncToGenerator(function* (sdk, integration_hub_id, options) {\n    integration_hub_id = encodeParam(integration_hub_id);\n    return sdk.post(\"/integration_hubs/\".concat(integration_hub_id, \"/accept_legal_agreement\"), null, null, options);\n  });\n  return function accept_integration_hub_legal_agreement(_x805, _x806, _x807) {\n    return _ref243.apply(this, arguments);\n  };\n}();\nexport var all_integrations = function () {\n  var _ref244 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/integrations', {\n      fields: request.fields,\n      integration_hub_id: request.integration_hub_id\n    }, null, options);\n  });\n  return function all_integrations(_x808, _x809, _x810) {\n    return _ref244.apply(this, arguments);\n  };\n}();\nexport var integration = function () {\n  var _ref245 = _asyncToGenerator(function* (sdk, integration_id, fields, options) {\n    integration_id = encodeParam(integration_id);\n    return sdk.get(\"/integrations/\".concat(integration_id), {\n      fields\n    }, null, options);\n  });\n  return function integration(_x811, _x812, _x813, _x814) {\n    return _ref245.apply(this, arguments);\n  };\n}();\nexport var update_integration = function () {\n  var _ref246 = _asyncToGenerator(function* (sdk, integration_id, body, fields, options) {\n    integration_id = encodeParam(integration_id);\n    return sdk.patch(\"/integrations/\".concat(integration_id), {\n      fields\n    }, body, options);\n  });\n  return function update_integration(_x815, _x816, _x817, _x818, _x819) {\n    return _ref246.apply(this, arguments);\n  };\n}();\nexport var fetch_integration_form = function () {\n  var _ref247 = _asyncToGenerator(function* (sdk, integration_id, body, options) {\n    integration_id = encodeParam(integration_id);\n    return sdk.post(\"/integrations/\".concat(integration_id, \"/form\"), null, body, options);\n  });\n  return function fetch_integration_form(_x820, _x821, _x822, _x823) {\n    return _ref247.apply(this, arguments);\n  };\n}();\nexport var test_integration = function () {\n  var _ref248 = _asyncToGenerator(function* (sdk, integration_id, options) {\n    integration_id = encodeParam(integration_id);\n    return sdk.post(\"/integrations/\".concat(integration_id, \"/test\"), null, null, options);\n  });\n  return function test_integration(_x824, _x825, _x826) {\n    return _ref248.apply(this, arguments);\n  };\n}();\nexport var all_looks = function () {\n  var _ref249 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/looks', {\n      fields\n    }, null, options);\n  });\n  return function all_looks(_x827, _x828, _x829) {\n    return _ref249.apply(this, arguments);\n  };\n}();\nexport var create_look = function () {\n  var _ref250 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/looks', {\n      fields\n    }, body, options);\n  });\n  return function create_look(_x830, _x831, _x832, _x833) {\n    return _ref250.apply(this, arguments);\n  };\n}();\nexport var search_looks = function () {\n  var _ref251 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/looks/search', {\n      id: request.id,\n      title: request.title,\n      description: request.description,\n      content_favorite_id: request.content_favorite_id,\n      folder_id: request.folder_id,\n      user_id: request.user_id,\n      view_count: request.view_count,\n      deleted: request.deleted,\n      query_id: request.query_id,\n      curate: request.curate,\n      last_viewed_at: request.last_viewed_at,\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_looks(_x834, _x835, _x836) {\n    return _ref251.apply(this, arguments);\n  };\n}();\nexport var look = function () {\n  var _ref252 = _asyncToGenerator(function* (sdk, look_id, fields, options) {\n    look_id = encodeParam(look_id);\n    return sdk.get(\"/looks/\".concat(look_id), {\n      fields\n    }, null, options);\n  });\n  return function look(_x837, _x838, _x839, _x840) {\n    return _ref252.apply(this, arguments);\n  };\n}();\nexport var update_look = function () {\n  var _ref253 = _asyncToGenerator(function* (sdk, look_id, body, fields, options) {\n    look_id = encodeParam(look_id);\n    return sdk.patch(\"/looks/\".concat(look_id), {\n      fields\n    }, body, options);\n  });\n  return function update_look(_x841, _x842, _x843, _x844, _x845) {\n    return _ref253.apply(this, arguments);\n  };\n}();\nexport var delete_look = function () {\n  var _ref254 = _asyncToGenerator(function* (sdk, look_id, options) {\n    look_id = encodeParam(look_id);\n    return sdk.delete(\"/looks/\".concat(look_id), null, null, options);\n  });\n  return function delete_look(_x846, _x847, _x848) {\n    return _ref254.apply(this, arguments);\n  };\n}();\nexport var run_look = function () {\n  var _ref255 = _asyncToGenerator(function* (sdk, request, options) {\n    request.look_id = encodeParam(request.look_id);\n    request.result_format = encodeParam(request.result_format);\n    return sdk.get(\"/looks/\".concat(request.look_id, \"/run/\").concat(request.result_format), {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs\n    }, null, options);\n  });\n  return function run_look(_x849, _x850, _x851) {\n    return _ref255.apply(this, arguments);\n  };\n}();\nexport var copy_look = function () {\n  var _ref256 = _asyncToGenerator(function* (sdk, look_id, folder_id, options) {\n    look_id = encodeParam(look_id);\n    return sdk.post(\"/looks/\".concat(look_id, \"/copy\"), {\n      folder_id\n    }, null, options);\n  });\n  return function copy_look(_x852, _x853, _x854, _x855) {\n    return _ref256.apply(this, arguments);\n  };\n}();\nexport var move_look = function () {\n  var _ref257 = _asyncToGenerator(function* (sdk, look_id, folder_id, options) {\n    look_id = encodeParam(look_id);\n    return sdk.patch(\"/looks/\".concat(look_id, \"/move\"), {\n      folder_id\n    }, null, options);\n  });\n  return function move_look(_x856, _x857, _x858, _x859) {\n    return _ref257.apply(this, arguments);\n  };\n}();\nexport var all_lookml_models = function () {\n  var _ref258 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/lookml_models', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset\n    }, null, options);\n  });\n  return function all_lookml_models(_x860, _x861, _x862) {\n    return _ref258.apply(this, arguments);\n  };\n}();\nexport var create_lookml_model = function () {\n  var _ref259 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/lookml_models', null, body, options);\n  });\n  return function create_lookml_model(_x863, _x864, _x865) {\n    return _ref259.apply(this, arguments);\n  };\n}();\nexport var lookml_model = function () {\n  var _ref260 = _asyncToGenerator(function* (sdk, lookml_model_name, fields, options) {\n    lookml_model_name = encodeParam(lookml_model_name);\n    return sdk.get(\"/lookml_models/\".concat(lookml_model_name), {\n      fields\n    }, null, options);\n  });\n  return function lookml_model(_x866, _x867, _x868, _x869) {\n    return _ref260.apply(this, arguments);\n  };\n}();\nexport var update_lookml_model = function () {\n  var _ref261 = _asyncToGenerator(function* (sdk, lookml_model_name, body, options) {\n    lookml_model_name = encodeParam(lookml_model_name);\n    return sdk.patch(\"/lookml_models/\".concat(lookml_model_name), null, body, options);\n  });\n  return function update_lookml_model(_x870, _x871, _x872, _x873) {\n    return _ref261.apply(this, arguments);\n  };\n}();\nexport var delete_lookml_model = function () {\n  var _ref262 = _asyncToGenerator(function* (sdk, lookml_model_name, options) {\n    lookml_model_name = encodeParam(lookml_model_name);\n    return sdk.delete(\"/lookml_models/\".concat(lookml_model_name), null, null, options);\n  });\n  return function delete_lookml_model(_x874, _x875, _x876) {\n    return _ref262.apply(this, arguments);\n  };\n}();\nexport var lookml_model_explore = function () {\n  var _ref263 = _asyncToGenerator(function* (sdk, lookml_model_name, explore_name, fields, options) {\n    lookml_model_name = encodeParam(lookml_model_name);\n    explore_name = encodeParam(explore_name);\n    return sdk.get(\"/lookml_models/\".concat(lookml_model_name, \"/explores/\").concat(explore_name), {\n      fields\n    }, null, options);\n  });\n  return function lookml_model_explore(_x877, _x878, _x879, _x880, _x881) {\n    return _ref263.apply(this, arguments);\n  };\n}();\nexport var model_fieldname_suggestions = function () {\n  var _ref264 = _asyncToGenerator(function* (sdk, request, options) {\n    request.model_name = encodeParam(request.model_name);\n    request.view_name = encodeParam(request.view_name);\n    request.field_name = encodeParam(request.field_name);\n    return sdk.get(\"/models/\".concat(request.model_name, \"/views/\").concat(request.view_name, \"/fields/\").concat(request.field_name, \"/suggestions\"), {\n      term: request.term,\n      filters: request.filters\n    }, null, options);\n  });\n  return function model_fieldname_suggestions(_x882, _x883, _x884) {\n    return _ref264.apply(this, arguments);\n  };\n}();\nexport var get_model = function () {\n  var _ref265 = _asyncToGenerator(function* (sdk, model_name, options) {\n    model_name = encodeParam(model_name);\n    return sdk.get(\"/models/\".concat(model_name), null, null, options);\n  });\n  return function get_model(_x885, _x886, _x887) {\n    return _ref265.apply(this, arguments);\n  };\n}();\nexport var connection_databases = function () {\n  var _ref266 = _asyncToGenerator(function* (sdk, connection_name, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.get(\"/connections/\".concat(connection_name, \"/databases\"), null, null, options);\n  });\n  return function connection_databases(_x888, _x889, _x890) {\n    return _ref266.apply(this, arguments);\n  };\n}();\nexport var connection_features = function () {\n  var _ref267 = _asyncToGenerator(function* (sdk, connection_name, fields, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.get(\"/connections/\".concat(connection_name, \"/features\"), {\n      fields\n    }, null, options);\n  });\n  return function connection_features(_x891, _x892, _x893, _x894) {\n    return _ref267.apply(this, arguments);\n  };\n}();\nexport var connection_schemas = function () {\n  var _ref268 = _asyncToGenerator(function* (sdk, request, options) {\n    request.connection_name = encodeParam(request.connection_name);\n    return sdk.get(\"/connections/\".concat(request.connection_name, \"/schemas\"), {\n      database: request.database,\n      cache: request.cache,\n      fields: request.fields\n    }, null, options);\n  });\n  return function connection_schemas(_x895, _x896, _x897) {\n    return _ref268.apply(this, arguments);\n  };\n}();\nexport var connection_tables = function () {\n  var _ref269 = _asyncToGenerator(function* (sdk, request, options) {\n    request.connection_name = encodeParam(request.connection_name);\n    return sdk.get(\"/connections/\".concat(request.connection_name, \"/tables\"), {\n      database: request.database,\n      schema_name: request.schema_name,\n      cache: request.cache,\n      fields: request.fields,\n      table_filter: request.table_filter,\n      table_limit: request.table_limit\n    }, null, options);\n  });\n  return function connection_tables(_x898, _x899, _x900) {\n    return _ref269.apply(this, arguments);\n  };\n}();\nexport var connection_columns = function () {\n  var _ref270 = _asyncToGenerator(function* (sdk, request, options) {\n    request.connection_name = encodeParam(request.connection_name);\n    return sdk.get(\"/connections/\".concat(request.connection_name, \"/columns\"), {\n      database: request.database,\n      schema_name: request.schema_name,\n      cache: request.cache,\n      table_limit: request.table_limit,\n      table_names: request.table_names,\n      fields: request.fields\n    }, null, options);\n  });\n  return function connection_columns(_x901, _x902, _x903) {\n    return _ref270.apply(this, arguments);\n  };\n}();\nexport var connection_search_columns = function () {\n  var _ref271 = _asyncToGenerator(function* (sdk, request, options) {\n    request.connection_name = encodeParam(request.connection_name);\n    return sdk.get(\"/connections/\".concat(request.connection_name, \"/search_columns\"), {\n      column_name: request.column_name,\n      fields: request.fields\n    }, null, options);\n  });\n  return function connection_search_columns(_x904, _x905, _x906) {\n    return _ref271.apply(this, arguments);\n  };\n}();\nexport var connection_cost_estimate = function () {\n  var _ref272 = _asyncToGenerator(function* (sdk, connection_name, body, fields, options) {\n    connection_name = encodeParam(connection_name);\n    return sdk.post(\"/connections/\".concat(connection_name, \"/cost_estimate\"), {\n      fields\n    }, body, options);\n  });\n  return function connection_cost_estimate(_x907, _x908, _x909, _x910, _x911) {\n    return _ref272.apply(this, arguments);\n  };\n}();\nexport var lock_all = function () {\n  var _ref273 = _asyncToGenerator(function* (sdk, project_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/manifest/lock_all\"), {\n      fields\n    }, null, options);\n  });\n  return function lock_all(_x912, _x913, _x914, _x915) {\n    return _ref273.apply(this, arguments);\n  };\n}();\nexport var all_git_branches = function () {\n  var _ref274 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/git_branches\"), null, null, options);\n  });\n  return function all_git_branches(_x916, _x917, _x918) {\n    return _ref274.apply(this, arguments);\n  };\n}();\nexport var git_branch = function () {\n  var _ref275 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/git_branch\"), null, null, options);\n  });\n  return function git_branch(_x919, _x920, _x921) {\n    return _ref275.apply(this, arguments);\n  };\n}();\nexport var update_git_branch = function () {\n  var _ref276 = _asyncToGenerator(function* (sdk, project_id, body, options) {\n    project_id = encodeParam(project_id);\n    return sdk.put(\"/projects/\".concat(project_id, \"/git_branch\"), null, body, options);\n  });\n  return function update_git_branch(_x922, _x923, _x924, _x925) {\n    return _ref276.apply(this, arguments);\n  };\n}();\nexport var create_git_branch = function () {\n  var _ref277 = _asyncToGenerator(function* (sdk, project_id, body, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/git_branch\"), null, body, options);\n  });\n  return function create_git_branch(_x926, _x927, _x928, _x929) {\n    return _ref277.apply(this, arguments);\n  };\n}();\nexport var find_git_branch = function () {\n  var _ref278 = _asyncToGenerator(function* (sdk, project_id, branch_name, options) {\n    project_id = encodeParam(project_id);\n    branch_name = encodeParam(branch_name);\n    return sdk.get(\"/projects/\".concat(project_id, \"/git_branch/\").concat(branch_name), null, null, options);\n  });\n  return function find_git_branch(_x930, _x931, _x932, _x933) {\n    return _ref278.apply(this, arguments);\n  };\n}();\nexport var delete_git_branch = function () {\n  var _ref279 = _asyncToGenerator(function* (sdk, project_id, branch_name, options) {\n    project_id = encodeParam(project_id);\n    branch_name = encodeParam(branch_name);\n    return sdk.delete(\"/projects/\".concat(project_id, \"/git_branch/\").concat(branch_name), null, null, options);\n  });\n  return function delete_git_branch(_x934, _x935, _x936, _x937) {\n    return _ref279.apply(this, arguments);\n  };\n}();\nexport var deploy_ref_to_production = function () {\n  var _ref280 = _asyncToGenerator(function* (sdk, request, options) {\n    request.project_id = encodeParam(request.project_id);\n    return sdk.post(\"/projects/\".concat(request.project_id, \"/deploy_ref_to_production\"), {\n      branch: request.branch,\n      ref: request.ref\n    }, null, options);\n  });\n  return function deploy_ref_to_production(_x938, _x939, _x940) {\n    return _ref280.apply(this, arguments);\n  };\n}();\nexport var deploy_to_production = function () {\n  var _ref281 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/deploy_to_production\"), null, null, options);\n  });\n  return function deploy_to_production(_x941, _x942, _x943) {\n    return _ref281.apply(this, arguments);\n  };\n}();\nexport var reset_project_to_production = function () {\n  var _ref282 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/reset_to_production\"), null, null, options);\n  });\n  return function reset_project_to_production(_x944, _x945, _x946) {\n    return _ref282.apply(this, arguments);\n  };\n}();\nexport var reset_project_to_remote = function () {\n  var _ref283 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/reset_to_remote\"), null, null, options);\n  });\n  return function reset_project_to_remote(_x947, _x948, _x949) {\n    return _ref283.apply(this, arguments);\n  };\n}();\nexport var all_projects = function () {\n  var _ref284 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/projects', {\n      fields\n    }, null, options);\n  });\n  return function all_projects(_x950, _x951, _x952) {\n    return _ref284.apply(this, arguments);\n  };\n}();\nexport var create_project = function () {\n  var _ref285 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/projects', null, body, options);\n  });\n  return function create_project(_x953, _x954, _x955) {\n    return _ref285.apply(this, arguments);\n  };\n}();\nexport var project = function () {\n  var _ref286 = _asyncToGenerator(function* (sdk, project_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id), {\n      fields\n    }, null, options);\n  });\n  return function project(_x956, _x957, _x958, _x959) {\n    return _ref286.apply(this, arguments);\n  };\n}();\nexport var update_project = function () {\n  var _ref287 = _asyncToGenerator(function* (sdk, project_id, body, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.patch(\"/projects/\".concat(project_id), {\n      fields\n    }, body, options);\n  });\n  return function update_project(_x960, _x961, _x962, _x963, _x964) {\n    return _ref287.apply(this, arguments);\n  };\n}();\nexport var manifest = function () {\n  var _ref288 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/manifest\"), null, null, options);\n  });\n  return function manifest(_x965, _x966, _x967) {\n    return _ref288.apply(this, arguments);\n  };\n}();\nexport var git_deploy_key = function () {\n  var _ref289 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/git/deploy_key\"), null, null, options);\n  });\n  return function git_deploy_key(_x968, _x969, _x970) {\n    return _ref289.apply(this, arguments);\n  };\n}();\nexport var create_git_deploy_key = function () {\n  var _ref290 = _asyncToGenerator(function* (sdk, project_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/git/deploy_key\"), null, null, options);\n  });\n  return function create_git_deploy_key(_x971, _x972, _x973) {\n    return _ref290.apply(this, arguments);\n  };\n}();\nexport var project_validation_results = function () {\n  var _ref291 = _asyncToGenerator(function* (sdk, project_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/validate\"), {\n      fields\n    }, null, options);\n  });\n  return function project_validation_results(_x974, _x975, _x976, _x977) {\n    return _ref291.apply(this, arguments);\n  };\n}();\nexport var validate_project = function () {\n  var _ref292 = _asyncToGenerator(function* (sdk, project_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.post(\"/projects/\".concat(project_id, \"/validate\"), {\n      fields\n    }, null, options);\n  });\n  return function validate_project(_x978, _x979, _x980, _x981) {\n    return _ref292.apply(this, arguments);\n  };\n}();\nexport var project_workspace = function () {\n  var _ref293 = _asyncToGenerator(function* (sdk, project_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/current_workspace\"), {\n      fields\n    }, null, options);\n  });\n  return function project_workspace(_x982, _x983, _x984, _x985) {\n    return _ref293.apply(this, arguments);\n  };\n}();\nexport var all_project_files = function () {\n  var _ref294 = _asyncToGenerator(function* (sdk, project_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/files\"), {\n      fields\n    }, null, options);\n  });\n  return function all_project_files(_x986, _x987, _x988, _x989) {\n    return _ref294.apply(this, arguments);\n  };\n}();\nexport var project_file = function () {\n  var _ref295 = _asyncToGenerator(function* (sdk, project_id, file_id, fields, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/files/file\"), {\n      file_id,\n      fields\n    }, null, options);\n  });\n  return function project_file(_x990, _x991, _x992, _x993, _x994) {\n    return _ref295.apply(this, arguments);\n  };\n}();\nexport var all_git_connection_tests = function () {\n  var _ref296 = _asyncToGenerator(function* (sdk, project_id, remote_url, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/git_connection_tests\"), {\n      remote_url\n    }, null, options);\n  });\n  return function all_git_connection_tests(_x995, _x996, _x997, _x998) {\n    return _ref296.apply(this, arguments);\n  };\n}();\nexport var run_git_connection_test = function () {\n  var _ref297 = _asyncToGenerator(function* (sdk, request, options) {\n    request.project_id = encodeParam(request.project_id);\n    request.test_id = encodeParam(request.test_id);\n    return sdk.get(\"/projects/\".concat(request.project_id, \"/git_connection_tests/\").concat(request.test_id), {\n      remote_url: request.remote_url,\n      use_production: request.use_production\n    }, null, options);\n  });\n  return function run_git_connection_test(_x999, _x1000, _x1001) {\n    return _ref297.apply(this, arguments);\n  };\n}();\nexport var all_lookml_tests = function () {\n  var _ref298 = _asyncToGenerator(function* (sdk, project_id, file_id, options) {\n    project_id = encodeParam(project_id);\n    return sdk.get(\"/projects/\".concat(project_id, \"/lookml_tests\"), {\n      file_id\n    }, null, options);\n  });\n  return function all_lookml_tests(_x1002, _x1003, _x1004, _x1005) {\n    return _ref298.apply(this, arguments);\n  };\n}();\nexport var run_lookml_test = function () {\n  var _ref299 = _asyncToGenerator(function* (sdk, request, options) {\n    request.project_id = encodeParam(request.project_id);\n    return sdk.get(\"/projects/\".concat(request.project_id, \"/lookml_tests/run\"), {\n      file_id: request.file_id,\n      test: request.test,\n      model: request.model\n    }, null, options);\n  });\n  return function run_lookml_test(_x1006, _x1007, _x1008) {\n    return _ref299.apply(this, arguments);\n  };\n}();\nexport var tag_ref = function () {\n  var _ref300 = _asyncToGenerator(function* (sdk, request, options) {\n    request.project_id = encodeParam(request.project_id);\n    return sdk.post(\"/projects/\".concat(request.project_id, \"/tag\"), {\n      commit_sha: request.commit_sha,\n      tag_name: request.tag_name,\n      tag_message: request.tag_message\n    }, request.body, options);\n  });\n  return function tag_ref(_x1009, _x1010, _x1011) {\n    return _ref300.apply(this, arguments);\n  };\n}();\nexport var update_repository_credential = function () {\n  var _ref301 = _asyncToGenerator(function* (sdk, root_project_id, credential_id, body, options) {\n    root_project_id = encodeParam(root_project_id);\n    credential_id = encodeParam(credential_id);\n    return sdk.put(\"/projects/\".concat(root_project_id, \"/credential/\").concat(credential_id), null, body, options);\n  });\n  return function update_repository_credential(_x1012, _x1013, _x1014, _x1015, _x1016) {\n    return _ref301.apply(this, arguments);\n  };\n}();\nexport var delete_repository_credential = function () {\n  var _ref302 = _asyncToGenerator(function* (sdk, root_project_id, credential_id, options) {\n    root_project_id = encodeParam(root_project_id);\n    credential_id = encodeParam(credential_id);\n    return sdk.delete(\"/projects/\".concat(root_project_id, \"/credential/\").concat(credential_id), null, null, options);\n  });\n  return function delete_repository_credential(_x1017, _x1018, _x1019, _x1020) {\n    return _ref302.apply(this, arguments);\n  };\n}();\nexport var get_all_repository_credentials = function () {\n  var _ref303 = _asyncToGenerator(function* (sdk, root_project_id, options) {\n    root_project_id = encodeParam(root_project_id);\n    return sdk.get(\"/projects/\".concat(root_project_id, \"/credentials\"), null, null, options);\n  });\n  return function get_all_repository_credentials(_x1021, _x1022, _x1023) {\n    return _ref303.apply(this, arguments);\n  };\n}();\nexport var create_query_task = function () {\n  var _ref304 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.post('/query_tasks', {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      fields: request.fields\n    }, request.body, options);\n  });\n  return function create_query_task(_x1024, _x1025, _x1026) {\n    return _ref304.apply(this, arguments);\n  };\n}();\nexport var query_task_multi_results = function () {\n  var _ref305 = _asyncToGenerator(function* (sdk, query_task_ids, options) {\n    return sdk.get('/query_tasks/multi_results', {\n      query_task_ids\n    }, null, options);\n  });\n  return function query_task_multi_results(_x1027, _x1028, _x1029) {\n    return _ref305.apply(this, arguments);\n  };\n}();\nexport var query_task = function () {\n  var _ref306 = _asyncToGenerator(function* (sdk, query_task_id, fields, options) {\n    query_task_id = encodeParam(query_task_id);\n    return sdk.get(\"/query_tasks/\".concat(query_task_id), {\n      fields\n    }, null, options);\n  });\n  return function query_task(_x1030, _x1031, _x1032, _x1033) {\n    return _ref306.apply(this, arguments);\n  };\n}();\nexport var query_task_results = function () {\n  var _ref307 = _asyncToGenerator(function* (sdk, query_task_id, options) {\n    query_task_id = encodeParam(query_task_id);\n    return sdk.get(\"/query_tasks/\".concat(query_task_id, \"/results\"), null, null, options);\n  });\n  return function query_task_results(_x1034, _x1035, _x1036) {\n    return _ref307.apply(this, arguments);\n  };\n}();\nexport var query = function () {\n  var _ref308 = _asyncToGenerator(function* (sdk, query_id, fields, options) {\n    query_id = encodeParam(query_id);\n    return sdk.get(\"/queries/\".concat(query_id), {\n      fields\n    }, null, options);\n  });\n  return function query(_x1037, _x1038, _x1039, _x1040) {\n    return _ref308.apply(this, arguments);\n  };\n}();\nexport var query_for_slug = function () {\n  var _ref309 = _asyncToGenerator(function* (sdk, slug, fields, options) {\n    slug = encodeParam(slug);\n    return sdk.get(\"/queries/slug/\".concat(slug), {\n      fields\n    }, null, options);\n  });\n  return function query_for_slug(_x1041, _x1042, _x1043, _x1044) {\n    return _ref309.apply(this, arguments);\n  };\n}();\nexport var create_query = function () {\n  var _ref310 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/queries', {\n      fields\n    }, body, options);\n  });\n  return function create_query(_x1045, _x1046, _x1047, _x1048) {\n    return _ref310.apply(this, arguments);\n  };\n}();\nexport var run_query = function () {\n  var _ref311 = _asyncToGenerator(function* (sdk, request, options) {\n    request.query_id = encodeParam(request.query_id);\n    request.result_format = encodeParam(request.result_format);\n    return sdk.get(\"/queries/\".concat(request.query_id, \"/run/\").concat(request.result_format), {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs,\n      source: request.source\n    }, null, options);\n  });\n  return function run_query(_x1049, _x1050, _x1051) {\n    return _ref311.apply(this, arguments);\n  };\n}();\nexport var run_inline_query = function () {\n  var _ref312 = _asyncToGenerator(function* (sdk, request, options) {\n    request.result_format = encodeParam(request.result_format);\n    return sdk.post(\"/queries/run/\".concat(request.result_format), {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs\n    }, request.body, options);\n  });\n  return function run_inline_query(_x1052, _x1053, _x1054) {\n    return _ref312.apply(this, arguments);\n  };\n}();\nexport var run_url_encoded_query = function () {\n  var _ref313 = _asyncToGenerator(function* (sdk, model_name, view_name, result_format, options) {\n    model_name = encodeParam(model_name);\n    view_name = encodeParam(view_name);\n    result_format = encodeParam(result_format);\n    return sdk.get(\"/queries/models/\".concat(model_name, \"/views/\").concat(view_name, \"/run/\").concat(result_format), null, null, options);\n  });\n  return function run_url_encoded_query(_x1055, _x1056, _x1057, _x1058, _x1059) {\n    return _ref313.apply(this, arguments);\n  };\n}();\nexport var merge_query = function () {\n  var _ref314 = _asyncToGenerator(function* (sdk, merge_query_id, fields, options) {\n    merge_query_id = encodeParam(merge_query_id);\n    return sdk.get(\"/merge_queries/\".concat(merge_query_id), {\n      fields\n    }, null, options);\n  });\n  return function merge_query(_x1060, _x1061, _x1062, _x1063) {\n    return _ref314.apply(this, arguments);\n  };\n}();\nexport var create_merge_query = function () {\n  var _ref315 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/merge_queries', {\n      fields\n    }, body, options);\n  });\n  return function create_merge_query(_x1064, _x1065, _x1066, _x1067) {\n    return _ref315.apply(this, arguments);\n  };\n}();\nexport var all_running_queries = function () {\n  var _ref316 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/running_queries', null, null, options);\n  });\n  return function all_running_queries(_x1068, _x1069) {\n    return _ref316.apply(this, arguments);\n  };\n}();\nexport var kill_query = function () {\n  var _ref317 = _asyncToGenerator(function* (sdk, query_task_id, options) {\n    query_task_id = encodeParam(query_task_id);\n    return sdk.delete(\"/running_queries/\".concat(query_task_id), null, null, options);\n  });\n  return function kill_query(_x1070, _x1071, _x1072) {\n    return _ref317.apply(this, arguments);\n  };\n}();\nexport var sql_query = function () {\n  var _ref318 = _asyncToGenerator(function* (sdk, slug, options) {\n    slug = encodeParam(slug);\n    return sdk.get(\"/sql_queries/\".concat(slug), null, null, options);\n  });\n  return function sql_query(_x1073, _x1074, _x1075) {\n    return _ref318.apply(this, arguments);\n  };\n}();\nexport var create_sql_query = function () {\n  var _ref319 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/sql_queries', null, body, options);\n  });\n  return function create_sql_query(_x1076, _x1077, _x1078) {\n    return _ref319.apply(this, arguments);\n  };\n}();\nexport var run_sql_query = function () {\n  var _ref320 = _asyncToGenerator(function* (sdk, slug, result_format, download, options) {\n    slug = encodeParam(slug);\n    result_format = encodeParam(result_format);\n    return sdk.post(\"/sql_queries/\".concat(slug, \"/run/\").concat(result_format), {\n      download\n    }, null, options);\n  });\n  return function run_sql_query(_x1079, _x1080, _x1081, _x1082, _x1083) {\n    return _ref320.apply(this, arguments);\n  };\n}();\nexport var create_look_render_task = function () {\n  var _ref321 = _asyncToGenerator(function* (sdk, look_id, result_format, width, height, fields, options) {\n    look_id = encodeParam(look_id);\n    result_format = encodeParam(result_format);\n    return sdk.post(\"/render_tasks/looks/\".concat(look_id, \"/\").concat(result_format), {\n      width,\n      height,\n      fields\n    }, null, options);\n  });\n  return function create_look_render_task(_x1084, _x1085, _x1086, _x1087, _x1088, _x1089, _x1090) {\n    return _ref321.apply(this, arguments);\n  };\n}();\nexport var create_query_render_task = function () {\n  var _ref322 = _asyncToGenerator(function* (sdk, query_id, result_format, width, height, fields, options) {\n    query_id = encodeParam(query_id);\n    result_format = encodeParam(result_format);\n    return sdk.post(\"/render_tasks/queries/\".concat(query_id, \"/\").concat(result_format), {\n      width,\n      height,\n      fields\n    }, null, options);\n  });\n  return function create_query_render_task(_x1091, _x1092, _x1093, _x1094, _x1095, _x1096, _x1097) {\n    return _ref322.apply(this, arguments);\n  };\n}();\nexport var create_dashboard_render_task = function () {\n  var _ref323 = _asyncToGenerator(function* (sdk, request, options) {\n    request.dashboard_id = encodeParam(request.dashboard_id);\n    request.result_format = encodeParam(request.result_format);\n    return sdk.post(\"/render_tasks/dashboards/\".concat(request.dashboard_id, \"/\").concat(request.result_format), {\n      width: request.width,\n      height: request.height,\n      fields: request.fields,\n      pdf_paper_size: request.pdf_paper_size,\n      pdf_landscape: request.pdf_landscape,\n      long_tables: request.long_tables\n    }, request.body, options);\n  });\n  return function create_dashboard_render_task(_x1098, _x1099, _x1100) {\n    return _ref323.apply(this, arguments);\n  };\n}();\nexport var render_task = function () {\n  var _ref324 = _asyncToGenerator(function* (sdk, render_task_id, fields, options) {\n    render_task_id = encodeParam(render_task_id);\n    return sdk.get(\"/render_tasks/\".concat(render_task_id), {\n      fields\n    }, null, options);\n  });\n  return function render_task(_x1101, _x1102, _x1103, _x1104) {\n    return _ref324.apply(this, arguments);\n  };\n}();\nexport var render_task_results = function () {\n  var _ref325 = _asyncToGenerator(function* (sdk, render_task_id, options) {\n    render_task_id = encodeParam(render_task_id);\n    return sdk.get(\"/render_tasks/\".concat(render_task_id, \"/results\"), null, null, options);\n  });\n  return function render_task_results(_x1105, _x1106, _x1107) {\n    return _ref325.apply(this, arguments);\n  };\n}();\nexport var create_dashboard_element_render_task = function () {\n  var _ref326 = _asyncToGenerator(function* (sdk, dashboard_element_id, result_format, width, height, fields, options) {\n    dashboard_element_id = encodeParam(dashboard_element_id);\n    result_format = encodeParam(result_format);\n    return sdk.post(\"/render_tasks/dashboard_elements/\".concat(dashboard_element_id, \"/\").concat(result_format), {\n      width,\n      height,\n      fields\n    }, null, options);\n  });\n  return function create_dashboard_element_render_task(_x1108, _x1109, _x1110, _x1111, _x1112, _x1113, _x1114) {\n    return _ref326.apply(this, arguments);\n  };\n}();\nexport var search_model_sets = function () {\n  var _ref327 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/model_sets/search', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      all_access: request.all_access,\n      built_in: request.built_in,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_model_sets(_x1115, _x1116, _x1117) {\n    return _ref327.apply(this, arguments);\n  };\n}();\nexport var model_set = function () {\n  var _ref328 = _asyncToGenerator(function* (sdk, model_set_id, fields, options) {\n    model_set_id = encodeParam(model_set_id);\n    return sdk.get(\"/model_sets/\".concat(model_set_id), {\n      fields\n    }, null, options);\n  });\n  return function model_set(_x1118, _x1119, _x1120, _x1121) {\n    return _ref328.apply(this, arguments);\n  };\n}();\nexport var update_model_set = function () {\n  var _ref329 = _asyncToGenerator(function* (sdk, model_set_id, body, options) {\n    model_set_id = encodeParam(model_set_id);\n    return sdk.patch(\"/model_sets/\".concat(model_set_id), null, body, options);\n  });\n  return function update_model_set(_x1122, _x1123, _x1124, _x1125) {\n    return _ref329.apply(this, arguments);\n  };\n}();\nexport var delete_model_set = function () {\n  var _ref330 = _asyncToGenerator(function* (sdk, model_set_id, options) {\n    model_set_id = encodeParam(model_set_id);\n    return sdk.delete(\"/model_sets/\".concat(model_set_id), null, null, options);\n  });\n  return function delete_model_set(_x1126, _x1127, _x1128) {\n    return _ref330.apply(this, arguments);\n  };\n}();\nexport var all_model_sets = function () {\n  var _ref331 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/model_sets', {\n      fields\n    }, null, options);\n  });\n  return function all_model_sets(_x1129, _x1130, _x1131) {\n    return _ref331.apply(this, arguments);\n  };\n}();\nexport var create_model_set = function () {\n  var _ref332 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/model_sets', null, body, options);\n  });\n  return function create_model_set(_x1132, _x1133, _x1134) {\n    return _ref332.apply(this, arguments);\n  };\n}();\nexport var all_permissions = function () {\n  var _ref333 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/permissions', null, null, options);\n  });\n  return function all_permissions(_x1135, _x1136) {\n    return _ref333.apply(this, arguments);\n  };\n}();\nexport var search_permission_sets = function () {\n  var _ref334 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/permission_sets/search', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      all_access: request.all_access,\n      built_in: request.built_in,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_permission_sets(_x1137, _x1138, _x1139) {\n    return _ref334.apply(this, arguments);\n  };\n}();\nexport var permission_set = function () {\n  var _ref335 = _asyncToGenerator(function* (sdk, permission_set_id, fields, options) {\n    permission_set_id = encodeParam(permission_set_id);\n    return sdk.get(\"/permission_sets/\".concat(permission_set_id), {\n      fields\n    }, null, options);\n  });\n  return function permission_set(_x1140, _x1141, _x1142, _x1143) {\n    return _ref335.apply(this, arguments);\n  };\n}();\nexport var update_permission_set = function () {\n  var _ref336 = _asyncToGenerator(function* (sdk, permission_set_id, body, options) {\n    permission_set_id = encodeParam(permission_set_id);\n    return sdk.patch(\"/permission_sets/\".concat(permission_set_id), null, body, options);\n  });\n  return function update_permission_set(_x1144, _x1145, _x1146, _x1147) {\n    return _ref336.apply(this, arguments);\n  };\n}();\nexport var delete_permission_set = function () {\n  var _ref337 = _asyncToGenerator(function* (sdk, permission_set_id, options) {\n    permission_set_id = encodeParam(permission_set_id);\n    return sdk.delete(\"/permission_sets/\".concat(permission_set_id), null, null, options);\n  });\n  return function delete_permission_set(_x1148, _x1149, _x1150) {\n    return _ref337.apply(this, arguments);\n  };\n}();\nexport var all_permission_sets = function () {\n  var _ref338 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/permission_sets', {\n      fields\n    }, null, options);\n  });\n  return function all_permission_sets(_x1151, _x1152, _x1153) {\n    return _ref338.apply(this, arguments);\n  };\n}();\nexport var create_permission_set = function () {\n  var _ref339 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/permission_sets', null, body, options);\n  });\n  return function create_permission_set(_x1154, _x1155, _x1156) {\n    return _ref339.apply(this, arguments);\n  };\n}();\nexport var all_roles = function () {\n  var _ref340 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/roles', {\n      fields: request.fields,\n      ids: request.ids\n    }, null, options);\n  });\n  return function all_roles(_x1157, _x1158, _x1159) {\n    return _ref340.apply(this, arguments);\n  };\n}();\nexport var create_role = function () {\n  var _ref341 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/roles', null, body, options);\n  });\n  return function create_role(_x1160, _x1161, _x1162) {\n    return _ref341.apply(this, arguments);\n  };\n}();\nexport var search_roles = function () {\n  var _ref342 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/roles/search', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      built_in: request.built_in,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_roles(_x1163, _x1164, _x1165) {\n    return _ref342.apply(this, arguments);\n  };\n}();\nexport var search_roles_with_user_count = function () {\n  var _ref343 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/roles/search/with_user_count', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      built_in: request.built_in,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_roles_with_user_count(_x1166, _x1167, _x1168) {\n    return _ref343.apply(this, arguments);\n  };\n}();\nexport var role = function () {\n  var _ref344 = _asyncToGenerator(function* (sdk, role_id, options) {\n    role_id = encodeParam(role_id);\n    return sdk.get(\"/roles/\".concat(role_id), null, null, options);\n  });\n  return function role(_x1169, _x1170, _x1171) {\n    return _ref344.apply(this, arguments);\n  };\n}();\nexport var update_role = function () {\n  var _ref345 = _asyncToGenerator(function* (sdk, role_id, body, options) {\n    role_id = encodeParam(role_id);\n    return sdk.patch(\"/roles/\".concat(role_id), null, body, options);\n  });\n  return function update_role(_x1172, _x1173, _x1174, _x1175) {\n    return _ref345.apply(this, arguments);\n  };\n}();\nexport var delete_role = function () {\n  var _ref346 = _asyncToGenerator(function* (sdk, role_id, options) {\n    role_id = encodeParam(role_id);\n    return sdk.delete(\"/roles/\".concat(role_id), null, null, options);\n  });\n  return function delete_role(_x1176, _x1177, _x1178) {\n    return _ref346.apply(this, arguments);\n  };\n}();\nexport var role_groups = function () {\n  var _ref347 = _asyncToGenerator(function* (sdk, role_id, fields, options) {\n    role_id = encodeParam(role_id);\n    return sdk.get(\"/roles/\".concat(role_id, \"/groups\"), {\n      fields\n    }, null, options);\n  });\n  return function role_groups(_x1179, _x1180, _x1181, _x1182) {\n    return _ref347.apply(this, arguments);\n  };\n}();\nexport var set_role_groups = function () {\n  var _ref348 = _asyncToGenerator(function* (sdk, role_id, body, options) {\n    role_id = encodeParam(role_id);\n    return sdk.put(\"/roles/\".concat(role_id, \"/groups\"), null, body, options);\n  });\n  return function set_role_groups(_x1183, _x1184, _x1185, _x1186) {\n    return _ref348.apply(this, arguments);\n  };\n}();\nexport var role_users = function () {\n  var _ref349 = _asyncToGenerator(function* (sdk, request, options) {\n    request.role_id = encodeParam(request.role_id);\n    return sdk.get(\"/roles/\".concat(request.role_id, \"/users\"), {\n      fields: request.fields,\n      direct_association_only: request.direct_association_only\n    }, null, options);\n  });\n  return function role_users(_x1187, _x1188, _x1189) {\n    return _ref349.apply(this, arguments);\n  };\n}();\nexport var set_role_users = function () {\n  var _ref350 = _asyncToGenerator(function* (sdk, role_id, body, options) {\n    role_id = encodeParam(role_id);\n    return sdk.put(\"/roles/\".concat(role_id, \"/users\"), null, body, options);\n  });\n  return function set_role_users(_x1190, _x1191, _x1192, _x1193) {\n    return _ref350.apply(this, arguments);\n  };\n}();\nexport var scheduled_plans_for_space = function () {\n  var _ref351 = _asyncToGenerator(function* (sdk, space_id, fields, options) {\n    space_id = encodeParam(space_id);\n    return sdk.get(\"/scheduled_plans/space/\".concat(space_id), {\n      fields\n    }, null, options);\n  });\n  return function scheduled_plans_for_space(_x1194, _x1195, _x1196, _x1197) {\n    return _ref351.apply(this, arguments);\n  };\n}();\nexport var scheduled_plan = function () {\n  var _ref352 = _asyncToGenerator(function* (sdk, scheduled_plan_id, fields, options) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id);\n    return sdk.get(\"/scheduled_plans/\".concat(scheduled_plan_id), {\n      fields\n    }, null, options);\n  });\n  return function scheduled_plan(_x1198, _x1199, _x1200, _x1201) {\n    return _ref352.apply(this, arguments);\n  };\n}();\nexport var update_scheduled_plan = function () {\n  var _ref353 = _asyncToGenerator(function* (sdk, scheduled_plan_id, body, options) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id);\n    return sdk.patch(\"/scheduled_plans/\".concat(scheduled_plan_id), null, body, options);\n  });\n  return function update_scheduled_plan(_x1202, _x1203, _x1204, _x1205) {\n    return _ref353.apply(this, arguments);\n  };\n}();\nexport var delete_scheduled_plan = function () {\n  var _ref354 = _asyncToGenerator(function* (sdk, scheduled_plan_id, options) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id);\n    return sdk.delete(\"/scheduled_plans/\".concat(scheduled_plan_id), null, null, options);\n  });\n  return function delete_scheduled_plan(_x1206, _x1207, _x1208) {\n    return _ref354.apply(this, arguments);\n  };\n}();\nexport var all_scheduled_plans = function () {\n  var _ref355 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/scheduled_plans', {\n      user_id: request.user_id,\n      fields: request.fields,\n      all_users: request.all_users\n    }, null, options);\n  });\n  return function all_scheduled_plans(_x1209, _x1210, _x1211) {\n    return _ref355.apply(this, arguments);\n  };\n}();\nexport var create_scheduled_plan = function () {\n  var _ref356 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/scheduled_plans', null, body, options);\n  });\n  return function create_scheduled_plan(_x1212, _x1213, _x1214) {\n    return _ref356.apply(this, arguments);\n  };\n}();\nexport var scheduled_plan_run_once = function () {\n  var _ref357 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/scheduled_plans/run_once', null, body, options);\n  });\n  return function scheduled_plan_run_once(_x1215, _x1216, _x1217) {\n    return _ref357.apply(this, arguments);\n  };\n}();\nexport var scheduled_plans_for_look = function () {\n  var _ref358 = _asyncToGenerator(function* (sdk, request, options) {\n    request.look_id = encodeParam(request.look_id);\n    return sdk.get(\"/scheduled_plans/look/\".concat(request.look_id), {\n      user_id: request.user_id,\n      fields: request.fields,\n      all_users: request.all_users\n    }, null, options);\n  });\n  return function scheduled_plans_for_look(_x1218, _x1219, _x1220) {\n    return _ref358.apply(this, arguments);\n  };\n}();\nexport var scheduled_plans_for_dashboard = function () {\n  var _ref359 = _asyncToGenerator(function* (sdk, request, options) {\n    request.dashboard_id = encodeParam(request.dashboard_id);\n    return sdk.get(\"/scheduled_plans/dashboard/\".concat(request.dashboard_id), {\n      user_id: request.user_id,\n      all_users: request.all_users,\n      fields: request.fields\n    }, null, options);\n  });\n  return function scheduled_plans_for_dashboard(_x1221, _x1222, _x1223) {\n    return _ref359.apply(this, arguments);\n  };\n}();\nexport var scheduled_plans_for_lookml_dashboard = function () {\n  var _ref360 = _asyncToGenerator(function* (sdk, request, options) {\n    request.lookml_dashboard_id = encodeParam(request.lookml_dashboard_id);\n    return sdk.get(\"/scheduled_plans/lookml_dashboard/\".concat(request.lookml_dashboard_id), {\n      user_id: request.user_id,\n      fields: request.fields,\n      all_users: request.all_users\n    }, null, options);\n  });\n  return function scheduled_plans_for_lookml_dashboard(_x1224, _x1225, _x1226) {\n    return _ref360.apply(this, arguments);\n  };\n}();\nexport var scheduled_plan_run_once_by_id = function () {\n  var _ref361 = _asyncToGenerator(function* (sdk, scheduled_plan_id, body, options) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id);\n    return sdk.post(\"/scheduled_plans/\".concat(scheduled_plan_id, \"/run_once\"), null, body, options);\n  });\n  return function scheduled_plan_run_once_by_id(_x1227, _x1228, _x1229, _x1230) {\n    return _ref361.apply(this, arguments);\n  };\n}();\nexport var session = function () {\n  var _ref362 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/session', null, null, options);\n  });\n  return function session(_x1231, _x1232) {\n    return _ref362.apply(this, arguments);\n  };\n}();\nexport var update_session = function () {\n  var _ref363 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.patch('/session', null, body, options);\n  });\n  return function update_session(_x1233, _x1234, _x1235) {\n    return _ref363.apply(this, arguments);\n  };\n}();\nexport var all_themes = function () {\n  var _ref364 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/themes', {\n      fields\n    }, null, options);\n  });\n  return function all_themes(_x1236, _x1237, _x1238) {\n    return _ref364.apply(this, arguments);\n  };\n}();\nexport var create_theme = function () {\n  var _ref365 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/themes', null, body, options);\n  });\n  return function create_theme(_x1239, _x1240, _x1241) {\n    return _ref365.apply(this, arguments);\n  };\n}();\nexport var search_themes = function () {\n  var _ref366 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/themes/search', {\n      id: request.id,\n      name: request.name,\n      begin_at: request.begin_at,\n      end_at: request.end_at,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      fields: request.fields,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_themes(_x1242, _x1243, _x1244) {\n    return _ref366.apply(this, arguments);\n  };\n}();\nexport var default_theme = function () {\n  var _ref367 = _asyncToGenerator(function* (sdk, ts, options) {\n    return sdk.get('/themes/default', {\n      ts\n    }, null, options);\n  });\n  return function default_theme(_x1245, _x1246, _x1247) {\n    return _ref367.apply(this, arguments);\n  };\n}();\nexport var set_default_theme = function () {\n  var _ref368 = _asyncToGenerator(function* (sdk, name, options) {\n    return sdk.put('/themes/default', {\n      name\n    }, null, options);\n  });\n  return function set_default_theme(_x1248, _x1249, _x1250) {\n    return _ref368.apply(this, arguments);\n  };\n}();\nexport var active_themes = function () {\n  var _ref369 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/themes/active', {\n      name: request.name,\n      ts: request.ts,\n      fields: request.fields\n    }, null, options);\n  });\n  return function active_themes(_x1251, _x1252, _x1253) {\n    return _ref369.apply(this, arguments);\n  };\n}();\nexport var theme_or_default = function () {\n  var _ref370 = _asyncToGenerator(function* (sdk, name, ts, options) {\n    return sdk.get('/themes/theme_or_default', {\n      name,\n      ts\n    }, null, options);\n  });\n  return function theme_or_default(_x1254, _x1255, _x1256, _x1257) {\n    return _ref370.apply(this, arguments);\n  };\n}();\nexport var validate_theme = function () {\n  var _ref371 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/themes/validate', null, body, options);\n  });\n  return function validate_theme(_x1258, _x1259, _x1260) {\n    return _ref371.apply(this, arguments);\n  };\n}();\nexport var theme = function () {\n  var _ref372 = _asyncToGenerator(function* (sdk, theme_id, fields, options) {\n    theme_id = encodeParam(theme_id);\n    return sdk.get(\"/themes/\".concat(theme_id), {\n      fields\n    }, null, options);\n  });\n  return function theme(_x1261, _x1262, _x1263, _x1264) {\n    return _ref372.apply(this, arguments);\n  };\n}();\nexport var update_theme = function () {\n  var _ref373 = _asyncToGenerator(function* (sdk, theme_id, body, options) {\n    theme_id = encodeParam(theme_id);\n    return sdk.patch(\"/themes/\".concat(theme_id), null, body, options);\n  });\n  return function update_theme(_x1265, _x1266, _x1267, _x1268) {\n    return _ref373.apply(this, arguments);\n  };\n}();\nexport var delete_theme = function () {\n  var _ref374 = _asyncToGenerator(function* (sdk, theme_id, options) {\n    theme_id = encodeParam(theme_id);\n    return sdk.delete(\"/themes/\".concat(theme_id), null, null, options);\n  });\n  return function delete_theme(_x1269, _x1270, _x1271) {\n    return _ref374.apply(this, arguments);\n  };\n}();\nexport var search_credentials_email = function () {\n  var _ref375 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/credentials_email/search', {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      email: request.email,\n      emails: request.emails,\n      filter_or: request.filter_or\n    }, null, options);\n  });\n  return function search_credentials_email(_x1272, _x1273, _x1274) {\n    return _ref375.apply(this, arguments);\n  };\n}();\nexport var me = function () {\n  var _ref376 = _asyncToGenerator(function* (sdk, fields, options) {\n    return sdk.get('/user', {\n      fields\n    }, null, options);\n  });\n  return function me(_x1275, _x1276, _x1277) {\n    return _ref376.apply(this, arguments);\n  };\n}();\nexport var all_users = function () {\n  var _ref377 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/users', {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      ids: request.ids\n    }, null, options);\n  });\n  return function all_users(_x1278, _x1279, _x1280) {\n    return _ref377.apply(this, arguments);\n  };\n}();\nexport var create_user = function () {\n  var _ref378 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/users', {\n      fields\n    }, body, options);\n  });\n  return function create_user(_x1281, _x1282, _x1283, _x1284) {\n    return _ref378.apply(this, arguments);\n  };\n}();\nexport var search_users = function () {\n  var _ref379 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/users/search', {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      first_name: request.first_name,\n      last_name: request.last_name,\n      verified_looker_employee: request.verified_looker_employee,\n      embed_user: request.embed_user,\n      email: request.email,\n      is_disabled: request.is_disabled,\n      filter_or: request.filter_or,\n      content_metadata_id: request.content_metadata_id,\n      group_id: request.group_id\n    }, null, options);\n  });\n  return function search_users(_x1285, _x1286, _x1287) {\n    return _ref379.apply(this, arguments);\n  };\n}();\nexport var search_users_names = function () {\n  var _ref380 = _asyncToGenerator(function* (sdk, request, options) {\n    request.pattern = encodeParam(request.pattern);\n    return sdk.get(\"/users/search/names/\".concat(request.pattern), {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      first_name: request.first_name,\n      last_name: request.last_name,\n      verified_looker_employee: request.verified_looker_employee,\n      email: request.email,\n      is_disabled: request.is_disabled\n    }, null, options);\n  });\n  return function search_users_names(_x1288, _x1289, _x1290) {\n    return _ref380.apply(this, arguments);\n  };\n}();\nexport var user = function () {\n  var _ref381 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id), {\n      fields\n    }, null, options);\n  });\n  return function user(_x1291, _x1292, _x1293, _x1294) {\n    return _ref381.apply(this, arguments);\n  };\n}();\nexport var update_user = function () {\n  var _ref382 = _asyncToGenerator(function* (sdk, user_id, body, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.patch(\"/users/\".concat(user_id), {\n      fields\n    }, body, options);\n  });\n  return function update_user(_x1295, _x1296, _x1297, _x1298, _x1299) {\n    return _ref382.apply(this, arguments);\n  };\n}();\nexport var delete_user = function () {\n  var _ref383 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id), null, null, options);\n  });\n  return function delete_user(_x1300, _x1301, _x1302) {\n    return _ref383.apply(this, arguments);\n  };\n}();\nexport var user_for_credential = function () {\n  var _ref384 = _asyncToGenerator(function* (sdk, credential_type, credential_id, fields, options) {\n    credential_type = encodeParam(credential_type);\n    credential_id = encodeParam(credential_id);\n    return sdk.get(\"/users/credential/\".concat(credential_type, \"/\").concat(credential_id), {\n      fields\n    }, null, options);\n  });\n  return function user_for_credential(_x1303, _x1304, _x1305, _x1306, _x1307) {\n    return _ref384.apply(this, arguments);\n  };\n}();\nexport var user_credentials_email = function () {\n  var _ref385 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_email\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_email(_x1308, _x1309, _x1310, _x1311) {\n    return _ref385.apply(this, arguments);\n  };\n}();\nexport var create_user_credentials_email = function () {\n  var _ref386 = _asyncToGenerator(function* (sdk, user_id, body, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/users/\".concat(user_id, \"/credentials_email\"), {\n      fields\n    }, body, options);\n  });\n  return function create_user_credentials_email(_x1312, _x1313, _x1314, _x1315, _x1316) {\n    return _ref386.apply(this, arguments);\n  };\n}();\nexport var update_user_credentials_email = function () {\n  var _ref387 = _asyncToGenerator(function* (sdk, user_id, body, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.patch(\"/users/\".concat(user_id, \"/credentials_email\"), {\n      fields\n    }, body, options);\n  });\n  return function update_user_credentials_email(_x1317, _x1318, _x1319, _x1320, _x1321) {\n    return _ref387.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_email = function () {\n  var _ref388 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_email\"), null, null, options);\n  });\n  return function delete_user_credentials_email(_x1322, _x1323, _x1324) {\n    return _ref388.apply(this, arguments);\n  };\n}();\nexport var user_credentials_totp = function () {\n  var _ref389 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_totp\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_totp(_x1325, _x1326, _x1327, _x1328) {\n    return _ref389.apply(this, arguments);\n  };\n}();\nexport var create_user_credentials_totp = function () {\n  var _ref390 = _asyncToGenerator(function* (sdk, user_id, body, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/users/\".concat(user_id, \"/credentials_totp\"), {\n      fields\n    }, body, options);\n  });\n  return function create_user_credentials_totp(_x1329, _x1330, _x1331, _x1332, _x1333) {\n    return _ref390.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_totp = function () {\n  var _ref391 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_totp\"), null, null, options);\n  });\n  return function delete_user_credentials_totp(_x1334, _x1335, _x1336) {\n    return _ref391.apply(this, arguments);\n  };\n}();\nexport var user_credentials_ldap = function () {\n  var _ref392 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_ldap\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_ldap(_x1337, _x1338, _x1339, _x1340) {\n    return _ref392.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_ldap = function () {\n  var _ref393 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_ldap\"), null, null, options);\n  });\n  return function delete_user_credentials_ldap(_x1341, _x1342, _x1343) {\n    return _ref393.apply(this, arguments);\n  };\n}();\nexport var user_credentials_google = function () {\n  var _ref394 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_google\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_google(_x1344, _x1345, _x1346, _x1347) {\n    return _ref394.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_google = function () {\n  var _ref395 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_google\"), null, null, options);\n  });\n  return function delete_user_credentials_google(_x1348, _x1349, _x1350) {\n    return _ref395.apply(this, arguments);\n  };\n}();\nexport var user_credentials_saml = function () {\n  var _ref396 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_saml\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_saml(_x1351, _x1352, _x1353, _x1354) {\n    return _ref396.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_saml = function () {\n  var _ref397 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_saml\"), null, null, options);\n  });\n  return function delete_user_credentials_saml(_x1355, _x1356, _x1357) {\n    return _ref397.apply(this, arguments);\n  };\n}();\nexport var user_credentials_oidc = function () {\n  var _ref398 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_oidc\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_oidc(_x1358, _x1359, _x1360, _x1361) {\n    return _ref398.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_oidc = function () {\n  var _ref399 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_oidc\"), null, null, options);\n  });\n  return function delete_user_credentials_oidc(_x1362, _x1363, _x1364) {\n    return _ref399.apply(this, arguments);\n  };\n}();\nexport var user_credentials_api3 = function () {\n  var _ref400 = _asyncToGenerator(function* (sdk, user_id, credentials_api3_id, fields, options) {\n    user_id = encodeParam(user_id);\n    credentials_api3_id = encodeParam(credentials_api3_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_api3/\").concat(credentials_api3_id), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_api3(_x1365, _x1366, _x1367, _x1368, _x1369) {\n    return _ref400.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_api3 = function () {\n  var _ref401 = _asyncToGenerator(function* (sdk, user_id, credentials_api3_id, options) {\n    user_id = encodeParam(user_id);\n    credentials_api3_id = encodeParam(credentials_api3_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_api3/\").concat(credentials_api3_id), null, null, options);\n  });\n  return function delete_user_credentials_api3(_x1370, _x1371, _x1372, _x1373) {\n    return _ref401.apply(this, arguments);\n  };\n}();\nexport var all_user_credentials_api3s = function () {\n  var _ref402 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_api3\"), {\n      fields\n    }, null, options);\n  });\n  return function all_user_credentials_api3s(_x1374, _x1375, _x1376, _x1377) {\n    return _ref402.apply(this, arguments);\n  };\n}();\nexport var create_user_credentials_api3 = function () {\n  var _ref403 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/users/\".concat(user_id, \"/credentials_api3\"), {\n      fields\n    }, null, options);\n  });\n  return function create_user_credentials_api3(_x1378, _x1379, _x1380, _x1381) {\n    return _ref403.apply(this, arguments);\n  };\n}();\nexport var user_credentials_embed = function () {\n  var _ref404 = _asyncToGenerator(function* (sdk, user_id, credentials_embed_id, fields, options) {\n    user_id = encodeParam(user_id);\n    credentials_embed_id = encodeParam(credentials_embed_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_embed/\").concat(credentials_embed_id), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_embed(_x1382, _x1383, _x1384, _x1385, _x1386) {\n    return _ref404.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_embed = function () {\n  var _ref405 = _asyncToGenerator(function* (sdk, user_id, credentials_embed_id, options) {\n    user_id = encodeParam(user_id);\n    credentials_embed_id = encodeParam(credentials_embed_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_embed/\").concat(credentials_embed_id), null, null, options);\n  });\n  return function delete_user_credentials_embed(_x1387, _x1388, _x1389, _x1390) {\n    return _ref405.apply(this, arguments);\n  };\n}();\nexport var all_user_credentials_embeds = function () {\n  var _ref406 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_embed\"), {\n      fields\n    }, null, options);\n  });\n  return function all_user_credentials_embeds(_x1391, _x1392, _x1393, _x1394) {\n    return _ref406.apply(this, arguments);\n  };\n}();\nexport var user_credentials_looker_openid = function () {\n  var _ref407 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/credentials_looker_openid\"), {\n      fields\n    }, null, options);\n  });\n  return function user_credentials_looker_openid(_x1395, _x1396, _x1397, _x1398) {\n    return _ref407.apply(this, arguments);\n  };\n}();\nexport var delete_user_credentials_looker_openid = function () {\n  var _ref408 = _asyncToGenerator(function* (sdk, user_id, options) {\n    user_id = encodeParam(user_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/credentials_looker_openid\"), null, null, options);\n  });\n  return function delete_user_credentials_looker_openid(_x1399, _x1400, _x1401) {\n    return _ref408.apply(this, arguments);\n  };\n}();\nexport var user_session = function () {\n  var _ref409 = _asyncToGenerator(function* (sdk, user_id, session_id, fields, options) {\n    user_id = encodeParam(user_id);\n    session_id = encodeParam(session_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/sessions/\").concat(session_id), {\n      fields\n    }, null, options);\n  });\n  return function user_session(_x1402, _x1403, _x1404, _x1405, _x1406) {\n    return _ref409.apply(this, arguments);\n  };\n}();\nexport var delete_user_session = function () {\n  var _ref410 = _asyncToGenerator(function* (sdk, user_id, session_id, options) {\n    user_id = encodeParam(user_id);\n    session_id = encodeParam(session_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/sessions/\").concat(session_id), null, null, options);\n  });\n  return function delete_user_session(_x1407, _x1408, _x1409, _x1410) {\n    return _ref410.apply(this, arguments);\n  };\n}();\nexport var all_user_sessions = function () {\n  var _ref411 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.get(\"/users/\".concat(user_id, \"/sessions\"), {\n      fields\n    }, null, options);\n  });\n  return function all_user_sessions(_x1411, _x1412, _x1413, _x1414) {\n    return _ref411.apply(this, arguments);\n  };\n}();\nexport var create_user_credentials_email_password_reset = function () {\n  var _ref412 = _asyncToGenerator(function* (sdk, request, options) {\n    request.user_id = encodeParam(request.user_id);\n    return sdk.post(\"/users/\".concat(request.user_id, \"/credentials_email/password_reset\"), {\n      expires: request.expires,\n      fields: request.fields\n    }, null, options);\n  });\n  return function create_user_credentials_email_password_reset(_x1415, _x1416, _x1417) {\n    return _ref412.apply(this, arguments);\n  };\n}();\nexport var user_roles = function () {\n  var _ref413 = _asyncToGenerator(function* (sdk, request, options) {\n    request.user_id = encodeParam(request.user_id);\n    return sdk.get(\"/users/\".concat(request.user_id, \"/roles\"), {\n      fields: request.fields,\n      direct_association_only: request.direct_association_only\n    }, null, options);\n  });\n  return function user_roles(_x1418, _x1419, _x1420) {\n    return _ref413.apply(this, arguments);\n  };\n}();\nexport var set_user_roles = function () {\n  var _ref414 = _asyncToGenerator(function* (sdk, user_id, body, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.put(\"/users/\".concat(user_id, \"/roles\"), {\n      fields\n    }, body, options);\n  });\n  return function set_user_roles(_x1421, _x1422, _x1423, _x1424, _x1425) {\n    return _ref414.apply(this, arguments);\n  };\n}();\nexport var user_attribute_user_values = function () {\n  var _ref415 = _asyncToGenerator(function* (sdk, request, options) {\n    request.user_id = encodeParam(request.user_id);\n    return sdk.get(\"/users/\".concat(request.user_id, \"/attribute_values\"), {\n      fields: request.fields,\n      user_attribute_ids: request.user_attribute_ids,\n      all_values: request.all_values,\n      include_unset: request.include_unset\n    }, null, options);\n  });\n  return function user_attribute_user_values(_x1426, _x1427, _x1428) {\n    return _ref415.apply(this, arguments);\n  };\n}();\nexport var set_user_attribute_user_value = function () {\n  var _ref416 = _asyncToGenerator(function* (sdk, user_id, user_attribute_id, body, options) {\n    user_id = encodeParam(user_id);\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.patch(\"/users/\".concat(user_id, \"/attribute_values/\").concat(user_attribute_id), null, body, options);\n  });\n  return function set_user_attribute_user_value(_x1429, _x1430, _x1431, _x1432, _x1433) {\n    return _ref416.apply(this, arguments);\n  };\n}();\nexport var delete_user_attribute_user_value = function () {\n  var _ref417 = _asyncToGenerator(function* (sdk, user_id, user_attribute_id, options) {\n    user_id = encodeParam(user_id);\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.delete(\"/users/\".concat(user_id, \"/attribute_values/\").concat(user_attribute_id), null, null, options);\n  });\n  return function delete_user_attribute_user_value(_x1434, _x1435, _x1436, _x1437) {\n    return _ref417.apply(this, arguments);\n  };\n}();\nexport var send_user_credentials_email_password_reset = function () {\n  var _ref418 = _asyncToGenerator(function* (sdk, user_id, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/users/\".concat(user_id, \"/credentials_email/send_password_reset\"), {\n      fields\n    }, null, options);\n  });\n  return function send_user_credentials_email_password_reset(_x1438, _x1439, _x1440, _x1441) {\n    return _ref418.apply(this, arguments);\n  };\n}();\nexport var wipeout_user_emails = function () {\n  var _ref419 = _asyncToGenerator(function* (sdk, user_id, body, fields, options) {\n    user_id = encodeParam(user_id);\n    return sdk.post(\"/users/\".concat(user_id, \"/update_emails\"), {\n      fields\n    }, body, options);\n  });\n  return function wipeout_user_emails(_x1442, _x1443, _x1444, _x1445, _x1446) {\n    return _ref419.apply(this, arguments);\n  };\n}();\nexport var create_embed_user = function () {\n  var _ref420 = _asyncToGenerator(function* (sdk, body, options) {\n    return sdk.post('/users/embed_user', null, body, options);\n  });\n  return function create_embed_user(_x1447, _x1448, _x1449) {\n    return _ref420.apply(this, arguments);\n  };\n}();\nexport var all_user_attributes = function () {\n  var _ref421 = _asyncToGenerator(function* (sdk, request, options) {\n    return sdk.get('/user_attributes', {\n      fields: request.fields,\n      sorts: request.sorts\n    }, null, options);\n  });\n  return function all_user_attributes(_x1450, _x1451, _x1452) {\n    return _ref421.apply(this, arguments);\n  };\n}();\nexport var create_user_attribute = function () {\n  var _ref422 = _asyncToGenerator(function* (sdk, body, fields, options) {\n    return sdk.post('/user_attributes', {\n      fields\n    }, body, options);\n  });\n  return function create_user_attribute(_x1453, _x1454, _x1455, _x1456) {\n    return _ref422.apply(this, arguments);\n  };\n}();\nexport var user_attribute = function () {\n  var _ref423 = _asyncToGenerator(function* (sdk, user_attribute_id, fields, options) {\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.get(\"/user_attributes/\".concat(user_attribute_id), {\n      fields\n    }, null, options);\n  });\n  return function user_attribute(_x1457, _x1458, _x1459, _x1460) {\n    return _ref423.apply(this, arguments);\n  };\n}();\nexport var update_user_attribute = function () {\n  var _ref424 = _asyncToGenerator(function* (sdk, user_attribute_id, body, fields, options) {\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.patch(\"/user_attributes/\".concat(user_attribute_id), {\n      fields\n    }, body, options);\n  });\n  return function update_user_attribute(_x1461, _x1462, _x1463, _x1464, _x1465) {\n    return _ref424.apply(this, arguments);\n  };\n}();\nexport var delete_user_attribute = function () {\n  var _ref425 = _asyncToGenerator(function* (sdk, user_attribute_id, options) {\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.delete(\"/user_attributes/\".concat(user_attribute_id), null, null, options);\n  });\n  return function delete_user_attribute(_x1466, _x1467, _x1468) {\n    return _ref425.apply(this, arguments);\n  };\n}();\nexport var all_user_attribute_group_values = function () {\n  var _ref426 = _asyncToGenerator(function* (sdk, user_attribute_id, fields, options) {\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.get(\"/user_attributes/\".concat(user_attribute_id, \"/group_values\"), {\n      fields\n    }, null, options);\n  });\n  return function all_user_attribute_group_values(_x1469, _x1470, _x1471, _x1472) {\n    return _ref426.apply(this, arguments);\n  };\n}();\nexport var set_user_attribute_group_values = function () {\n  var _ref427 = _asyncToGenerator(function* (sdk, user_attribute_id, body, options) {\n    user_attribute_id = encodeParam(user_attribute_id);\n    return sdk.post(\"/user_attributes/\".concat(user_attribute_id, \"/group_values\"), null, body, options);\n  });\n  return function set_user_attribute_group_values(_x1473, _x1474, _x1475, _x1476) {\n    return _ref427.apply(this, arguments);\n  };\n}();\nexport var all_workspaces = function () {\n  var _ref428 = _asyncToGenerator(function* (sdk, options) {\n    return sdk.get('/workspaces', null, null, options);\n  });\n  return function all_workspaces(_x1477, _x1478) {\n    return _ref428.apply(this, arguments);\n  };\n}();\nexport var workspace = function () {\n  var _ref429 = _asyncToGenerator(function* (sdk, workspace_id, options) {\n    workspace_id = encodeParam(workspace_id);\n    return sdk.get(\"/workspaces/\".concat(workspace_id), null, null, options);\n  });\n  return function workspace(_x1479, _x1480, _x1481) {\n    return _ref429.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["encodeParam","functionalSdk","sdkVersion","functionalSdk40","authSession","follow_alert","_ref","_asyncToGenerator","sdk","alert_id","options","post","concat","_x","_x2","_x3","apply","arguments","unfollow_alert","_ref2","delete","_x4","_x5","_x6","search_alerts","_ref3","request","get","limit","offset","group_by","fields","disabled","frequency","condition_met","last_run_start","last_run_end","all_owners","_x7","_x8","_x9","get_alert","_ref4","_x10","_x11","_x12","update_alert","_ref5","body","put","_x13","_x14","_x15","_x16","update_alert_field","_ref6","patch","_x17","_x18","_x19","_x20","delete_alert","_ref7","_x21","_x22","_x23","create_alert","_ref8","_x24","_x25","_x26","enqueue_alert","_ref9","force","_x27","_x28","_x29","_x30","alert_notifications","_ref10","_x31","_x32","_x33","read_alert_notification","_ref11","alert_notification_id","_x34","_x35","_x36","login","_ref12","client_id","client_secret","_x37","_x38","_x39","login_user","_ref13","user_id","associative","_x40","_x41","_x42","_x43","logout","_ref14","_x44","_x45","artifact_usage","_ref15","_x46","_x47","_x48","artifact_namespaces","_ref16","_x49","_x50","_x51","artifact_value","_ref17","namespace","key","_x52","_x53","_x54","_x55","purge_artifacts","_ref18","_x56","_x57","_x58","search_artifacts","_ref19","user_ids","min_size","max_size","_x59","_x60","_x61","artifact","_ref20","_x62","_x63","_x64","delete_artifact","_ref21","_x65","_x66","_x67","_x68","update_artifacts","_ref22","_x69","_x70","_x71","_x72","_x73","create_embed_secret","_ref23","_x74","_x75","_x76","delete_embed_secret","_ref24","embed_secret_id","_x77","_x78","_x79","create_sso_embed_url","_ref25","_x80","_x81","_x82","create_embed_url_as_me","_ref26","_x83","_x84","_x85","acquire_embed_cookieless_session","_ref27","_x86","_x87","_x88","delete_embed_cookieless_session","_ref28","session_reference_token","_x89","_x90","_x91","generate_tokens_for_cookieless_session","_ref29","_x92","_x93","_x94","ldap_config","_ref30","_x95","_x96","update_ldap_config","_ref31","_x97","_x98","_x99","test_ldap_config_connection","_ref32","_x100","_x101","_x102","test_ldap_config_auth","_ref33","_x103","_x104","_x105","test_ldap_config_user_info","_ref34","_x106","_x107","_x108","test_ldap_config_user_auth","_ref35","_x109","_x110","_x111","register_mobile_device","_ref36","_x112","_x113","_x114","update_mobile_device_registration","_ref37","device_id","_x115","_x116","_x117","deregister_mobile_device","_ref38","_x118","_x119","_x120","all_oauth_client_apps","_ref39","_x121","_x122","_x123","oauth_client_app","_ref40","client_guid","_x124","_x125","_x126","_x127","register_oauth_client_app","_ref41","_x128","_x129","_x130","_x131","_x132","update_oauth_client_app","_ref42","_x133","_x134","_x135","_x136","_x137","delete_oauth_client_app","_ref43","_x138","_x139","_x140","invalidate_tokens","_ref44","_x141","_x142","_x143","activate_app_user","_ref45","_x144","_x145","_x146","_x147","_x148","deactivate_app_user","_ref46","_x149","_x150","_x151","_x152","_x153","oidc_config","_ref47","_x154","_x155","update_oidc_config","_ref48","_x156","_x157","_x158","oidc_test_config","_ref49","test_slug","_x159","_x160","_x161","delete_oidc_test_config","_ref50","_x162","_x163","_x164","create_oidc_test_config","_ref51","_x165","_x166","_x167","password_config","_ref52","_x168","_x169","update_password_config","_ref53","_x170","_x171","_x172","force_password_reset_at_next_login_for_all_users","_ref54","_x173","_x174","saml_config","_ref55","_x175","_x176","update_saml_config","_ref56","_x177","_x178","_x179","saml_test_config","_ref57","_x180","_x181","_x182","delete_saml_test_config","_ref58","_x183","_x184","_x185","create_saml_test_config","_ref59","_x186","_x187","_x188","parse_saml_idp_metadata","_ref60","_x189","_x190","_x191","fetch_and_parse_saml_idp_metadata","_ref61","_x192","_x193","_x194","session_config","_ref62","_x195","_x196","update_session_config","_ref63","_x197","_x198","_x199","get_support_access_allowlist_entries","_ref64","_x200","_x201","_x202","add_support_access_allowlist_entries","_ref65","_x203","_x204","_x205","delete_support_access_allowlist_entry","_ref66","entry_id","_x206","_x207","_x208","enable_support_access","_ref67","_x209","_x210","_x211","disable_support_access","_ref68","_x212","_x213","support_access_status","_ref69","_x214","_x215","all_user_login_lockouts","_ref70","_x216","_x217","_x218","search_user_login_lockouts","_ref71","page","per_page","sorts","auth_type","full_name","email","remote_id","filter_or","_x219","_x220","_x221","delete_user_login_lockout","_ref72","_x222","_x223","_x224","all_boards","_ref73","_x225","_x226","_x227","create_board","_ref74","_x228","_x229","_x230","_x231","search_boards","_ref75","title","created_at","first_name","last_name","favorited","creator_id","permission","_x232","_x233","_x234","board","_ref76","board_id","_x235","_x236","_x237","_x238","update_board","_ref77","_x239","_x240","_x241","_x242","_x243","delete_board","_ref78","_x244","_x245","_x246","all_board_items","_ref79","board_section_id","_x247","_x248","_x249","create_board_item","_ref80","_x250","_x251","_x252","_x253","board_item","_ref81","board_item_id","_x254","_x255","_x256","_x257","update_board_item","_ref82","_x258","_x259","_x260","_x261","_x262","delete_board_item","_ref83","_x263","_x264","_x265","all_board_sections","_ref84","_x266","_x267","_x268","create_board_section","_ref85","_x269","_x270","_x271","_x272","board_section","_ref86","_x273","_x274","_x275","_x276","update_board_section","_ref87","_x277","_x278","_x279","_x280","_x281","delete_board_section","_ref88","_x282","_x283","_x284","all_color_collections","_ref89","_x285","_x286","_x287","create_color_collection","_ref90","_x288","_x289","_x290","color_collections_custom","_ref91","_x291","_x292","_x293","color_collections_standard","_ref92","_x294","_x295","_x296","default_color_collection","_ref93","_x297","_x298","set_default_color_collection","_ref94","collection_id","_x299","_x300","_x301","color_collection","_ref95","_x302","_x303","_x304","_x305","update_color_collection","_ref96","_x306","_x307","_x308","_x309","delete_color_collection","_ref97","_x310","_x311","_x312","cloud_storage_configuration","_ref98","_x313","_x314","update_cloud_storage_configuration","_ref99","_x315","_x316","_x317","configuration_force_refresh","_ref100","_x318","_x319","custom_welcome_email","_ref101","_x320","_x321","update_custom_welcome_email","_ref102","send_test_welcome_email","_x322","_x323","_x324","_x325","update_custom_welcome_email_test","_ref103","_x326","_x327","_x328","digest_emails_enabled","_ref104","_x329","_x330","update_digest_emails_enabled","_ref105","_x331","_x332","_x333","create_digest_email_send","_ref106","_x334","_x335","public_egress_ip_addresses","_ref107","_x336","_x337","internal_help_resources_content","_ref108","_x338","_x339","update_internal_help_resources_content","_ref109","_x340","_x341","_x342","internal_help_resources","_ref110","_x343","_x344","update_internal_help_resources","_ref111","_x345","_x346","_x347","all_legacy_features","_ref112","_x348","_x349","legacy_feature","_ref113","legacy_feature_id","_x350","_x351","_x352","update_legacy_feature","_ref114","_x353","_x354","_x355","_x356","all_locales","_ref115","_x357","_x358","mobile_settings","_ref116","_x359","_x360","get_setting","_ref117","_x361","_x362","_x363","set_setting","_ref118","_x364","_x365","_x366","_x367","set_smtp_settings","_ref119","_x368","_x369","_x370","smtp_status","_ref120","_x371","_x372","_x373","all_timezones","_ref121","_x374","_x375","versions","_ref122","_x376","_x377","_x378","api_spec","_ref123","api_version","specification","_x379","_x380","_x381","_x382","whitelabel_configuration","_ref124","_x383","_x384","_x385","update_whitelabel_configuration","_ref125","_x386","_x387","_x388","all_connections","_ref126","_x389","_x390","_x391","create_connection","_ref127","_x392","_x393","_x394","connection","_ref128","connection_name","_x395","_x396","_x397","_x398","update_connection","_ref129","_x399","_x400","_x401","_x402","delete_connection","_ref130","_x403","_x404","_x405","delete_connection_override","_ref131","override_context","_x406","_x407","_x408","_x409","test_connection","_ref132","tests","_x410","_x411","_x412","_x413","test_connection_config","_ref133","_x414","_x415","_x416","_x417","all_dialect_infos","_ref134","_x418","_x419","_x420","all_external_oauth_applications","_ref135","name","_x421","_x422","_x423","create_external_oauth_application","_ref136","_x424","_x425","_x426","create_oauth_application_user_state","_ref137","_x427","_x428","_x429","all_ssh_servers","_ref138","_x430","_x431","_x432","create_ssh_server","_ref139","_x433","_x434","_x435","ssh_server","_ref140","ssh_server_id","_x436","_x437","_x438","update_ssh_server","_ref141","_x439","_x440","_x441","_x442","delete_ssh_server","_ref142","_x443","_x444","_x445","test_ssh_server","_ref143","_x446","_x447","_x448","all_ssh_tunnels","_ref144","_x449","_x450","_x451","create_ssh_tunnel","_ref145","_x452","_x453","_x454","ssh_tunnel","_ref146","ssh_tunnel_id","_x455","_x456","_x457","update_ssh_tunnel","_ref147","_x458","_x459","_x460","_x461","delete_ssh_tunnel","_ref148","_x462","_x463","_x464","test_ssh_tunnel","_ref149","_x465","_x466","_x467","ssh_public_key","_ref150","_x468","_x469","search_content_favorites","_ref151","id","content_metadata_id","dashboard_id","look_id","_x470","_x471","_x472","content_favorite","_ref152","content_favorite_id","_x473","_x474","_x475","_x476","delete_content_favorite","_ref153","_x477","_x478","_x479","create_content_favorite","_ref154","_x480","_x481","_x482","all_content_metadatas","_ref155","parent_id","_x483","_x484","_x485","_x486","content_metadata","_ref156","_x487","_x488","_x489","_x490","update_content_metadata","_ref157","_x491","_x492","_x493","_x494","all_content_metadata_accesses","_ref158","_x495","_x496","_x497","_x498","create_content_metadata_access","_ref159","send_boards_notification_email","_x499","_x500","_x501","_x502","update_content_metadata_access","_ref160","content_metadata_access_id","_x503","_x504","_x505","_x506","delete_content_metadata_access","_ref161","_x507","_x508","_x509","content_thumbnail","_ref162","type","resource_id","reload","format","width","height","_x510","_x511","_x512","content_validation","_ref163","_x513","_x514","_x515","search_content_views","_ref164","view_count","group_id","start_of_week_date","all_time","_x516","_x517","_x518","vector_thumbnail","_ref165","_x519","_x520","_x521","_x522","_x523","all_dashboards","_ref166","_x524","_x525","_x526","create_dashboard","_ref167","_x527","_x528","_x529","search_dashboards","_ref168","slug","description","folder_id","deleted","curate","last_viewed_at","_x530","_x531","_x532","import_lookml_dashboard","_ref169","lookml_dashboard_id","space_id","raw_locale","_x533","_x534","_x535","_x536","_x537","_x538","sync_lookml_dashboard","_ref170","_x539","_x540","_x541","_x542","_x543","dashboard","_ref171","_x544","_x545","_x546","_x547","update_dashboard","_ref172","_x548","_x549","_x550","_x551","delete_dashboard","_ref173","_x552","_x553","_x554","dashboard_aggregate_table_lookml","_ref174","_x555","_x556","_x557","dashboard_lookml","_ref175","_x558","_x559","_x560","move_dashboard","_ref176","_x561","_x562","_x563","_x564","import_dashboard_from_lookml","_ref177","_x565","_x566","_x567","create_dashboard_from_lookml","_ref178","_x568","_x569","_x570","copy_dashboard","_ref179","_x571","_x572","_x573","_x574","search_dashboard_elements","_ref180","_x575","_x576","_x577","dashboard_element","_ref181","dashboard_element_id","_x578","_x579","_x580","_x581","update_dashboard_element","_ref182","_x582","_x583","_x584","_x585","_x586","delete_dashboard_element","_ref183","_x587","_x588","_x589","dashboard_dashboard_elements","_ref184","_x590","_x591","_x592","_x593","create_dashboard_element","_ref185","apply_filters","_x594","_x595","_x596","dashboard_filter","_ref186","dashboard_filter_id","_x597","_x598","_x599","_x600","update_dashboard_filter","_ref187","_x601","_x602","_x603","_x604","_x605","delete_dashboard_filter","_ref188","_x606","_x607","_x608","dashboard_dashboard_filters","_ref189","_x609","_x610","_x611","_x612","create_dashboard_filter","_ref190","_x613","_x614","_x615","_x616","dashboard_layout_component","_ref191","dashboard_layout_component_id","_x617","_x618","_x619","_x620","update_dashboard_layout_component","_ref192","_x621","_x622","_x623","_x624","_x625","dashboard_layout_dashboard_layout_components","_ref193","dashboard_layout_id","_x626","_x627","_x628","_x629","dashboard_layout","_ref194","_x630","_x631","_x632","_x633","update_dashboard_layout","_ref195","_x634","_x635","_x636","_x637","_x638","delete_dashboard_layout","_ref196","_x639","_x640","_x641","dashboard_dashboard_layouts","_ref197","_x642","_x643","_x644","_x645","create_dashboard_layout","_ref198","_x646","_x647","_x648","_x649","perform_data_action","_ref199","_x650","_x651","_x652","fetch_remote_data_action_form","_ref200","_x653","_x654","_x655","all_datagroups","_ref201","_x656","_x657","datagroup","_ref202","datagroup_id","_x658","_x659","_x660","update_datagroup","_ref203","_x661","_x662","_x663","_x664","graph_derived_tables_for_model","_ref204","model","color","_x665","_x666","_x667","graph_derived_tables_for_view","_ref205","view","models","workspace","_x668","_x669","_x670","start_pdt_build","_ref206","model_name","view_name","force_rebuild","force_full_incremental","source","_x671","_x672","_x673","check_pdt_build","_ref207","materialization_id","_x674","_x675","_x676","stop_pdt_build","_ref208","_x677","_x678","_x679","_x680","search_folders","_ref209","is_shared_root","_x681","_x682","_x683","folder","_ref210","_x684","_x685","_x686","_x687","update_folder","_ref211","_x688","_x689","_x690","_x691","delete_folder","_ref212","_x692","_x693","_x694","all_folders","_ref213","_x695","_x696","_x697","create_folder","_ref214","_x698","_x699","_x700","folder_children","_ref215","_x701","_x702","_x703","folder_children_search","_ref216","_x704","_x705","_x706","folder_parent","_ref217","_x707","_x708","_x709","_x710","folder_ancestors","_ref218","_x711","_x712","_x713","_x714","folder_looks","_ref219","_x715","_x716","_x717","_x718","folder_dashboards","_ref220","_x719","_x720","_x721","_x722","all_groups","_ref221","ids","can_add_to_content_metadata","_x723","_x724","_x725","create_group","_ref222","_x726","_x727","_x728","_x729","search_groups","_ref223","external_group_id","externally_managed","externally_orphaned","_x730","_x731","_x732","search_groups_with_roles","_ref224","_x733","_x734","_x735","search_groups_with_hierarchy","_ref225","_x736","_x737","_x738","group","_ref226","_x739","_x740","_x741","_x742","update_group","_ref227","_x743","_x744","_x745","_x746","_x747","delete_group","_ref228","_x748","_x749","_x750","all_group_groups","_ref229","_x751","_x752","_x753","_x754","add_group_group","_ref230","_x755","_x756","_x757","_x758","all_group_users","_ref231","_x759","_x760","_x761","add_group_user","_ref232","_x762","_x763","_x764","_x765","delete_group_user","_ref233","_x766","_x767","_x768","_x769","delete_group_from_group","_ref234","deleting_group_id","_x770","_x771","_x772","_x773","update_user_attribute_group_value","_ref235","user_attribute_id","_x774","_x775","_x776","_x777","_x778","delete_user_attribute_group_value","_ref236","_x779","_x780","_x781","_x782","all_primary_homepage_sections","_ref237","_x783","_x784","_x785","all_integration_hubs","_ref238","_x786","_x787","_x788","create_integration_hub","_ref239","_x789","_x790","_x791","_x792","integration_hub","_ref240","integration_hub_id","_x793","_x794","_x795","_x796","update_integration_hub","_ref241","_x797","_x798","_x799","_x800","_x801","delete_integration_hub","_ref242","_x802","_x803","_x804","accept_integration_hub_legal_agreement","_ref243","_x805","_x806","_x807","all_integrations","_ref244","_x808","_x809","_x810","integration","_ref245","integration_id","_x811","_x812","_x813","_x814","update_integration","_ref246","_x815","_x816","_x817","_x818","_x819","fetch_integration_form","_ref247","_x820","_x821","_x822","_x823","test_integration","_ref248","_x824","_x825","_x826","all_looks","_ref249","_x827","_x828","_x829","create_look","_ref250","_x830","_x831","_x832","_x833","search_looks","_ref251","query_id","_x834","_x835","_x836","look","_ref252","_x837","_x838","_x839","_x840","update_look","_ref253","_x841","_x842","_x843","_x844","_x845","delete_look","_ref254","_x846","_x847","_x848","run_look","_ref255","result_format","apply_formatting","apply_vis","cache","image_width","image_height","generate_drill_links","force_production","cache_only","path_prefix","rebuild_pdts","server_table_calcs","_x849","_x850","_x851","copy_look","_ref256","_x852","_x853","_x854","_x855","move_look","_ref257","_x856","_x857","_x858","_x859","all_lookml_models","_ref258","_x860","_x861","_x862","create_lookml_model","_ref259","_x863","_x864","_x865","lookml_model","_ref260","lookml_model_name","_x866","_x867","_x868","_x869","update_lookml_model","_ref261","_x870","_x871","_x872","_x873","delete_lookml_model","_ref262","_x874","_x875","_x876","lookml_model_explore","_ref263","explore_name","_x877","_x878","_x879","_x880","_x881","model_fieldname_suggestions","_ref264","field_name","term","filters","_x882","_x883","_x884","get_model","_ref265","_x885","_x886","_x887","connection_databases","_ref266","_x888","_x889","_x890","connection_features","_ref267","_x891","_x892","_x893","_x894","connection_schemas","_ref268","database","_x895","_x896","_x897","connection_tables","_ref269","schema_name","table_filter","table_limit","_x898","_x899","_x900","connection_columns","_ref270","table_names","_x901","_x902","_x903","connection_search_columns","_ref271","column_name","_x904","_x905","_x906","connection_cost_estimate","_ref272","_x907","_x908","_x909","_x910","_x911","lock_all","_ref273","project_id","_x912","_x913","_x914","_x915","all_git_branches","_ref274","_x916","_x917","_x918","git_branch","_ref275","_x919","_x920","_x921","update_git_branch","_ref276","_x922","_x923","_x924","_x925","create_git_branch","_ref277","_x926","_x927","_x928","_x929","find_git_branch","_ref278","branch_name","_x930","_x931","_x932","_x933","delete_git_branch","_ref279","_x934","_x935","_x936","_x937","deploy_ref_to_production","_ref280","branch","ref","_x938","_x939","_x940","deploy_to_production","_ref281","_x941","_x942","_x943","reset_project_to_production","_ref282","_x944","_x945","_x946","reset_project_to_remote","_ref283","_x947","_x948","_x949","all_projects","_ref284","_x950","_x951","_x952","create_project","_ref285","_x953","_x954","_x955","project","_ref286","_x956","_x957","_x958","_x959","update_project","_ref287","_x960","_x961","_x962","_x963","_x964","manifest","_ref288","_x965","_x966","_x967","git_deploy_key","_ref289","_x968","_x969","_x970","create_git_deploy_key","_ref290","_x971","_x972","_x973","project_validation_results","_ref291","_x974","_x975","_x976","_x977","validate_project","_ref292","_x978","_x979","_x980","_x981","project_workspace","_ref293","_x982","_x983","_x984","_x985","all_project_files","_ref294","_x986","_x987","_x988","_x989","project_file","_ref295","file_id","_x990","_x991","_x992","_x993","_x994","all_git_connection_tests","_ref296","remote_url","_x995","_x996","_x997","_x998","run_git_connection_test","_ref297","test_id","use_production","_x999","_x1000","_x1001","all_lookml_tests","_ref298","_x1002","_x1003","_x1004","_x1005","run_lookml_test","_ref299","test","_x1006","_x1007","_x1008","tag_ref","_ref300","commit_sha","tag_name","tag_message","_x1009","_x1010","_x1011","update_repository_credential","_ref301","root_project_id","credential_id","_x1012","_x1013","_x1014","_x1015","_x1016","delete_repository_credential","_ref302","_x1017","_x1018","_x1019","_x1020","get_all_repository_credentials","_ref303","_x1021","_x1022","_x1023","create_query_task","_ref304","_x1024","_x1025","_x1026","query_task_multi_results","_ref305","query_task_ids","_x1027","_x1028","_x1029","query_task","_ref306","query_task_id","_x1030","_x1031","_x1032","_x1033","query_task_results","_ref307","_x1034","_x1035","_x1036","query","_ref308","_x1037","_x1038","_x1039","_x1040","query_for_slug","_ref309","_x1041","_x1042","_x1043","_x1044","create_query","_ref310","_x1045","_x1046","_x1047","_x1048","run_query","_ref311","_x1049","_x1050","_x1051","run_inline_query","_ref312","_x1052","_x1053","_x1054","run_url_encoded_query","_ref313","_x1055","_x1056","_x1057","_x1058","_x1059","merge_query","_ref314","merge_query_id","_x1060","_x1061","_x1062","_x1063","create_merge_query","_ref315","_x1064","_x1065","_x1066","_x1067","all_running_queries","_ref316","_x1068","_x1069","kill_query","_ref317","_x1070","_x1071","_x1072","sql_query","_ref318","_x1073","_x1074","_x1075","create_sql_query","_ref319","_x1076","_x1077","_x1078","run_sql_query","_ref320","download","_x1079","_x1080","_x1081","_x1082","_x1083","create_look_render_task","_ref321","_x1084","_x1085","_x1086","_x1087","_x1088","_x1089","_x1090","create_query_render_task","_ref322","_x1091","_x1092","_x1093","_x1094","_x1095","_x1096","_x1097","create_dashboard_render_task","_ref323","pdf_paper_size","pdf_landscape","long_tables","_x1098","_x1099","_x1100","render_task","_ref324","render_task_id","_x1101","_x1102","_x1103","_x1104","render_task_results","_ref325","_x1105","_x1106","_x1107","create_dashboard_element_render_task","_ref326","_x1108","_x1109","_x1110","_x1111","_x1112","_x1113","_x1114","search_model_sets","_ref327","all_access","built_in","_x1115","_x1116","_x1117","model_set","_ref328","model_set_id","_x1118","_x1119","_x1120","_x1121","update_model_set","_ref329","_x1122","_x1123","_x1124","_x1125","delete_model_set","_ref330","_x1126","_x1127","_x1128","all_model_sets","_ref331","_x1129","_x1130","_x1131","create_model_set","_ref332","_x1132","_x1133","_x1134","all_permissions","_ref333","_x1135","_x1136","search_permission_sets","_ref334","_x1137","_x1138","_x1139","permission_set","_ref335","permission_set_id","_x1140","_x1141","_x1142","_x1143","update_permission_set","_ref336","_x1144","_x1145","_x1146","_x1147","delete_permission_set","_ref337","_x1148","_x1149","_x1150","all_permission_sets","_ref338","_x1151","_x1152","_x1153","create_permission_set","_ref339","_x1154","_x1155","_x1156","all_roles","_ref340","_x1157","_x1158","_x1159","create_role","_ref341","_x1160","_x1161","_x1162","search_roles","_ref342","_x1163","_x1164","_x1165","search_roles_with_user_count","_ref343","_x1166","_x1167","_x1168","role","_ref344","role_id","_x1169","_x1170","_x1171","update_role","_ref345","_x1172","_x1173","_x1174","_x1175","delete_role","_ref346","_x1176","_x1177","_x1178","role_groups","_ref347","_x1179","_x1180","_x1181","_x1182","set_role_groups","_ref348","_x1183","_x1184","_x1185","_x1186","role_users","_ref349","direct_association_only","_x1187","_x1188","_x1189","set_role_users","_ref350","_x1190","_x1191","_x1192","_x1193","scheduled_plans_for_space","_ref351","_x1194","_x1195","_x1196","_x1197","scheduled_plan","_ref352","scheduled_plan_id","_x1198","_x1199","_x1200","_x1201","update_scheduled_plan","_ref353","_x1202","_x1203","_x1204","_x1205","delete_scheduled_plan","_ref354","_x1206","_x1207","_x1208","all_scheduled_plans","_ref355","all_users","_x1209","_x1210","_x1211","create_scheduled_plan","_ref356","_x1212","_x1213","_x1214","scheduled_plan_run_once","_ref357","_x1215","_x1216","_x1217","scheduled_plans_for_look","_ref358","_x1218","_x1219","_x1220","scheduled_plans_for_dashboard","_ref359","_x1221","_x1222","_x1223","scheduled_plans_for_lookml_dashboard","_ref360","_x1224","_x1225","_x1226","scheduled_plan_run_once_by_id","_ref361","_x1227","_x1228","_x1229","_x1230","session","_ref362","_x1231","_x1232","update_session","_ref363","_x1233","_x1234","_x1235","all_themes","_ref364","_x1236","_x1237","_x1238","create_theme","_ref365","_x1239","_x1240","_x1241","search_themes","_ref366","begin_at","end_at","_x1242","_x1243","_x1244","default_theme","_ref367","ts","_x1245","_x1246","_x1247","set_default_theme","_ref368","_x1248","_x1249","_x1250","active_themes","_ref369","_x1251","_x1252","_x1253","theme_or_default","_ref370","_x1254","_x1255","_x1256","_x1257","validate_theme","_ref371","_x1258","_x1259","_x1260","theme","_ref372","theme_id","_x1261","_x1262","_x1263","_x1264","update_theme","_ref373","_x1265","_x1266","_x1267","_x1268","delete_theme","_ref374","_x1269","_x1270","_x1271","search_credentials_email","_ref375","emails","_x1272","_x1273","_x1274","me","_ref376","_x1275","_x1276","_x1277","_ref377","_x1278","_x1279","_x1280","create_user","_ref378","_x1281","_x1282","_x1283","_x1284","search_users","_ref379","verified_looker_employee","embed_user","is_disabled","_x1285","_x1286","_x1287","search_users_names","_ref380","pattern","_x1288","_x1289","_x1290","user","_ref381","_x1291","_x1292","_x1293","_x1294","update_user","_ref382","_x1295","_x1296","_x1297","_x1298","_x1299","delete_user","_ref383","_x1300","_x1301","_x1302","user_for_credential","_ref384","credential_type","_x1303","_x1304","_x1305","_x1306","_x1307","user_credentials_email","_ref385","_x1308","_x1309","_x1310","_x1311","create_user_credentials_email","_ref386","_x1312","_x1313","_x1314","_x1315","_x1316","update_user_credentials_email","_ref387","_x1317","_x1318","_x1319","_x1320","_x1321","delete_user_credentials_email","_ref388","_x1322","_x1323","_x1324","user_credentials_totp","_ref389","_x1325","_x1326","_x1327","_x1328","create_user_credentials_totp","_ref390","_x1329","_x1330","_x1331","_x1332","_x1333","delete_user_credentials_totp","_ref391","_x1334","_x1335","_x1336","user_credentials_ldap","_ref392","_x1337","_x1338","_x1339","_x1340","delete_user_credentials_ldap","_ref393","_x1341","_x1342","_x1343","user_credentials_google","_ref394","_x1344","_x1345","_x1346","_x1347","delete_user_credentials_google","_ref395","_x1348","_x1349","_x1350","user_credentials_saml","_ref396","_x1351","_x1352","_x1353","_x1354","delete_user_credentials_saml","_ref397","_x1355","_x1356","_x1357","user_credentials_oidc","_ref398","_x1358","_x1359","_x1360","_x1361","delete_user_credentials_oidc","_ref399","_x1362","_x1363","_x1364","user_credentials_api3","_ref400","credentials_api3_id","_x1365","_x1366","_x1367","_x1368","_x1369","delete_user_credentials_api3","_ref401","_x1370","_x1371","_x1372","_x1373","all_user_credentials_api3s","_ref402","_x1374","_x1375","_x1376","_x1377","create_user_credentials_api3","_ref403","_x1378","_x1379","_x1380","_x1381","user_credentials_embed","_ref404","credentials_embed_id","_x1382","_x1383","_x1384","_x1385","_x1386","delete_user_credentials_embed","_ref405","_x1387","_x1388","_x1389","_x1390","all_user_credentials_embeds","_ref406","_x1391","_x1392","_x1393","_x1394","user_credentials_looker_openid","_ref407","_x1395","_x1396","_x1397","_x1398","delete_user_credentials_looker_openid","_ref408","_x1399","_x1400","_x1401","user_session","_ref409","session_id","_x1402","_x1403","_x1404","_x1405","_x1406","delete_user_session","_ref410","_x1407","_x1408","_x1409","_x1410","all_user_sessions","_ref411","_x1411","_x1412","_x1413","_x1414","create_user_credentials_email_password_reset","_ref412","expires","_x1415","_x1416","_x1417","user_roles","_ref413","_x1418","_x1419","_x1420","set_user_roles","_ref414","_x1421","_x1422","_x1423","_x1424","_x1425","user_attribute_user_values","_ref415","user_attribute_ids","all_values","include_unset","_x1426","_x1427","_x1428","set_user_attribute_user_value","_ref416","_x1429","_x1430","_x1431","_x1432","_x1433","delete_user_attribute_user_value","_ref417","_x1434","_x1435","_x1436","_x1437","send_user_credentials_email_password_reset","_ref418","_x1438","_x1439","_x1440","_x1441","wipeout_user_emails","_ref419","_x1442","_x1443","_x1444","_x1445","_x1446","create_embed_user","_ref420","_x1447","_x1448","_x1449","all_user_attributes","_ref421","_x1450","_x1451","_x1452","create_user_attribute","_ref422","_x1453","_x1454","_x1455","_x1456","user_attribute","_ref423","_x1457","_x1458","_x1459","_x1460","update_user_attribute","_ref424","_x1461","_x1462","_x1463","_x1464","_x1465","delete_user_attribute","_ref425","_x1466","_x1467","_x1468","all_user_attribute_group_values","_ref426","_x1469","_x1470","_x1471","_x1472","set_user_attribute_group_values","_ref427","_x1473","_x1474","_x1475","_x1476","all_workspaces","_ref428","_x1477","_x1478","_ref429","workspace_id","_x1479","_x1480","_x1481"],"sources":["C:\\Users\\ximo.cerdan\\AppData\\Local\\Google\\Cloud SDK\\mashup_iframe\\node_modules\\@looker\\sdk\\src\\4.0\\funcs.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n/**\n * 459 API methods\n */\n\nimport type {\n  DelimArray,\n  IDictionary,\n  IAPIMethods,\n  IAuthSession,\n  ITransportSettings,\n  SDKResponse,\n} from '@looker/sdk-rtl'\nimport { encodeParam, functionalSdk } from '@looker/sdk-rtl'\n\n/**\n * NOTE: Do not edit this file generated by Looker SDK Codegen for API 4.0\n *\n */\n\nimport { sdkVersion } from '../constants'\nimport type {\n  IAccessToken,\n  IAlert,\n  IAlertNotifications,\n  IAlertPatch,\n  IApiSession,\n  IApiVersion,\n  IArtifact,\n  IArtifactNamespace,\n  IArtifactUsage,\n  IBackupConfiguration,\n  IBoard,\n  IBoardItem,\n  IBoardSection,\n  IColorCollection,\n  IColumnSearch,\n  IConnectionFeatures,\n  IContentFavorite,\n  IContentMeta,\n  IContentMetaGroupUser,\n  IContentValidation,\n  IContentView,\n  ICostEstimate,\n  ICreateCostEstimate,\n  ICreateCredentialsApi3,\n  ICreateEmbedUserRequest,\n  ICreateFolder,\n  ICreateOAuthApplicationUserStateRequest,\n  ICreateOAuthApplicationUserStateResponse,\n  ICredentialsApi3,\n  ICredentialsEmail,\n  ICredentialsEmailSearch,\n  ICredentialsEmbed,\n  ICredentialsGoogle,\n  ICredentialsLDAP,\n  ICredentialsLookerOpenid,\n  ICredentialsOIDC,\n  ICredentialsSaml,\n  ICredentialsTotp,\n  ICustomWelcomeEmail,\n  IDashboard,\n  IDashboardAggregateTableLookml,\n  IDashboardBase,\n  IDashboardElement,\n  IDashboardFilter,\n  IDashboardLayout,\n  IDashboardLayoutComponent,\n  IDashboardLookml,\n  IDataActionForm,\n  IDataActionRequest,\n  IDataActionResponse,\n  IDatagroup,\n  IDBConnection,\n  IDBConnectionTestResult,\n  IDependencyGraph,\n  IDialectInfo,\n  IDigestEmails,\n  IDigestEmailSend,\n  IEgressIpAddresses,\n  IEmbedCookielessSessionAcquire,\n  IEmbedCookielessSessionAcquireResponse,\n  IEmbedCookielessSessionGenerateTokens,\n  IEmbedCookielessSessionGenerateTokensResponse,\n  IEmbedParams,\n  IEmbedSecret,\n  IEmbedSsoParams,\n  IEmbedUrlResponse,\n  IError,\n  IExternalOauthApplication,\n  IFolder,\n  IGitBranch,\n  IGitConnectionTest,\n  IGitConnectionTestResult,\n  IGroup,\n  IGroupHierarchy,\n  IGroupIdForGroupInclusion,\n  IGroupIdForGroupUserInclusion,\n  IGroupSearch,\n  IHomepageSection,\n  IIntegration,\n  IIntegrationHub,\n  IIntegrationTestResult,\n  IInternalHelpResources,\n  IInternalHelpResourcesContent,\n  ILDAPConfig,\n  ILDAPConfigTestResult,\n  ILegacyFeature,\n  ILocale,\n  ILook,\n  ILookmlModel,\n  ILookmlModelExplore,\n  ILookmlTest,\n  ILookmlTestResult,\n  ILookWithQuery,\n  IManifest,\n  IMaterializePDT,\n  IMergeQuery,\n  IMobileSettings,\n  IMobileToken,\n  IModel,\n  IModelFieldSuggestions,\n  IModelSet,\n  IOauthClientApp,\n  IOIDCConfig,\n  IPasswordConfig,\n  IPermission,\n  IPermissionSet,\n  IProject,\n  IProjectFile,\n  IProjectValidation,\n  IProjectValidationCache,\n  IProjectWorkspace,\n  IQuery,\n  IQueryTask,\n  IRenderTask,\n  IRepositoryCredential,\n  IRequestActiveThemes,\n  IRequestAlertNotifications,\n  IRequestAllBoardItems,\n  IRequestAllBoardSections,\n  IRequestAllExternalOauthApplications,\n  IRequestAllGroups,\n  IRequestAllGroupUsers,\n  IRequestAllIntegrations,\n  IRequestAllLookmlModels,\n  IRequestAllRoles,\n  IRequestAllScheduledPlans,\n  IRequestAllUserAttributes,\n  IRequestAllUsers,\n  IRequestArtifact,\n  IRequestArtifactNamespaces,\n  IRequestConnectionColumns,\n  IRequestConnectionSchemas,\n  IRequestConnectionSearchColumns,\n  IRequestConnectionTables,\n  IRequestContentThumbnail,\n  IRequestCreateDashboardElement,\n  IRequestCreateDashboardRenderTask,\n  IRequestCreateQueryTask,\n  IRequestCreateUserCredentialsEmailPasswordReset,\n  IRequestDeployRefToProduction,\n  IRequestFolderChildren,\n  IRequestFolderChildrenSearch,\n  IRequestGraphDerivedTablesForModel,\n  IRequestGraphDerivedTablesForView,\n  IRequestLogin,\n  IRequestModelFieldnameSuggestions,\n  IRequestRoleUsers,\n  IRequestRunGitConnectionTest,\n  IRequestRunInlineQuery,\n  IRequestRunLook,\n  IRequestRunLookmlTest,\n  IRequestRunQuery,\n  IRequestScheduledPlansForDashboard,\n  IRequestScheduledPlansForLook,\n  IRequestScheduledPlansForLookmlDashboard,\n  IRequestSearchAlerts,\n  IRequestSearchArtifacts,\n  IRequestSearchBoards,\n  IRequestSearchContentFavorites,\n  IRequestSearchContentViews,\n  IRequestSearchCredentialsEmail,\n  IRequestSearchDashboardElements,\n  IRequestSearchDashboards,\n  IRequestSearchFolders,\n  IRequestSearchGroups,\n  IRequestSearchGroupsWithHierarchy,\n  IRequestSearchGroupsWithRoles,\n  IRequestSearchLooks,\n  IRequestSearchModelSets,\n  IRequestSearchPermissionSets,\n  IRequestSearchRoles,\n  IRequestSearchRolesWithUserCount,\n  IRequestSearchThemes,\n  IRequestSearchUserLoginLockouts,\n  IRequestSearchUsers,\n  IRequestSearchUsersNames,\n  IRequestStartPdtBuild,\n  IRequestTagRef,\n  IRequestUserAttributeUserValues,\n  IRequestUserRoles,\n  IRole,\n  IRoleSearch,\n  IRunningQueries,\n  ISamlConfig,\n  ISamlMetadataParseResult,\n  IScheduledPlan,\n  ISchema,\n  ISchemaColumns,\n  ISchemaTables,\n  ISession,\n  ISessionConfig,\n  ISetting,\n  ISmtpSettings,\n  ISmtpStatus,\n  ISqlQuery,\n  ISqlQueryCreate,\n  ISshPublicKey,\n  ISshServer,\n  ISshTunnel,\n  ISupportAccessAddEntries,\n  ISupportAccessAllowlistEntry,\n  ISupportAccessEnable,\n  ISupportAccessStatus,\n  ITheme,\n  ITimezone,\n  IUpdateArtifact,\n  IUpdateFolder,\n  IUser,\n  IUserAttribute,\n  IUserAttributeGroupValue,\n  IUserAttributeWithValue,\n  IUserEmailOnly,\n  IUserLoginLockout,\n  IUserPublic,\n  IValidationError,\n  IWelcomeEmailTest,\n  IWhitelabelConfiguration,\n  IWorkspace,\n  IWriteAlert,\n  IWriteApiSession,\n  IWriteBackupConfiguration,\n  IWriteBoard,\n  IWriteBoardItem,\n  IWriteBoardSection,\n  IWriteColorCollection,\n  IWriteContentFavorite,\n  IWriteContentMeta,\n  IWriteCreateDashboardFilter,\n  IWriteCredentialsEmail,\n  IWriteDashboard,\n  IWriteDashboardElement,\n  IWriteDashboardFilter,\n  IWriteDashboardLayout,\n  IWriteDashboardLayoutComponent,\n  IWriteDashboardLookml,\n  IWriteDatagroup,\n  IWriteDBConnection,\n  IWriteEmbedSecret,\n  IWriteExternalOauthApplication,\n  IWriteGitBranch,\n  IWriteGroup,\n  IWriteIntegration,\n  IWriteIntegrationHub,\n  IWriteInternalHelpResources,\n  IWriteInternalHelpResourcesContent,\n  IWriteLDAPConfig,\n  IWriteLegacyFeature,\n  IWriteLookmlModel,\n  IWriteLookWithQuery,\n  IWriteMergeQuery,\n  IWriteMobileToken,\n  IWriteModelSet,\n  IWriteOauthClientApp,\n  IWriteOIDCConfig,\n  IWritePasswordConfig,\n  IWritePermissionSet,\n  IWriteProject,\n  IWriteQuery,\n  IWriteRepositoryCredential,\n  IWriteRole,\n  IWriteSamlConfig,\n  IWriteScheduledPlan,\n  IWriteSessionConfig,\n  IWriteSetting,\n  IWriteSshServer,\n  IWriteSshTunnel,\n  IWriteTheme,\n  IWriteUser,\n  IWriteUserAttribute,\n  IWriteUserAttributeWithValue,\n  IWriteWhitelabelConfiguration,\n} from './models'\n\n/**\n * Creates a \"functional sdk\" that knows the API and Looker release version\n * @param authSession authentication session\n */\nexport const functionalSdk40 = (authSession: IAuthSession) => {\n  return functionalSdk(authSession, '4.0', sdkVersion)\n}\n\n//#region Alert: Alert\n\n/**\n * Follow an alert.\n *\n * POST /alerts/{alert_id}/follow -> void\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param options one-time API call overrides\n *\n */\nexport const follow_alert = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.post<void, IError>(\n    `/alerts/${alert_id}/follow`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Unfollow an alert.\n *\n * DELETE /alerts/{alert_id}/follow -> void\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param options one-time API call overrides\n *\n */\nexport const unfollow_alert = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.delete<void, IError>(\n    `/alerts/${alert_id}/follow`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Search Alerts\n *\n * GET /alerts/search -> IAlert[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchAlerts\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_alerts = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchAlerts,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlert[], IError>> => {\n  return sdk.get<IAlert[], IError>(\n    '/alerts/search',\n    {\n      limit: request.limit,\n      offset: request.offset,\n      group_by: request.group_by,\n      fields: request.fields,\n      disabled: request.disabled,\n      frequency: request.frequency,\n      condition_met: request.condition_met,\n      last_run_start: request.last_run_start,\n      last_run_end: request.last_run_end,\n      all_owners: request.all_owners,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get an alert by a given alert ID\n *\n * GET /alerts/{alert_id} -> IAlert\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param options one-time API call overrides\n *\n */\nexport const get_alert = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlert, IError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.get<IAlert, IError>(`/alerts/${alert_id}`, null, null, options)\n}\n\n/**\n * ### Update an alert\n * # Required fields: `owner_id`, `field`, `destinations`, `comparison_type`, `threshold`, `cron`\n * #\n *\n * PUT /alerts/{alert_id} -> IAlert\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param body Partial<IWriteAlert>\n * @param options one-time API call overrides\n *\n */\nexport const update_alert = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  body: Partial<IWriteAlert>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlert, IError | IValidationError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.put<IAlert, IError | IValidationError>(\n    `/alerts/${alert_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Update select alert fields\n * # Available fields: `owner_id`, `is_disabled`, `disabled_reason`, `is_public`, `threshold`\n * #\n *\n * PATCH /alerts/{alert_id} -> IAlert\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param body Partial<IAlertPatch>\n * @param options one-time API call overrides\n *\n */\nexport const update_alert_field = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  body: Partial<IAlertPatch>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlert, IError | IValidationError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.patch<IAlert, IError | IValidationError>(\n    `/alerts/${alert_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete an alert by a given alert ID\n *\n * DELETE /alerts/{alert_id} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param options one-time API call overrides\n *\n */\nexport const delete_alert = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.delete<void, IError>(`/alerts/${alert_id}`, null, null, options)\n}\n\n/**\n * ### Create a new alert and return details of the newly created object\n *\n * Required fields: `field`, `destinations`, `comparison_type`, `threshold`, `cron`\n *\n * Example Request:\n * Run alert on dashboard element '103' at 5am every day. Send an email to 'test@test.com' if inventory for Los Angeles (using dashboard filter `Warehouse Name`) is lower than 1,000\n * ```\n * {\n *   \"cron\": \"0 5 * * *\",\n *   \"custom_title\": \"Alert when LA inventory is low\",\n *   \"dashboard_element_id\": 103,\n *   \"applied_dashboard_filters\": [\n *     {\n *       \"filter_title\": \"Warehouse Name\",\n *       \"field_name\": \"distribution_centers.name\",\n *       \"filter_value\": \"Los Angeles CA\",\n *       \"filter_description\": \"is Los Angeles CA\"\n *     }\n *   ],\n *   \"comparison_type\": \"LESS_THAN\",\n *   \"destinations\": [\n *     {\n *       \"destination_type\": \"EMAIL\",\n *       \"email_address\": \"test@test.com\"\n *     }\n *   ],\n *   \"field\": {\n *     \"title\": \"Number on Hand\",\n *     \"name\": \"inventory_items.number_on_hand\"\n *   },\n *   \"is_disabled\": false,\n *   \"is_public\": true,\n *   \"threshold\": 1000\n * }\n * ```\n *\n * POST /alerts -> IAlert\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteAlert>\n * @param options one-time API call overrides\n *\n */\nexport const create_alert = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteAlert>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlert, IError | IValidationError>> => {\n  return sdk.post<IAlert, IError | IValidationError>(\n    '/alerts',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Enqueue an Alert by ID\n *\n * POST /alerts/{alert_id}/enqueue -> void\n *\n * @param sdk IAPIMethods implementation\n * @param alert_id ID of an alert\n * @param force Whether to enqueue an alert again if its already running.\n * @param options one-time API call overrides\n *\n */\nexport const enqueue_alert = async (\n  sdk: IAPIMethods,\n  alert_id: string,\n  force?: boolean,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  alert_id = encodeParam(alert_id)\n  return sdk.post<void, IError>(\n    `/alerts/${alert_id}/enqueue`,\n    { force },\n    null,\n    options\n  )\n}\n\n/**\n * # Alert Notifications.\n *   The endpoint returns all the alert notifications received by the user on email in the past 7 days. It also returns whether the notifications have been read by the user.\n *\n * GET /alert_notifications -> IAlertNotifications[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAlertNotifications\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const alert_notifications = async (\n  sdk: IAPIMethods,\n  request: IRequestAlertNotifications,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlertNotifications[], IError>> => {\n  return sdk.get<IAlertNotifications[], IError>(\n    '/alert_notifications',\n    { limit: request.limit, offset: request.offset },\n    null,\n    options\n  )\n}\n\n/**\n * # Reads a Notification\n *   The endpoint marks a given alert notification as read by the user, in case it wasn't already read. The AlertNotification model is updated for this purpose. It returns the notification as a response.\n *\n * PATCH /alert_notifications/{alert_notification_id} -> IAlertNotifications\n *\n * @param sdk IAPIMethods implementation\n * @param alert_notification_id ID of a notification\n * @param options one-time API call overrides\n *\n */\nexport const read_alert_notification = async (\n  sdk: IAPIMethods,\n  alert_notification_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAlertNotifications, IError | IValidationError>> => {\n  alert_notification_id = encodeParam(alert_notification_id)\n  return sdk.patch<IAlertNotifications, IError | IValidationError>(\n    `/alert_notifications/${alert_notification_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Alert: Alert\n\n//#region ApiAuth: API Authentication\n\n/**\n * ### Present client credentials to obtain an authorization token\n *\n * Looker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://docs.looker.com/r/api/outh2_resource_owner_pc) pattern.\n * The client credentials required for this login must be obtained by creating an API3 key on a user account\n * in the Looker Admin console. The API3 key consists of a public `client_id` and a private `client_secret`.\n *\n * The access token returned by `login` must be used in the HTTP Authorization header of subsequent\n * API requests, like this:\n * ```\n * Authorization: token 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4\n * ```\n * Replace \"4QDkCy...\" with the `access_token` value returned by `login`.\n * The word `token` is a string literal and must be included exactly as shown.\n *\n * This function can accept `client_id` and `client_secret` parameters as URL query params or as www-form-urlencoded params in the body of the HTTP request. Since there is a small risk that URL parameters may be visible to intermediate nodes on the network route (proxies, routers, etc), passing credentials in the body of the request is considered more secure than URL params.\n *\n * Example of passing credentials in the HTTP request body:\n * ````\n * POST HTTP /login\n * Content-Type: application/x-www-form-urlencoded\n *\n * client_id=CGc9B7v7J48dQSJvxxx&client_secret=nNVS9cSS3xNpSC9JdsBvvvvv\n * ````\n *\n * ### Best Practice:\n * Always pass credentials in body params. Pass credentials in URL query params **only** when you cannot pass body params due to application, tool, or other limitations.\n *\n * For more information and detailed examples of Looker API authorization, see [How to Authenticate to Looker API3](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).\n *\n * POST /login -> IAccessToken\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestLogin\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const login = async (\n  sdk: IAPIMethods,\n  request: IRequestLogin,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAccessToken, IError>> => {\n  return sdk.post<IAccessToken, IError>(\n    '/login',\n    { client_id: request.client_id, client_secret: request.client_secret },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create an access token that runs as a given user.\n *\n * This can only be called by an authenticated admin user. It allows that admin to generate a new\n * authentication token for the user with the given user id. That token can then be used for subsequent\n * API calls - which are then performed *as* that target user.\n *\n * The target user does *not* need to have a pre-existing API client_id/client_secret pair. And, no such\n * credentials are created by this call.\n *\n * This allows for building systems where api user authentication for an arbitrary number of users is done\n * outside of Looker and funneled through a single 'service account' with admin permissions. Note that a\n * new access token is generated on each call. If target users are going to be making numerous API\n * calls in a short period then it is wise to cache this authentication token rather than call this before\n * each of those API calls.\n *\n * See 'login' for more detail on the access token and how to use it.\n *\n * POST /login/{user_id} -> IAccessToken\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user.\n * @param associative When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license.\n * @param options one-time API call overrides\n *\n */\nexport const login_user = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  associative?: boolean,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IAccessToken, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.post<IAccessToken, IError>(\n    `/login/${user_id}`,\n    { associative },\n    null,\n    options\n  )\n}\n\n/**\n * ### Logout of the API and invalidate the current access token.\n *\n * DELETE /logout -> string\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const logout = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  return sdk.delete<string, IError>('/logout', null, null, options)\n}\n\n//#endregion ApiAuth: API Authentication\n\n//#region Artifact: Artifact Storage\n\n/**\n * Get the maximum configured size of the entire artifact store, and the currently used storage in bytes.\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * GET /artifact/usage -> IArtifactUsage\n *\n * @param sdk IAPIMethods implementation\n * @param fields Comma-delimited names of fields to return in responses. Omit for all fields\n * @param options one-time API call overrides\n *\n */\nexport const artifact_usage = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IArtifactUsage, IError | IValidationError>> => {\n  return sdk.get<IArtifactUsage, IError | IValidationError>(\n    '/artifact/usage',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * Get all artifact namespaces and the count of artifacts in each namespace\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * GET /artifact/namespaces -> IArtifactNamespace[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestArtifactNamespaces\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const artifact_namespaces = async (\n  sdk: IAPIMethods,\n  request: IRequestArtifactNamespaces,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IArtifactNamespace[], IError | IValidationError>> => {\n  return sdk.get<IArtifactNamespace[], IError | IValidationError>(\n    '/artifact/namespaces',\n    { fields: request.fields, limit: request.limit, offset: request.offset },\n    null,\n    options\n  )\n}\n\n/**\n * ### Return the value of an artifact\n *\n * The MIME type for the API response is set to the `content_type` of the value\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * GET /artifact/{namespace}/value -> string\n *\n * @param sdk IAPIMethods implementation\n * @param namespace Artifact storage namespace\n * @param key Artifact storage key. Namespace + Key must be unique\n * @param options one-time API call overrides\n *\n */\nexport const artifact_value = async (\n  sdk: IAPIMethods,\n  namespace: string,\n  key?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  namespace = encodeParam(namespace)\n  return sdk.get<string, IError | IValidationError>(\n    `/artifact/${namespace}/value`,\n    { key },\n    null,\n    options\n  )\n}\n\n/**\n * Remove *all* artifacts from a namespace. Purged artifacts are permanently deleted\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * DELETE /artifact/{namespace}/purge -> void\n *\n * @param sdk IAPIMethods implementation\n * @param namespace Artifact storage namespace\n * @param options one-time API call overrides\n *\n */\nexport const purge_artifacts = async (\n  sdk: IAPIMethods,\n  namespace: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  namespace = encodeParam(namespace)\n  return sdk.delete<void, IError>(\n    `/artifact/${namespace}/purge`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Search all key/value pairs in a namespace for matching criteria.\n *\n * Returns an array of artifacts matching the specified search criteria.\n *\n * Key search patterns use case-insensitive matching and can contain `%` and `_` as SQL LIKE pattern match wildcard expressions.\n *\n * The parameters `min_size` and `max_size` can be used individually or together.\n *\n * - `min_size` finds artifacts with sizes greater than or equal to its value\n * - `max_size` finds artifacts with sizes less than or equal to its value\n * - using both parameters restricts the minimum and maximum size range for artifacts\n *\n * **NOTE**: Artifacts are always returned in alphanumeric order by key.\n *\n * Get a **single artifact** by namespace and key with [`artifact`](#!/Artifact/artifact)\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * GET /artifact/{namespace}/search -> IArtifact[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchArtifacts\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_artifacts = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchArtifacts,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IArtifact[], IError | IValidationError>> => {\n  request.namespace = encodeParam(request.namespace)\n  return sdk.get<IArtifact[], IError | IValidationError>(\n    `/artifact/${request.namespace}/search`,\n    {\n      fields: request.fields,\n      key: request.key,\n      user_ids: request.user_ids,\n      min_size: request.min_size,\n      max_size: request.max_size,\n      limit: request.limit,\n      offset: request.offset,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get one or more artifacts\n *\n * Returns an array of artifacts matching the specified key value(s).\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * GET /artifact/{namespace} -> IArtifact[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestArtifact\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const artifact = async (\n  sdk: IAPIMethods,\n  request: IRequestArtifact,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IArtifact[], IError | IValidationError>> => {\n  request.namespace = encodeParam(request.namespace)\n  return sdk.get<IArtifact[], IError | IValidationError>(\n    `/artifact/${request.namespace}`,\n    {\n      key: request.key,\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Delete one or more artifacts\n *\n * To avoid rate limiting on deletion requests, multiple artifacts can be deleted at the same time by using a comma-delimited list of artifact keys.\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * DELETE /artifact/{namespace} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param namespace Artifact storage namespace\n * @param key Comma-delimited list of keys. Wildcards not allowed.\n * @param options one-time API call overrides\n *\n */\nexport const delete_artifact = async (\n  sdk: IAPIMethods,\n  namespace: string,\n  key: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  namespace = encodeParam(namespace)\n  return sdk.delete<void, IError>(\n    `/artifact/${namespace}`,\n    { key },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create or update one or more artifacts\n *\n * Only `key` and `value` are required to _create_ an artifact.\n * To _update_ an artifact, its current `version` value must be provided.\n *\n * In the following example `body` payload, `one` and `two` are existing artifacts, and `three` is new:\n *\n * ```json\n * [\n *   { \"key\": \"one\", \"value\": \"[ \\\"updating\\\", \\\"existing\\\", \\\"one\\\" ]\", \"version\": 10, \"content_type\": \"application/json\" },\n *   { \"key\": \"two\", \"value\": \"updating existing two\", \"version\": 20 },\n *   { \"key\": \"three\", \"value\": \"creating new three\" },\n * ]\n * ```\n *\n * Notes for this body:\n *\n * - The `value` for `key` **one** is a JSON payload, so a `content_type` override is needed. This override must be done **every** time a JSON value is set.\n * - The `version` values for **one** and **two** mean they have been saved 10 and 20 times, respectively.\n * - If `version` is **not** provided for an existing artifact, the entire request will be refused and a `Bad Request` response will be sent.\n * - If `version` is provided for an artifact, it is only used for helping to prevent inadvertent data overwrites. It cannot be used to **set** the version of an artifact. The Looker server controls `version`.\n * - We suggest encoding binary values as base64. Because the MIME content type for base64 is detected as plain text, also provide `content_type` to correctly indicate the value's type for retrieval and client-side processing.\n *\n * Because artifacts are stored encrypted, the same value can be written multiple times (provided the correct `version` number is used). Looker does not examine any values stored in the artifact store, and only decrypts when sending artifacts back in an API response.\n *\n * **Note**: The artifact storage API can only be used by Looker-built extensions.\n *\n * PUT /artifacts/{namespace} -> IArtifact[]\n *\n * @param sdk IAPIMethods implementation\n * @param namespace Artifact storage namespace\n * @param body Partial<IUpdateArtifact[]>\n * @param fields Comma-delimited names of fields to return in responses. Omit for all fields\n * @param options one-time API call overrides\n *\n */\nexport const update_artifacts = async (\n  sdk: IAPIMethods,\n  namespace: string,\n  body: Partial<IUpdateArtifact[]>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IArtifact[], IError | IValidationError>> => {\n  namespace = encodeParam(namespace)\n  return sdk.put<IArtifact[], IError | IValidationError>(\n    `/artifacts/${namespace}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n//#endregion Artifact: Artifact Storage\n\n//#region Auth: Manage User Authentication Configuration\n\n/**\n * ### Create an embed secret using the specified information.\n *\n * The value of the `secret` field will be set by Looker and returned.\n *\n * POST /embed_config/secrets -> IEmbedSecret\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteEmbedSecret>\n * @param options one-time API call overrides\n *\n */\nexport const create_embed_secret = async (\n  sdk: IAPIMethods,\n  body?: Partial<IWriteEmbedSecret>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IEmbedSecret, IError | IValidationError>> => {\n  return sdk.post<IEmbedSecret, IError | IValidationError>(\n    '/embed_config/secrets',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete an embed secret.\n *\n * DELETE /embed_config/secrets/{embed_secret_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param embed_secret_id Id of Embed Secret\n * @param options one-time API call overrides\n *\n */\nexport const delete_embed_secret = async (\n  sdk: IAPIMethods,\n  embed_secret_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  embed_secret_id = encodeParam(embed_secret_id)\n  return sdk.delete<string, IError>(\n    `/embed_config/secrets/${embed_secret_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Create SSO Embed URL\n *\n * Creates an SSO embed URL and cryptographically signs it with an embed secret.\n * This signed URL can then be used to instantiate a Looker embed session in a PBL web application.\n * Do not make any modifications to this URL - any change may invalidate the signature and\n * cause the URL to fail to load a Looker embed session.\n *\n * A signed SSO embed URL can only be used once. After it has been used to request a page from the\n * Looker server, the URL is invalid. Future requests using the same URL will fail. This is to prevent\n * 'replay attacks'.\n *\n * The `target_url` property must be a complete URL of a Looker UI page - scheme, hostname, path and query params.\n * To load a dashboard with id 56 and with a filter of `Date=1 years`, the looker URL would look like `https:/myname.looker.com/dashboards/56?Date=1%20years`.\n * The best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\n * copy the URL shown in the browser address bar and paste it into the `target_url` property as a quoted string value in this API request.\n *\n * Permissions for the embed user are defined by the groups in which the embed user is a member (group_ids property)\n * and the lists of models and permissions assigned to the embed user.\n * At a minimum, you must provide values for either the group_ids property, or both the models and permissions properties.\n * These properties are additive; an embed user can be a member of certain groups AND be granted access to models and permissions.\n *\n * The embed user's access is the union of permissions granted by the group_ids, models, and permissions properties.\n *\n * This function does not strictly require all group_ids, user attribute names, or model names to exist at the moment the\n * SSO embed url is created. Unknown group_id, user attribute names or model names will be passed through to the output URL.\n * To diagnose potential problems with an SSO embed URL, you can copy the signed URL into the Embed URI Validator text box in `<your looker instance>/admin/embed`.\n *\n * The `secret_id` parameter is optional. If specified, its value must be the id of an active secret defined in the Looker instance.\n * if not specified, the URL will be signed using the newest active secret defined in the Looker instance.\n *\n * #### Security Note\n * Protect this signed URL as you would an access token or password credentials - do not write\n * it to disk, do not pass it to a third party, and only pass it through a secure HTTPS\n * encrypted transport.\n *\n * POST /embed/sso_url -> IEmbedUrlResponse\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IEmbedSsoParams>\n * @param options one-time API call overrides\n *\n */\nexport const create_sso_embed_url = async (\n  sdk: IAPIMethods,\n  body: Partial<IEmbedSsoParams>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IEmbedUrlResponse, IError | IValidationError>> => {\n  return sdk.post<IEmbedUrlResponse, IError | IValidationError>(\n    '/embed/sso_url',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Create an Embed URL\n *\n * Creates an embed URL that runs as the Looker user making this API call. (\"Embed as me\")\n * This embed URL can then be used to instantiate a Looker embed session in a\n * \"Powered by Looker\" (PBL) web application.\n *\n * This is similar to Private Embedding (https://docs.looker.com/r/admin/embed/private-embed). Instead of\n * of logging into the Web UI to authenticate, the user has already authenticated against the API to be able to\n * make this call. However, unlike Private Embed where the user has access to any other part of the Looker UI,\n * the embed web session created by requesting the EmbedUrlResponse.url in a browser only has access to\n * content visible under the `/embed` context.\n *\n * An embed URL can only be used once, and must be used within 5 minutes of being created. After it\n * has been used to request a page from the Looker server, the URL is invalid. Future requests using\n * the same URL will fail. This is to prevent 'replay attacks'.\n *\n * The `target_url` property must be a complete URL of a Looker Embedded UI page - scheme, hostname, path starting with \"/embed\" and query params.\n * To load a dashboard with id 56 and with a filter of `Date=1 years`, the looker Embed URL would look like `https://myname.looker.com/embed/dashboards/56?Date=1%20years`.\n * The best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\n * copy the URL shown in the browser address bar, insert \"/embed\" after the host/port, and paste it into the `target_url` property as a quoted string value in this API request.\n *\n * #### Security Note\n * Protect this embed URL as you would an access token or password credentials - do not write\n * it to disk, do not pass it to a third party, and only pass it through a secure HTTPS\n * encrypted transport.\n *\n * POST /embed/token_url/me -> IEmbedUrlResponse\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IEmbedParams>\n * @param options one-time API call overrides\n *\n */\nexport const create_embed_url_as_me = async (\n  sdk: IAPIMethods,\n  body: Partial<IEmbedParams>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IEmbedUrlResponse, IError | IValidationError>> => {\n  return sdk.post<IEmbedUrlResponse, IError | IValidationError>(\n    '/embed/token_url/me',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Acquire a cookieless embed session.\n *\n * The acquire session endpoint negates the need for signing the embed url and passing it as a parameter\n * to the embed login. This endpoint accepts an embed user definition and creates it if it does not exist,\n * otherwise it reuses it. Note that this endpoint will not update the user, user attributes or group\n * attributes if the embed user already exists. This is the same behavior as the embed SSO login.\n *\n * The endpoint also accepts an optional `session_reference_token`. If present and the session has not expired\n * and the credentials match the credentials for the embed session, a new authentication token will be\n * generated. This allows the embed session to attach a new embedded IFRAME to the embed session. Note that\n * the session will NOT be extended in this scenario, in other words the session_length parameter is ignored.\n *\n * If the session_reference_token has expired, it will be ignored and a new embed session will be created.\n *\n * If the credentials do not match the credentials associated with an exisiting session_reference_token, a\n * 404 will be returned.\n *\n * The endpoint returns the following:\n * - Authentication token - a token that is passed to `/embed/login` endpoint that creates or attaches to the\n *   embed session. This token can be used once and has a lifetime of 30 seconds.\n * - Session reference token - a token that lives for the length of the session. This token is used to\n *   generate new api and navigation tokens OR create new embed IFRAMEs.\n * - Api token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into the\n *   iframe.\n * - Navigation token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into\n *   the iframe.\n *\n * POST /embed/cookieless_session/acquire -> IEmbedCookielessSessionAcquireResponse\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IEmbedCookielessSessionAcquire>\n * @param options one-time API call overrides\n *\n */\nexport const acquire_embed_cookieless_session = async (\n  sdk: IAPIMethods,\n  body: Partial<IEmbedCookielessSessionAcquire>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IEmbedCookielessSessionAcquireResponse, IError | IValidationError>\n> => {\n  return sdk.post<\n    IEmbedCookielessSessionAcquireResponse,\n    IError | IValidationError\n  >('/embed/cookieless_session/acquire', null, body, options)\n}\n\n/**\n * ### Delete cookieless embed session\n *\n * This will delete the session associated with the given session reference token. Calling this endpoint will result\n * in the session and session reference data being cleared from the system. This endpoint can be used to log an embed\n * user out of the Looker instance.\n *\n * DELETE /embed/cookieless_session/{session_reference_token} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param session_reference_token Embed session reference token\n * @param options one-time API call overrides\n *\n */\nexport const delete_embed_cookieless_session = async (\n  sdk: IAPIMethods,\n  session_reference_token: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  session_reference_token = encodeParam(session_reference_token)\n  return sdk.delete<string, IError | IValidationError>(\n    `/embed/cookieless_session/${session_reference_token}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Generate api and navigation tokens for a cookieless embed session\n *\n * The generate tokens endpoint is used to create new tokens of type:\n * - Api token.\n * - Navigation token.\n * The generate tokens endpoint should be called every time the Looker client asks for a token (except for the\n * first time when the tokens returned by the acquire_session endpoint should be used).\n *\n * PUT /embed/cookieless_session/generate_tokens -> IEmbedCookielessSessionGenerateTokensResponse\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IEmbedCookielessSessionGenerateTokens>\n * @param options one-time API call overrides\n *\n */\nexport const generate_tokens_for_cookieless_session = async (\n  sdk: IAPIMethods,\n  body: Partial<IEmbedCookielessSessionGenerateTokens>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<\n    IEmbedCookielessSessionGenerateTokensResponse,\n    IError | IValidationError\n  >\n> => {\n  return sdk.put<\n    IEmbedCookielessSessionGenerateTokensResponse,\n    IError | IValidationError\n  >('/embed/cookieless_session/generate_tokens', null, body, options)\n}\n\n/**\n * ### Get the LDAP configuration.\n *\n * Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server.\n * LDAP setup requires coordination with an administrator of that directory server.\n *\n * Only Looker administrators can read and update the LDAP configuration.\n *\n * Configuring LDAP impacts authentication for all users. This configuration should be done carefully.\n *\n * Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n *\n * LDAP is enabled or disabled for Looker using the **enabled** field.\n *\n * Looker will never return an **auth_password** field. That value can be set, but never retrieved.\n *\n * See the [Looker LDAP docs](https://docs.looker.com/r/api/ldap_setup) for additional information.\n *\n * GET /ldap_config -> ILDAPConfig\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const ldap_config = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILDAPConfig, IError>> => {\n  return sdk.get<ILDAPConfig, IError>('/ldap_config', null, null, options)\n}\n\n/**\n * ### Update the LDAP configuration.\n *\n * Configuring LDAP impacts authentication for all users. This configuration should be done carefully.\n *\n * Only Looker administrators can read and update the LDAP configuration.\n *\n * LDAP is enabled or disabled for Looker using the **enabled** field.\n *\n * It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.\n *\n * See the [Looker LDAP docs](https://docs.looker.com/r/api/ldap_setup) for additional information.\n *\n * PATCH /ldap_config -> ILDAPConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLDAPConfig>\n * @param options one-time API call overrides\n *\n */\nexport const update_ldap_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLDAPConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILDAPConfig, IError | IValidationError>> => {\n  return sdk.patch<ILDAPConfig, IError | IValidationError>(\n    '/ldap_config',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Test the connection settings for an LDAP configuration.\n *\n * This tests that the connection is possible given a connection_host and connection_port.\n *\n * **connection_host** and **connection_port** are required. **connection_tls** is optional.\n *\n * Example:\n * ```json\n * {\n *   \"connection_host\": \"ldap.example.com\",\n *   \"connection_port\": \"636\",\n *   \"connection_tls\": true\n * }\n * ```\n *\n * No authentication to the LDAP server is attempted.\n *\n * The active LDAP settings are not modified.\n *\n * PUT /ldap_config/test_connection -> ILDAPConfigTestResult\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLDAPConfig>\n * @param options one-time API call overrides\n *\n */\nexport const test_ldap_config_connection = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLDAPConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILDAPConfigTestResult, IError | IValidationError>> => {\n  return sdk.put<ILDAPConfigTestResult, IError | IValidationError>(\n    '/ldap_config/test_connection',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Test the connection authentication settings for an LDAP configuration.\n *\n * This tests that the connection is possible and that a 'server' account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.\n *\n * **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.\n *\n * Example:\n * ```json\n * {\n *   \"connection_host\": \"ldap.example.com\",\n *   \"connection_port\": \"636\",\n *   \"connection_tls\": true,\n *   \"auth_username\": \"cn=looker,dc=example,dc=com\",\n *   \"auth_password\": \"secret\"\n * }\n * ```\n *\n * Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n *\n * The active LDAP settings are not modified.\n *\n * PUT /ldap_config/test_auth -> ILDAPConfigTestResult\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLDAPConfig>\n * @param options one-time API call overrides\n *\n */\nexport const test_ldap_config_auth = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLDAPConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILDAPConfigTestResult, IError | IValidationError>> => {\n  return sdk.put<ILDAPConfigTestResult, IError | IValidationError>(\n    '/ldap_config/test_auth',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Test the user authentication settings for an LDAP configuration without authenticating the user.\n *\n * This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.\n *\n * This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.\n *\n * **test_ldap_user** is required.\n *\n * The active LDAP settings are not modified.\n *\n * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLDAPConfig>\n * @param options one-time API call overrides\n *\n */\nexport const test_ldap_config_user_info = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLDAPConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILDAPConfigTestResult, IError | IValidationError>> => {\n  return sdk.put<ILDAPConfigTestResult, IError | IValidationError>(\n    '/ldap_config/test_user_info',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Test the user authentication settings for an LDAP configuration.\n *\n * This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.\n *\n * Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n *\n * **test_ldap_user** and **test_ldap_password** are required.\n *\n * The active LDAP settings are not modified.\n *\n * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLDAPConfig>\n * @param options one-time API call overrides\n *\n */\nexport const test_ldap_config_user_auth = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLDAPConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILDAPConfigTestResult, IError | IValidationError>> => {\n  return sdk.put<ILDAPConfigTestResult, IError | IValidationError>(\n    '/ldap_config/test_user_auth',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Registers a mobile device.\n * # Required fields: [:device_token, :device_type]\n *\n * POST /mobile/device -> IMobileToken\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteMobileToken>\n * @param options one-time API call overrides\n *\n */\nexport const register_mobile_device = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteMobileToken>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMobileToken, IError | IValidationError>> => {\n  return sdk.post<IMobileToken, IError | IValidationError>(\n    '/mobile/device',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Updates the mobile device registration\n *\n * PATCH /mobile/device/{device_id} -> IMobileToken\n *\n * @param sdk IAPIMethods implementation\n * @param device_id Unique id of the device.\n * @param options one-time API call overrides\n *\n */\nexport const update_mobile_device_registration = async (\n  sdk: IAPIMethods,\n  device_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMobileToken, IError | IValidationError>> => {\n  device_id = encodeParam(device_id)\n  return sdk.patch<IMobileToken, IError | IValidationError>(\n    `/mobile/device/${device_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Deregister a mobile device.\n *\n * DELETE /mobile/device/{device_id} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param device_id Unique id of the device.\n * @param options one-time API call overrides\n *\n */\nexport const deregister_mobile_device = async (\n  sdk: IAPIMethods,\n  device_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  device_id = encodeParam(device_id)\n  return sdk.delete<void, IError>(\n    `/mobile/device/${device_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### List All OAuth Client Apps\n *\n * Lists all applications registered to use OAuth2 login with this Looker instance, including\n * enabled and disabled apps.\n *\n * Results are filtered to include only the apps that the caller (current user)\n * has permission to see.\n *\n * GET /oauth_client_apps -> IOauthClientApp[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_oauth_client_apps = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOauthClientApp[], IError>> => {\n  return sdk.get<IOauthClientApp[], IError>(\n    '/oauth_client_apps',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Oauth Client App\n *\n * Returns the registered app client with matching client_guid.\n *\n * GET /oauth_client_apps/{client_guid} -> IOauthClientApp\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of this application\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const oauth_client_app = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOauthClientApp, IError>> => {\n  client_guid = encodeParam(client_guid)\n  return sdk.get<IOauthClientApp, IError>(\n    `/oauth_client_apps/${client_guid}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Register an OAuth2 Client App\n *\n * Registers details identifying an external web app or native app as an OAuth2 login client of the Looker instance.\n * The app registration must provide a unique client_guid and redirect_uri that the app will present\n * in OAuth login requests. If the client_guid and redirect_uri parameters in the login request do not match\n * the app details registered with the Looker instance, the request is assumed to be a forgery and is rejected.\n *\n * POST /oauth_client_apps/{client_guid} -> IOauthClientApp\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of this application\n * @param body Partial<IWriteOauthClientApp>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const register_oauth_client_app = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  body: Partial<IWriteOauthClientApp>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOauthClientApp, IError | IValidationError>> => {\n  client_guid = encodeParam(client_guid)\n  return sdk.post<IOauthClientApp, IError | IValidationError>(\n    `/oauth_client_apps/${client_guid}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Update OAuth2 Client App Details\n *\n * Modifies the details a previously registered OAuth2 login client app.\n *\n * PATCH /oauth_client_apps/{client_guid} -> IOauthClientApp\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of this application\n * @param body Partial<IWriteOauthClientApp>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_oauth_client_app = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  body: Partial<IWriteOauthClientApp>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOauthClientApp, IError | IValidationError>> => {\n  client_guid = encodeParam(client_guid)\n  return sdk.patch<IOauthClientApp, IError | IValidationError>(\n    `/oauth_client_apps/${client_guid}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete OAuth Client App\n *\n * Deletes the registration info of the app with the matching client_guid.\n * All active sessions and tokens issued for this app will immediately become invalid.\n *\n * As with most REST DELETE operations, this endpoint does not return an error if the\n * indicated resource does not exist.\n *\n * ### Note: this deletion cannot be undone.\n *\n * DELETE /oauth_client_apps/{client_guid} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of this application\n * @param options one-time API call overrides\n *\n */\nexport const delete_oauth_client_app = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  client_guid = encodeParam(client_guid)\n  return sdk.delete<string, IError>(\n    `/oauth_client_apps/${client_guid}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Invalidate All Issued Tokens\n *\n * Immediately invalidates all auth codes, sessions, access tokens and refresh tokens issued for\n * this app for ALL USERS of this app.\n *\n * DELETE /oauth_client_apps/{client_guid}/tokens -> string\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of the application\n * @param options one-time API call overrides\n *\n */\nexport const invalidate_tokens = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  client_guid = encodeParam(client_guid)\n  return sdk.delete<string, IError>(\n    `/oauth_client_apps/${client_guid}/tokens`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Activate an app for a user\n *\n * Activates a user for a given oauth client app. This indicates the user has been informed that\n * the app will have access to the user's looker data, and that the user has accepted and allowed\n * the app to use their Looker account.\n *\n * Activating a user for an app that the user is already activated with returns a success response.\n *\n * POST /oauth_client_apps/{client_guid}/users/{user_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of this application\n * @param user_id The id of the user to enable use of this app\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const activate_app_user = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  client_guid = encodeParam(client_guid)\n  user_id = encodeParam(user_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/oauth_client_apps/${client_guid}/users/${user_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Deactivate an app for a user\n *\n * Deactivate a user for a given oauth client app. All tokens issued to the app for\n * this user will be invalid immediately. Before the user can use the app with their\n * Looker account, the user will have to read and accept an account use disclosure statement for the app.\n *\n * Admin users can deactivate other users, but non-admin users can only deactivate themselves.\n *\n * As with most REST DELETE operations, this endpoint does not return an error if the indicated\n * resource (app or user) does not exist or has already been deactivated.\n *\n * DELETE /oauth_client_apps/{client_guid}/users/{user_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param client_guid The unique id of this application\n * @param user_id The id of the user to enable use of this app\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const deactivate_app_user = async (\n  sdk: IAPIMethods,\n  client_guid: string,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  client_guid = encodeParam(client_guid)\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/oauth_client_apps/${client_guid}/users/${user_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the OIDC configuration.\n *\n * Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC)\n * authentication server. OIDC setup requires coordination with an administrator of that server.\n *\n * Only Looker administrators can read and update the OIDC configuration.\n *\n * Configuring OIDC impacts authentication for all users. This configuration should be done carefully.\n *\n * Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n *\n * OIDC is enabled or disabled for Looker using the **enabled** field.\n *\n * GET /oidc_config -> IOIDCConfig\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const oidc_config = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOIDCConfig, IError>> => {\n  return sdk.get<IOIDCConfig, IError>('/oidc_config', null, null, options)\n}\n\n/**\n * ### Update the OIDC configuration.\n *\n * Configuring OIDC impacts authentication for all users. This configuration should be done carefully.\n *\n * Only Looker administrators can read and update the OIDC configuration.\n *\n * OIDC is enabled or disabled for Looker using the **enabled** field.\n *\n * It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.\n *\n * PATCH /oidc_config -> IOIDCConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteOIDCConfig>\n * @param options one-time API call overrides\n *\n */\nexport const update_oidc_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteOIDCConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOIDCConfig, IError | IValidationError>> => {\n  return sdk.patch<IOIDCConfig, IError | IValidationError>(\n    '/oidc_config',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get a OIDC test configuration by test_slug.\n *\n * GET /oidc_test_configs/{test_slug} -> IOIDCConfig\n *\n * @param sdk IAPIMethods implementation\n * @param test_slug Slug of test config\n * @param options one-time API call overrides\n *\n */\nexport const oidc_test_config = async (\n  sdk: IAPIMethods,\n  test_slug: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOIDCConfig, IError>> => {\n  test_slug = encodeParam(test_slug)\n  return sdk.get<IOIDCConfig, IError>(\n    `/oidc_test_configs/${test_slug}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Delete a OIDC test configuration.\n *\n * DELETE /oidc_test_configs/{test_slug} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param test_slug Slug of test config\n * @param options one-time API call overrides\n *\n */\nexport const delete_oidc_test_config = async (\n  sdk: IAPIMethods,\n  test_slug: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  test_slug = encodeParam(test_slug)\n  return sdk.delete<string, IError>(\n    `/oidc_test_configs/${test_slug}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a OIDC test configuration.\n *\n * POST /oidc_test_configs -> IOIDCConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteOIDCConfig>\n * @param options one-time API call overrides\n *\n */\nexport const create_oidc_test_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteOIDCConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IOIDCConfig, IError | IValidationError>> => {\n  return sdk.post<IOIDCConfig, IError | IValidationError>(\n    '/oidc_test_configs',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get password config.\n *\n * GET /password_config -> IPasswordConfig\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const password_config = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPasswordConfig, IError>> => {\n  return sdk.get<IPasswordConfig, IError>(\n    '/password_config',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Update password config.\n *\n * PATCH /password_config -> IPasswordConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWritePasswordConfig>\n * @param options one-time API call overrides\n *\n */\nexport const update_password_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWritePasswordConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPasswordConfig, IError | IValidationError>> => {\n  return sdk.patch<IPasswordConfig, IError | IValidationError>(\n    '/password_config',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Force all credentials_email users to reset their login passwords upon their next login.\n *\n * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const force_password_reset_at_next_login_for_all_users = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  return sdk.put<string, IError | IValidationError>(\n    '/password_config/force_password_reset_at_next_login_for_all_users',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the SAML configuration.\n *\n * Looker can be optionally configured to authenticate users against a SAML authentication server.\n * SAML setup requires coordination with an administrator of that server.\n *\n * Only Looker administrators can read and update the SAML configuration.\n *\n * Configuring SAML impacts authentication for all users. This configuration should be done carefully.\n *\n * Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n *\n * SAML is enabled or disabled for Looker using the **enabled** field.\n *\n * GET /saml_config -> ISamlConfig\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const saml_config = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISamlConfig, IError>> => {\n  return sdk.get<ISamlConfig, IError>('/saml_config', null, null, options)\n}\n\n/**\n * ### Update the SAML configuration.\n *\n * Configuring SAML impacts authentication for all users. This configuration should be done carefully.\n *\n * Only Looker administrators can read and update the SAML configuration.\n *\n * SAML is enabled or disabled for Looker using the **enabled** field.\n *\n * It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.\n *\n * PATCH /saml_config -> ISamlConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteSamlConfig>\n * @param options one-time API call overrides\n *\n */\nexport const update_saml_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteSamlConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISamlConfig, IError | IValidationError>> => {\n  return sdk.patch<ISamlConfig, IError | IValidationError>(\n    '/saml_config',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get a SAML test configuration by test_slug.\n *\n * GET /saml_test_configs/{test_slug} -> ISamlConfig\n *\n * @param sdk IAPIMethods implementation\n * @param test_slug Slug of test config\n * @param options one-time API call overrides\n *\n */\nexport const saml_test_config = async (\n  sdk: IAPIMethods,\n  test_slug: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISamlConfig, IError>> => {\n  test_slug = encodeParam(test_slug)\n  return sdk.get<ISamlConfig, IError>(\n    `/saml_test_configs/${test_slug}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Delete a SAML test configuration.\n *\n * DELETE /saml_test_configs/{test_slug} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param test_slug Slug of test config\n * @param options one-time API call overrides\n *\n */\nexport const delete_saml_test_config = async (\n  sdk: IAPIMethods,\n  test_slug: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  test_slug = encodeParam(test_slug)\n  return sdk.delete<string, IError>(\n    `/saml_test_configs/${test_slug}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a SAML test configuration.\n *\n * POST /saml_test_configs -> ISamlConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteSamlConfig>\n * @param options one-time API call overrides\n *\n */\nexport const create_saml_test_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteSamlConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISamlConfig, IError | IValidationError>> => {\n  return sdk.post<ISamlConfig, IError | IValidationError>(\n    '/saml_test_configs',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Parse the given xml as a SAML IdP metadata document and return the result.\n *\n * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult\n *\n * @param sdk IAPIMethods implementation\n * @param body string\n * @param options one-time API call overrides\n *\n */\nexport const parse_saml_idp_metadata = async (\n  sdk: IAPIMethods,\n  body: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISamlMetadataParseResult, IError>> => {\n  return sdk.post<ISamlMetadataParseResult, IError>(\n    '/parse_saml_idp_metadata',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result.\n * Note that this requires that the url be public or at least at a location where the Looker instance\n * can fetch it without requiring any special authentication.\n *\n * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult\n *\n * @param sdk IAPIMethods implementation\n * @param body string\n * @param options one-time API call overrides\n *\n */\nexport const fetch_and_parse_saml_idp_metadata = async (\n  sdk: IAPIMethods,\n  body: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISamlMetadataParseResult, IError>> => {\n  return sdk.post<ISamlMetadataParseResult, IError>(\n    '/fetch_and_parse_saml_idp_metadata',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get session config.\n *\n * GET /session_config -> ISessionConfig\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const session_config = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISessionConfig, IError>> => {\n  return sdk.get<ISessionConfig, IError>('/session_config', null, null, options)\n}\n\n/**\n * ### Update session config.\n *\n * PATCH /session_config -> ISessionConfig\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteSessionConfig>\n * @param options one-time API call overrides\n *\n */\nexport const update_session_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteSessionConfig>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISessionConfig, IError | IValidationError>> => {\n  return sdk.patch<ISessionConfig, IError | IValidationError>(\n    '/session_config',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get Support Access Allowlist Users\n *\n * Returns the users that have been added to the Support Access Allowlist\n *\n * GET /support_access/allowlist -> ISupportAccessAllowlistEntry[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const get_support_access_allowlist_entries = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISupportAccessAllowlistEntry[], IError>> => {\n  return sdk.get<ISupportAccessAllowlistEntry[], IError>(\n    '/support_access/allowlist',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Add Support Access Allowlist Users\n *\n * Adds a list of emails to the Allowlist, using the provided reason\n *\n * POST /support_access/allowlist -> ISupportAccessAllowlistEntry[]\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ISupportAccessAddEntries>\n * @param options one-time API call overrides\n *\n */\nexport const add_support_access_allowlist_entries = async (\n  sdk: IAPIMethods,\n  body: Partial<ISupportAccessAddEntries>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<ISupportAccessAllowlistEntry[], IError | IValidationError>\n> => {\n  return sdk.post<ISupportAccessAllowlistEntry[], IError | IValidationError>(\n    '/support_access/allowlist',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete Support Access Allowlist User\n *\n * Deletes the specified Allowlist Entry Id\n *\n * DELETE /support_access/allowlist/{entry_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param entry_id Id of Allowlist Entry\n * @param options one-time API call overrides\n *\n */\nexport const delete_support_access_allowlist_entry = async (\n  sdk: IAPIMethods,\n  entry_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  entry_id = encodeParam(entry_id)\n  return sdk.delete<string, IError>(\n    `/support_access/allowlist/${entry_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Enable Support Access\n *\n * Enables Support Access for the provided duration\n *\n * PUT /support_access/enable -> ISupportAccessStatus\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ISupportAccessEnable>\n * @param options one-time API call overrides\n *\n */\nexport const enable_support_access = async (\n  sdk: IAPIMethods,\n  body: Partial<ISupportAccessEnable>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISupportAccessStatus, IError | IValidationError>> => {\n  return sdk.put<ISupportAccessStatus, IError | IValidationError>(\n    '/support_access/enable',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Disable Support Access\n *\n * Disables Support Access immediately\n *\n * PUT /support_access/disable -> ISupportAccessStatus\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const disable_support_access = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISupportAccessStatus, IError>> => {\n  return sdk.put<ISupportAccessStatus, IError>(\n    '/support_access/disable',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Support Access Status\n *\n * Returns the current Support Access Status\n *\n * GET /support_access/status -> ISupportAccessStatus\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const support_access_status = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISupportAccessStatus, IError>> => {\n  return sdk.get<ISupportAccessStatus, IError>(\n    '/support_access/status',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get currently locked-out users.\n *\n * GET /user_login_lockouts -> IUserLoginLockout[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Include only these fields in the response\n * @param options one-time API call overrides\n *\n */\nexport const all_user_login_lockouts = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserLoginLockout[], IError>> => {\n  return sdk.get<IUserLoginLockout[], IError>(\n    '/user_login_lockouts',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search currently locked-out users.\n *\n * GET /user_login_lockouts/search -> IUserLoginLockout[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchUserLoginLockouts\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_user_login_lockouts = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchUserLoginLockouts,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserLoginLockout[], IError>> => {\n  return sdk.get<IUserLoginLockout[], IError>(\n    '/user_login_lockouts/search',\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      auth_type: request.auth_type,\n      full_name: request.full_name,\n      email: request.email,\n      remote_id: request.remote_id,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Removes login lockout for the associated user.\n *\n * DELETE /user_login_lockout/{key} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param key The key associated with the locked user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_login_lockout = async (\n  sdk: IAPIMethods,\n  key: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  key = encodeParam(key)\n  return sdk.delete<string, IError>(\n    `/user_login_lockout/${key}`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Auth: Manage User Authentication Configuration\n\n//#region Board: Manage Boards\n\n/**\n * ### Get information about all boards.\n *\n * GET /boards -> IBoard[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_boards = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoard[], IError>> => {\n  return sdk.get<IBoard[], IError>('/boards', { fields }, null, options)\n}\n\n/**\n * ### Create a new board.\n *\n * POST /boards -> IBoard\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteBoard>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_board = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteBoard>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoard, IError | IValidationError>> => {\n  return sdk.post<IBoard, IError | IValidationError>(\n    '/boards',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Search Boards\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /boards/search -> IBoard[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchBoards\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_boards = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchBoards,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoard[], IError>> => {\n  return sdk.get<IBoard[], IError>(\n    '/boards/search',\n    {\n      title: request.title,\n      created_at: request.created_at,\n      first_name: request.first_name,\n      last_name: request.last_name,\n      fields: request.fields,\n      favorited: request.favorited,\n      creator_id: request.creator_id,\n      sorts: request.sorts,\n      page: request.page,\n      per_page: request.per_page,\n      offset: request.offset,\n      limit: request.limit,\n      filter_or: request.filter_or,\n      permission: request.permission,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about a board.\n *\n * GET /boards/{board_id} -> IBoard\n *\n * @param sdk IAPIMethods implementation\n * @param board_id Id of board\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const board = async (\n  sdk: IAPIMethods,\n  board_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoard, IError>> => {\n  board_id = encodeParam(board_id)\n  return sdk.get<IBoard, IError>(\n    `/boards/${board_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a board definition.\n *\n * PATCH /boards/{board_id} -> IBoard\n *\n * @param sdk IAPIMethods implementation\n * @param board_id Id of board\n * @param body Partial<IWriteBoard>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_board = async (\n  sdk: IAPIMethods,\n  board_id: string,\n  body: Partial<IWriteBoard>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoard, IError | IValidationError>> => {\n  board_id = encodeParam(board_id)\n  return sdk.patch<IBoard, IError | IValidationError>(\n    `/boards/${board_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a board.\n *\n * DELETE /boards/{board_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param board_id Id of board\n * @param options one-time API call overrides\n *\n */\nexport const delete_board = async (\n  sdk: IAPIMethods,\n  board_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  board_id = encodeParam(board_id)\n  return sdk.delete<string, IError>(`/boards/${board_id}`, null, null, options)\n}\n\n/**\n * ### Get information about all board items.\n *\n * GET /board_items -> IBoardItem[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllBoardItems\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_board_items = async (\n  sdk: IAPIMethods,\n  request: IRequestAllBoardItems,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardItem[], IError>> => {\n  return sdk.get<IBoardItem[], IError>(\n    '/board_items',\n    {\n      fields: request.fields,\n      sorts: request.sorts,\n      board_section_id: request.board_section_id,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new board item.\n *\n * POST /board_items -> IBoardItem\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteBoardItem>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_board_item = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteBoardItem>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardItem, IError | IValidationError>> => {\n  return sdk.post<IBoardItem, IError | IValidationError>(\n    '/board_items',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a board item.\n *\n * GET /board_items/{board_item_id} -> IBoardItem\n *\n * @param sdk IAPIMethods implementation\n * @param board_item_id Id of board item\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const board_item = async (\n  sdk: IAPIMethods,\n  board_item_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardItem, IError>> => {\n  board_item_id = encodeParam(board_item_id)\n  return sdk.get<IBoardItem, IError>(\n    `/board_items/${board_item_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a board item definition.\n *\n * PATCH /board_items/{board_item_id} -> IBoardItem\n *\n * @param sdk IAPIMethods implementation\n * @param board_item_id Id of board item\n * @param body Partial<IWriteBoardItem>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_board_item = async (\n  sdk: IAPIMethods,\n  board_item_id: string,\n  body: Partial<IWriteBoardItem>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardItem, IError | IValidationError>> => {\n  board_item_id = encodeParam(board_item_id)\n  return sdk.patch<IBoardItem, IError | IValidationError>(\n    `/board_items/${board_item_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a board item.\n *\n * DELETE /board_items/{board_item_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param board_item_id Id of board item\n * @param options one-time API call overrides\n *\n */\nexport const delete_board_item = async (\n  sdk: IAPIMethods,\n  board_item_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  board_item_id = encodeParam(board_item_id)\n  return sdk.delete<string, IError>(\n    `/board_items/${board_item_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all board sections.\n *\n * GET /board_sections -> IBoardSection[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllBoardSections\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_board_sections = async (\n  sdk: IAPIMethods,\n  request: IRequestAllBoardSections,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardSection[], IError>> => {\n  return sdk.get<IBoardSection[], IError>(\n    '/board_sections',\n    { fields: request.fields, sorts: request.sorts },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new board section.\n *\n * POST /board_sections -> IBoardSection\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteBoardSection>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_board_section = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteBoardSection>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardSection, IError | IValidationError>> => {\n  return sdk.post<IBoardSection, IError | IValidationError>(\n    '/board_sections',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a board section.\n *\n * GET /board_sections/{board_section_id} -> IBoardSection\n *\n * @param sdk IAPIMethods implementation\n * @param board_section_id Id of board section\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const board_section = async (\n  sdk: IAPIMethods,\n  board_section_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardSection, IError>> => {\n  board_section_id = encodeParam(board_section_id)\n  return sdk.get<IBoardSection, IError>(\n    `/board_sections/${board_section_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a board section definition.\n *\n * PATCH /board_sections/{board_section_id} -> IBoardSection\n *\n * @param sdk IAPIMethods implementation\n * @param board_section_id Id of board section\n * @param body Partial<IWriteBoardSection>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_board_section = async (\n  sdk: IAPIMethods,\n  board_section_id: string,\n  body: Partial<IWriteBoardSection>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBoardSection, IError | IValidationError>> => {\n  board_section_id = encodeParam(board_section_id)\n  return sdk.patch<IBoardSection, IError | IValidationError>(\n    `/board_sections/${board_section_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a board section.\n *\n * DELETE /board_sections/{board_section_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param board_section_id Id of board section\n * @param options one-time API call overrides\n *\n */\nexport const delete_board_section = async (\n  sdk: IAPIMethods,\n  board_section_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  board_section_id = encodeParam(board_section_id)\n  return sdk.delete<string, IError>(\n    `/board_sections/${board_section_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Board: Manage Boards\n\n//#region ColorCollection: Manage Color Collections\n\n/**\n * ### Get an array of all existing Color Collections\n * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n *\n * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n *\n * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n *\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * GET /color_collections -> IColorCollection[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_color_collections = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection[], IError>> => {\n  return sdk.get<IColorCollection[], IError>(\n    '/color_collections',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a custom color collection with the specified information\n *\n * Creates a new custom color collection object, returning the details, including the created id.\n *\n * **Update** an existing color collection with [Update Color Collection](#!/ColorCollection/update_color_collection)\n *\n * **Permanently delete** an existing custom color collection with [Delete Color Collection](#!/ColorCollection/delete_color_collection)\n *\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * POST /color_collections -> IColorCollection\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteColorCollection>\n * @param options one-time API call overrides\n *\n */\nexport const create_color_collection = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteColorCollection>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection, IError | IValidationError>> => {\n  return sdk.post<IColorCollection, IError | IValidationError>(\n    '/color_collections',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get an array of all existing **Custom** Color Collections\n * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n *\n * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n *\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * GET /color_collections/custom -> IColorCollection[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const color_collections_custom = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection[], IError>> => {\n  return sdk.get<IColorCollection[], IError>(\n    '/color_collections/custom',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get an array of all existing **Standard** Color Collections\n * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n *\n * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n *\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * GET /color_collections/standard -> IColorCollection[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const color_collections_standard = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection[], IError>> => {\n  return sdk.get<IColorCollection[], IError>(\n    '/color_collections/standard',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the default color collection\n *\n * Use this to retrieve the default Color Collection.\n *\n * Set the default color collection with [ColorCollection](#!/ColorCollection/set_default_color_collection)\n *\n * GET /color_collections/default -> IColorCollection\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const default_color_collection = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection, IError>> => {\n  return sdk.get<IColorCollection, IError>(\n    '/color_collections/default',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Set the global default Color Collection by ID\n *\n * Returns the new specified default Color Collection object.\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * PUT /color_collections/default -> IColorCollection\n *\n * @param sdk IAPIMethods implementation\n * @param collection_id ID of color collection to set as default\n * @param options one-time API call overrides\n *\n */\nexport const set_default_color_collection = async (\n  sdk: IAPIMethods,\n  collection_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection, IError | IValidationError>> => {\n  return sdk.put<IColorCollection, IError | IValidationError>(\n    '/color_collections/default',\n    { collection_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get a Color Collection by ID\n *\n * Use this to retrieve a specific Color Collection.\n * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n *\n * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n *\n * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n *\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * GET /color_collections/{collection_id} -> IColorCollection\n *\n * @param sdk IAPIMethods implementation\n * @param collection_id Id of Color Collection\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const color_collection = async (\n  sdk: IAPIMethods,\n  collection_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection, IError>> => {\n  collection_id = encodeParam(collection_id)\n  return sdk.get<IColorCollection, IError>(\n    `/color_collections/${collection_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a custom color collection by id.\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * PATCH /color_collections/{collection_id} -> IColorCollection\n *\n * @param sdk IAPIMethods implementation\n * @param collection_id Id of Custom Color Collection\n * @param body Partial<IWriteColorCollection>\n * @param options one-time API call overrides\n *\n */\nexport const update_color_collection = async (\n  sdk: IAPIMethods,\n  collection_id: string,\n  body: Partial<IWriteColorCollection>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColorCollection, IError | IValidationError>> => {\n  collection_id = encodeParam(collection_id)\n  return sdk.patch<IColorCollection, IError | IValidationError>(\n    `/color_collections/${collection_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a custom color collection by id\n *\n * This operation permanently deletes the identified **Custom** color collection.\n *\n * **Standard** color collections cannot be deleted\n *\n * Because multiple color collections can have the same label, they must be deleted by ID, not name.\n * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n *\n * DELETE /color_collections/{collection_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param collection_id Id of Color Collection\n * @param options one-time API call overrides\n *\n */\nexport const delete_color_collection = async (\n  sdk: IAPIMethods,\n  collection_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  collection_id = encodeParam(collection_id)\n  return sdk.delete<string, IError>(\n    `/color_collections/${collection_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion ColorCollection: Manage Color Collections\n\n//#region Config: Manage General Configuration\n\n/**\n * Get the current Cloud Storage Configuration.\n *\n * GET /cloud_storage -> IBackupConfiguration\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const cloud_storage_configuration = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBackupConfiguration, IError>> => {\n  return sdk.get<IBackupConfiguration, IError>(\n    '/cloud_storage',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Update the current Cloud Storage Configuration.\n *\n * PATCH /cloud_storage -> IBackupConfiguration\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteBackupConfiguration>\n * @param options one-time API call overrides\n *\n */\nexport const update_cloud_storage_configuration = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteBackupConfiguration>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IBackupConfiguration, IError | IValidationError>> => {\n  return sdk.patch<IBackupConfiguration, IError | IValidationError>(\n    '/cloud_storage',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Looker Configuration Refresh\n *\n * This is an endpoint for manually calling refresh on Configuration manager.\n *\n * PUT /configuration_force_refresh -> any\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const configuration_force_refresh = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<any, IError | IValidationError>> => {\n  return sdk.put<any, IError | IValidationError>(\n    '/configuration_force_refresh',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the current status and content of custom welcome emails\n *\n * GET /custom_welcome_email -> ICustomWelcomeEmail\n *\n * @deprecated\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const custom_welcome_email = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICustomWelcomeEmail, IError>> => {\n  return sdk.get<ICustomWelcomeEmail, IError>(\n    '/custom_welcome_email',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Update custom welcome email setting and values. Optionally send a test email with the new content to the currently logged in user.\n *\n * PATCH /custom_welcome_email -> ICustomWelcomeEmail\n *\n * @deprecated\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ICustomWelcomeEmail>\n * @param send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving\n * @param options one-time API call overrides\n *\n */\nexport const update_custom_welcome_email = async (\n  sdk: IAPIMethods,\n  body: Partial<ICustomWelcomeEmail>,\n  send_test_welcome_email?: boolean,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICustomWelcomeEmail, IError | IValidationError>> => {\n  return sdk.patch<ICustomWelcomeEmail, IError | IValidationError>(\n    '/custom_welcome_email',\n    { send_test_welcome_email },\n    body,\n    options\n  )\n}\n\n/**\n * Requests to this endpoint will send a welcome email with the custom content provided in the body to the currently logged in user.\n *\n * PUT /custom_welcome_email_test -> IWelcomeEmailTest\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWelcomeEmailTest>\n * @param options one-time API call overrides\n *\n */\nexport const update_custom_welcome_email_test = async (\n  sdk: IAPIMethods,\n  body: Partial<IWelcomeEmailTest>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IWelcomeEmailTest, IError | IValidationError>> => {\n  return sdk.put<IWelcomeEmailTest, IError | IValidationError>(\n    '/custom_welcome_email_test',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Retrieve the value for whether or not digest emails is enabled\n *\n * GET /digest_emails_enabled -> IDigestEmails\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const digest_emails_enabled = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDigestEmails, IError>> => {\n  return sdk.get<IDigestEmails, IError>(\n    '/digest_emails_enabled',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the setting for enabling/disabling digest emails\n *\n * PATCH /digest_emails_enabled -> IDigestEmails\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IDigestEmails>\n * @param options one-time API call overrides\n *\n */\nexport const update_digest_emails_enabled = async (\n  sdk: IAPIMethods,\n  body: Partial<IDigestEmails>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDigestEmails, IError | IValidationError>> => {\n  return sdk.patch<IDigestEmails, IError | IValidationError>(\n    '/digest_emails_enabled',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Trigger the generation of digest email records and send them to Looker's internal system. This does not send\n * any actual emails, it generates records containing content which may be of interest for users who have become inactive.\n * Emails will be sent at a later time from Looker's internal system if the Digest Emails feature is enabled in settings.\n *\n * POST /digest_email_send -> IDigestEmailSend\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const create_digest_email_send = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDigestEmailSend, IError>> => {\n  return sdk.post<IDigestEmailSend, IError>(\n    '/digest_email_send',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Egress IP Addresses\n *\n * Returns the list of public egress IP Addresses for a hosted customer's instance\n *\n * GET /public_egress_ip_addresses -> IEgressIpAddresses\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const public_egress_ip_addresses = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IEgressIpAddresses, IError>> => {\n  return sdk.get<IEgressIpAddresses, IError>(\n    '/public_egress_ip_addresses',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Set the menu item name and content for internal help resources\n *\n * GET /internal_help_resources_content -> IInternalHelpResourcesContent\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const internal_help_resources_content = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IInternalHelpResourcesContent, IError>> => {\n  return sdk.get<IInternalHelpResourcesContent, IError>(\n    '/internal_help_resources_content',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Update internal help resources content\n *\n * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteInternalHelpResourcesContent>\n * @param options one-time API call overrides\n *\n */\nexport const update_internal_help_resources_content = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteInternalHelpResourcesContent>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IInternalHelpResourcesContent, IError | IValidationError>\n> => {\n  return sdk.patch<IInternalHelpResourcesContent, IError | IValidationError>(\n    '/internal_help_resources_content',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get and set the options for internal help resources\n *\n * GET /internal_help_resources_enabled -> IInternalHelpResources\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const internal_help_resources = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IInternalHelpResources, IError>> => {\n  return sdk.get<IInternalHelpResources, IError>(\n    '/internal_help_resources_enabled',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Update internal help resources settings\n *\n * PATCH /internal_help_resources -> IInternalHelpResources\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteInternalHelpResources>\n * @param options one-time API call overrides\n *\n */\nexport const update_internal_help_resources = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteInternalHelpResources>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IInternalHelpResources, IError | IValidationError>> => {\n  return sdk.patch<IInternalHelpResources, IError | IValidationError>(\n    '/internal_help_resources',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get all legacy features.\n *\n * GET /legacy_features -> ILegacyFeature[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_legacy_features = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILegacyFeature[], IError>> => {\n  return sdk.get<ILegacyFeature[], IError>(\n    '/legacy_features',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the legacy feature with a specific id.\n *\n * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature\n *\n * @param sdk IAPIMethods implementation\n * @param legacy_feature_id id of legacy feature\n * @param options one-time API call overrides\n *\n */\nexport const legacy_feature = async (\n  sdk: IAPIMethods,\n  legacy_feature_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILegacyFeature, IError>> => {\n  legacy_feature_id = encodeParam(legacy_feature_id)\n  return sdk.get<ILegacyFeature, IError>(\n    `/legacy_features/${legacy_feature_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Update information about the legacy feature with a specific id.\n *\n * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature\n *\n * @param sdk IAPIMethods implementation\n * @param legacy_feature_id id of legacy feature\n * @param body Partial<IWriteLegacyFeature>\n * @param options one-time API call overrides\n *\n */\nexport const update_legacy_feature = async (\n  sdk: IAPIMethods,\n  legacy_feature_id: string,\n  body: Partial<IWriteLegacyFeature>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILegacyFeature, IError | IValidationError>> => {\n  legacy_feature_id = encodeParam(legacy_feature_id)\n  return sdk.patch<ILegacyFeature, IError | IValidationError>(\n    `/legacy_features/${legacy_feature_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get a list of locales that Looker supports.\n *\n * GET /locales -> ILocale[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_locales = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILocale[], IError>> => {\n  return sdk.get<ILocale[], IError>('/locales', null, null, options)\n}\n\n/**\n * ### Get all mobile settings.\n *\n * GET /mobile/settings -> IMobileSettings\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const mobile_settings = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMobileSettings, IError>> => {\n  return sdk.get<IMobileSettings, IError>(\n    '/mobile/settings',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Looker Settings\n *\n * Available settings are:\n *  - allow_user_timezones\n *  - custom_welcome_email\n *  - data_connector_default_enabled\n *  - extension_framework_enabled\n *  - extension_load_url_enabled\n *  - marketplace_auto_install_enabled\n *  - marketplace_enabled\n *  - onboarding_enabled\n *  - privatelabel_configuration\n *  - timezone\n *\n * GET /setting -> ISetting\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const get_setting = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISetting, IError | IValidationError>> => {\n  return sdk.get<ISetting, IError | IValidationError>(\n    '/setting',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Configure Looker Settings\n *\n * Available settings are:\n *  - allow_user_timezones\n *  - custom_welcome_email\n *  - data_connector_default_enabled\n *  - extension_framework_enabled\n *  - extension_load_url_enabled\n *  - marketplace_auto_install_enabled\n *  - marketplace_enabled\n *  - onboarding_enabled\n *  - privatelabel_configuration\n *  - timezone\n *\n * See the `Setting` type for more information on the specific values that can be configured.\n *\n * PATCH /setting -> ISetting\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteSetting>\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const set_setting = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteSetting>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISetting, IError | IValidationError>> => {\n  return sdk.patch<ISetting, IError | IValidationError>(\n    '/setting',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Configure SMTP Settings\n *   This API allows users to configure the SMTP settings on the Looker instance.\n *   This API is only supported in the OEM jar. Additionally, only admin users are authorised to call this API.\n *\n * POST /smtp_settings -> void\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ISmtpSettings>\n * @param options one-time API call overrides\n *\n */\nexport const set_smtp_settings = async (\n  sdk: IAPIMethods,\n  body: Partial<ISmtpSettings>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError | IValidationError>> => {\n  return sdk.post<void, IError | IValidationError>(\n    '/smtp_settings',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get current SMTP status.\n *\n * GET /smtp_status -> ISmtpStatus\n *\n * @param sdk IAPIMethods implementation\n * @param fields Include only these fields in the response\n * @param options one-time API call overrides\n *\n */\nexport const smtp_status = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISmtpStatus, IError>> => {\n  return sdk.get<ISmtpStatus, IError>('/smtp_status', { fields }, null, options)\n}\n\n/**\n * ### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).\n *\n * GET /timezones -> ITimezone[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_timezones = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITimezone[], IError>> => {\n  return sdk.get<ITimezone[], IError>('/timezones', null, null, options)\n}\n\n/**\n * ### Get information about all API versions supported by this Looker instance.\n *\n * GET /versions -> IApiVersion\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const versions = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IApiVersion, IError>> => {\n  return sdk.get<IApiVersion, IError>('/versions', { fields }, null, options)\n}\n\n/**\n * ### Get an API specification for this Looker instance.\n *\n * The specification is returned as a JSON document in Swagger 2.x format\n *\n * GET /api_spec/{api_version}/{specification} -> any\n *\n * @param sdk IAPIMethods implementation\n * @param api_version API version\n * @param specification Specification name. Typically, this is \"swagger.json\"\n * @param options one-time API call overrides\n *\n */\nexport const api_spec = async (\n  sdk: IAPIMethods,\n  api_version: string,\n  specification: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<any, IError>> => {\n  api_version = encodeParam(api_version)\n  specification = encodeParam(specification)\n  return sdk.get<any, IError>(\n    `/api_spec/${api_version}/${specification}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### This feature is enabled only by special license.\n * ### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.\n *\n * GET /whitelabel_configuration -> IWhitelabelConfiguration\n *\n * @deprecated\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const whitelabel_configuration = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IWhitelabelConfiguration, IError>> => {\n  return sdk.get<IWhitelabelConfiguration, IError>(\n    '/whitelabel_configuration',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the whitelabel configuration\n *\n * PUT /whitelabel_configuration -> IWhitelabelConfiguration\n *\n * @deprecated\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteWhitelabelConfiguration>\n * @param options one-time API call overrides\n *\n */\nexport const update_whitelabel_configuration = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteWhitelabelConfiguration>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IWhitelabelConfiguration, IError | IValidationError>\n> => {\n  return sdk.put<IWhitelabelConfiguration, IError | IValidationError>(\n    '/whitelabel_configuration',\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion Config: Manage General Configuration\n\n//#region Connection: Manage Database Connections\n\n/**\n * ### Get information about all connections.\n *\n * GET /connections -> IDBConnection[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_connections = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDBConnection[], IError>> => {\n  return sdk.get<IDBConnection[], IError>(\n    '/connections',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a connection using the specified configuration.\n *\n * POST /connections -> IDBConnection\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteDBConnection>\n * @param options one-time API call overrides\n *\n */\nexport const create_connection = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteDBConnection>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDBConnection, IError | IValidationError>> => {\n  return sdk.post<IDBConnection, IError | IValidationError>(\n    '/connections',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a connection.\n *\n * GET /connections/{connection_name} -> IDBConnection\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const connection = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDBConnection, IError>> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.get<IDBConnection, IError>(\n    `/connections/${connection_name}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a connection using the specified configuration.\n *\n * PATCH /connections/{connection_name} -> IDBConnection\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param body Partial<IWriteDBConnection>\n * @param options one-time API call overrides\n *\n */\nexport const update_connection = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  body: Partial<IWriteDBConnection>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDBConnection, IError | IValidationError>> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.patch<IDBConnection, IError | IValidationError>(\n    `/connections/${connection_name}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a connection.\n *\n * DELETE /connections/{connection_name} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param options one-time API call overrides\n *\n */\nexport const delete_connection = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.delete<string, IError>(\n    `/connections/${connection_name}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Delete a connection override.\n *\n * DELETE /connections/{connection_name}/connection_override/{override_context} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param override_context Context of connection override\n * @param options one-time API call overrides\n *\n */\nexport const delete_connection_override = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  override_context: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  connection_name = encodeParam(connection_name)\n  override_context = encodeParam(override_context)\n  return sdk.delete<string, IError | IValidationError>(\n    `/connections/${connection_name}/connection_override/${override_context}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Test an existing connection.\n *\n * Note that a connection's 'dialect' property has a 'connection_tests' property that lists the\n * specific types of tests that the connection supports.\n *\n * This API is rate limited.\n *\n * Unsupported tests in the request will be ignored.\n *\n * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param tests Array of names of tests to run\n * @param options one-time API call overrides\n *\n */\nexport const test_connection = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  tests?: DelimArray<string>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IDBConnectionTestResult[], IError | IValidationError>\n> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.put<IDBConnectionTestResult[], IError | IValidationError>(\n    `/connections/${connection_name}/test`,\n    { tests },\n    null,\n    options\n  )\n}\n\n/**\n * ### Test a connection configuration.\n *\n * Note that a connection's 'dialect' property has a 'connection_tests' property that lists the\n * specific types of tests that the connection supports.\n *\n * This API is rate limited.\n *\n * Unsupported tests in the request will be ignored.\n *\n * PUT /connections/test -> IDBConnectionTestResult[]\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteDBConnection>\n * @param tests Array of names of tests to run\n * @param options one-time API call overrides\n *\n */\nexport const test_connection_config = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteDBConnection>,\n  tests?: DelimArray<string>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDBConnectionTestResult[], IError>> => {\n  return sdk.put<IDBConnectionTestResult[], IError>(\n    '/connections/test',\n    { tests },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about all dialects.\n *\n * GET /dialect_info -> IDialectInfo[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_dialect_infos = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDialectInfo[], IError>> => {\n  return sdk.get<IDialectInfo[], IError>(\n    '/dialect_info',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get all External OAuth Applications.\n *\n * This is an OAuth Application which Looker uses to access external systems.\n *\n * GET /external_oauth_applications -> IExternalOauthApplication[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllExternalOauthApplications\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_external_oauth_applications = async (\n  sdk: IAPIMethods,\n  request: IRequestAllExternalOauthApplications,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IExternalOauthApplication[], IError>> => {\n  return sdk.get<IExternalOauthApplication[], IError>(\n    '/external_oauth_applications',\n    { name: request.name, client_id: request.client_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create an OAuth Application using the specified configuration.\n *\n * This is an OAuth Application which Looker uses to access external systems.\n *\n * POST /external_oauth_applications -> IExternalOauthApplication\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteExternalOauthApplication>\n * @param options one-time API call overrides\n *\n */\nexport const create_external_oauth_application = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteExternalOauthApplication>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IExternalOauthApplication, IError | IValidationError>\n> => {\n  return sdk.post<IExternalOauthApplication, IError | IValidationError>(\n    '/external_oauth_applications',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Create OAuth User state.\n *\n * POST /external_oauth_applications/user_state -> ICreateOAuthApplicationUserStateResponse\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ICreateOAuthApplicationUserStateRequest>\n * @param options one-time API call overrides\n *\n */\nexport const create_oauth_application_user_state = async (\n  sdk: IAPIMethods,\n  body: Partial<ICreateOAuthApplicationUserStateRequest>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<\n    ICreateOAuthApplicationUserStateResponse,\n    IError | IValidationError\n  >\n> => {\n  return sdk.post<\n    ICreateOAuthApplicationUserStateResponse,\n    IError | IValidationError\n  >('/external_oauth_applications/user_state', null, body, options)\n}\n\n/**\n * ### Get information about all SSH Servers.\n *\n * GET /ssh_servers -> ISshServer[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_ssh_servers = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshServer[], IError>> => {\n  return sdk.get<ISshServer[], IError>(\n    '/ssh_servers',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create an SSH Server.\n *\n * POST /ssh_servers -> ISshServer\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteSshServer>\n * @param options one-time API call overrides\n *\n */\nexport const create_ssh_server = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteSshServer>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshServer, IError | IValidationError>> => {\n  return sdk.post<ISshServer, IError | IValidationError>(\n    '/ssh_servers',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about an SSH Server.\n *\n * GET /ssh_server/{ssh_server_id} -> ISshServer\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_server_id Id of SSH Server\n * @param options one-time API call overrides\n *\n */\nexport const ssh_server = async (\n  sdk: IAPIMethods,\n  ssh_server_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshServer, IError>> => {\n  ssh_server_id = encodeParam(ssh_server_id)\n  return sdk.get<ISshServer, IError>(\n    `/ssh_server/${ssh_server_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Update an SSH Server.\n *\n * PATCH /ssh_server/{ssh_server_id} -> ISshServer\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_server_id Id of SSH Server\n * @param body Partial<IWriteSshServer>\n * @param options one-time API call overrides\n *\n */\nexport const update_ssh_server = async (\n  sdk: IAPIMethods,\n  ssh_server_id: string,\n  body: Partial<IWriteSshServer>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshServer, IError | IValidationError>> => {\n  ssh_server_id = encodeParam(ssh_server_id)\n  return sdk.patch<ISshServer, IError | IValidationError>(\n    `/ssh_server/${ssh_server_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete an SSH Server.\n *\n * DELETE /ssh_server/{ssh_server_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_server_id Id of SSH Server\n * @param options one-time API call overrides\n *\n */\nexport const delete_ssh_server = async (\n  sdk: IAPIMethods,\n  ssh_server_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  ssh_server_id = encodeParam(ssh_server_id)\n  return sdk.delete<string, IError>(\n    `/ssh_server/${ssh_server_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Test the SSH Server\n *\n * GET /ssh_server/{ssh_server_id}/test -> ISshServer\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_server_id Id of SSH Server\n * @param options one-time API call overrides\n *\n */\nexport const test_ssh_server = async (\n  sdk: IAPIMethods,\n  ssh_server_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshServer, IError>> => {\n  ssh_server_id = encodeParam(ssh_server_id)\n  return sdk.get<ISshServer, IError>(\n    `/ssh_server/${ssh_server_id}/test`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all SSH Tunnels.\n *\n * GET /ssh_tunnels -> ISshTunnel[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_ssh_tunnels = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshTunnel[], IError>> => {\n  return sdk.get<ISshTunnel[], IError>(\n    '/ssh_tunnels',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create an SSH Tunnel\n *\n * POST /ssh_tunnels -> ISshTunnel\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteSshTunnel>\n * @param options one-time API call overrides\n *\n */\nexport const create_ssh_tunnel = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteSshTunnel>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshTunnel, IError | IValidationError>> => {\n  return sdk.post<ISshTunnel, IError | IValidationError>(\n    '/ssh_tunnels',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about an SSH Tunnel.\n *\n * GET /ssh_tunnel/{ssh_tunnel_id} -> ISshTunnel\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_tunnel_id Id of SSH Tunnel\n * @param options one-time API call overrides\n *\n */\nexport const ssh_tunnel = async (\n  sdk: IAPIMethods,\n  ssh_tunnel_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshTunnel, IError>> => {\n  ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n  return sdk.get<ISshTunnel, IError>(\n    `/ssh_tunnel/${ssh_tunnel_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Update an SSH Tunnel\n *\n * PATCH /ssh_tunnel/{ssh_tunnel_id} -> ISshTunnel\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_tunnel_id Id of SSH Tunnel\n * @param body Partial<IWriteSshTunnel>\n * @param options one-time API call overrides\n *\n */\nexport const update_ssh_tunnel = async (\n  sdk: IAPIMethods,\n  ssh_tunnel_id: string,\n  body: Partial<IWriteSshTunnel>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshTunnel, IError | IValidationError>> => {\n  ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n  return sdk.patch<ISshTunnel, IError | IValidationError>(\n    `/ssh_tunnel/${ssh_tunnel_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete an SSH Tunnel\n *\n * DELETE /ssh_tunnel/{ssh_tunnel_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_tunnel_id Id of SSH Tunnel\n * @param options one-time API call overrides\n *\n */\nexport const delete_ssh_tunnel = async (\n  sdk: IAPIMethods,\n  ssh_tunnel_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n  return sdk.delete<string, IError>(\n    `/ssh_tunnel/${ssh_tunnel_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Test the SSH Tunnel\n *\n * GET /ssh_tunnel/{ssh_tunnel_id}/test -> ISshTunnel\n *\n * @param sdk IAPIMethods implementation\n * @param ssh_tunnel_id Id of SSH Tunnel\n * @param options one-time API call overrides\n *\n */\nexport const test_ssh_tunnel = async (\n  sdk: IAPIMethods,\n  ssh_tunnel_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshTunnel, IError>> => {\n  ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n  return sdk.get<ISshTunnel, IError>(\n    `/ssh_tunnel/${ssh_tunnel_id}/test`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the SSH public key\n *\n * Get the public key created for this instance to identify itself to a remote SSH server.\n *\n * GET /ssh_public_key -> ISshPublicKey\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const ssh_public_key = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISshPublicKey, IError>> => {\n  return sdk.get<ISshPublicKey, IError>('/ssh_public_key', null, null, options)\n}\n\n//#endregion Connection: Manage Database Connections\n\n//#region Content: Manage Content\n\n/**\n * ### Search Favorite Content\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /content_favorite/search -> IContentFavorite[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchContentFavorites\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_content_favorites = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchContentFavorites,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentFavorite[], IError>> => {\n  return sdk.get<IContentFavorite[], IError>(\n    '/content_favorite/search',\n    {\n      id: request.id,\n      user_id: request.user_id,\n      content_metadata_id: request.content_metadata_id,\n      dashboard_id: request.dashboard_id,\n      look_id: request.look_id,\n      board_id: request.board_id,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      fields: request.fields,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get favorite content by its id\n *\n * GET /content_favorite/{content_favorite_id} -> IContentFavorite\n *\n * @param sdk IAPIMethods implementation\n * @param content_favorite_id Id of favorite content\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const content_favorite = async (\n  sdk: IAPIMethods,\n  content_favorite_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentFavorite, IError>> => {\n  content_favorite_id = encodeParam(content_favorite_id)\n  return sdk.get<IContentFavorite, IError>(\n    `/content_favorite/${content_favorite_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Delete favorite content\n *\n * DELETE /content_favorite/{content_favorite_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param content_favorite_id Id of favorite content\n * @param options one-time API call overrides\n *\n */\nexport const delete_content_favorite = async (\n  sdk: IAPIMethods,\n  content_favorite_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  content_favorite_id = encodeParam(content_favorite_id)\n  return sdk.delete<string, IError>(\n    `/content_favorite/${content_favorite_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Create favorite content\n *\n * POST /content_favorite -> IContentFavorite\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteContentFavorite>\n * @param options one-time API call overrides\n *\n */\nexport const create_content_favorite = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteContentFavorite>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentFavorite, IError | IValidationError>> => {\n  return sdk.post<IContentFavorite, IError | IValidationError>(\n    '/content_favorite',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about all content metadata in a space.\n *\n * GET /content_metadata -> IContentMeta[]\n *\n * @param sdk IAPIMethods implementation\n * @param parent_id Parent space of content.\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_content_metadatas = async (\n  sdk: IAPIMethods,\n  parent_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentMeta[], IError>> => {\n  return sdk.get<IContentMeta[], IError>(\n    '/content_metadata',\n    { parent_id, fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about an individual content metadata record.\n *\n * GET /content_metadata/{content_metadata_id} -> IContentMeta\n *\n * @param sdk IAPIMethods implementation\n * @param content_metadata_id Id of content metadata\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const content_metadata = async (\n  sdk: IAPIMethods,\n  content_metadata_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentMeta, IError>> => {\n  content_metadata_id = encodeParam(content_metadata_id)\n  return sdk.get<IContentMeta, IError>(\n    `/content_metadata/${content_metadata_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Move a piece of content.\n *\n * PATCH /content_metadata/{content_metadata_id} -> IContentMeta\n *\n * @param sdk IAPIMethods implementation\n * @param content_metadata_id Id of content metadata\n * @param body Partial<IWriteContentMeta>\n * @param options one-time API call overrides\n *\n */\nexport const update_content_metadata = async (\n  sdk: IAPIMethods,\n  content_metadata_id: string,\n  body: Partial<IWriteContentMeta>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentMeta, IError | IValidationError>> => {\n  content_metadata_id = encodeParam(content_metadata_id)\n  return sdk.patch<IContentMeta, IError | IValidationError>(\n    `/content_metadata/${content_metadata_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### All content metadata access records for a content metadata item.\n *\n * GET /content_metadata_access -> IContentMetaGroupUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param content_metadata_id Id of content metadata\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_content_metadata_accesses = async (\n  sdk: IAPIMethods,\n  content_metadata_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentMetaGroupUser[], IError>> => {\n  return sdk.get<IContentMetaGroupUser[], IError>(\n    '/content_metadata_access',\n    { content_metadata_id, fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create content metadata access.\n *\n * POST /content_metadata_access -> IContentMetaGroupUser\n *\n * @param sdk IAPIMethods implementation\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param send_boards_notification_email Optionally sends notification email when granting access to a board.\n * @param options one-time API call overrides\n *\n */\nexport const create_content_metadata_access = async (\n  sdk: IAPIMethods,\n  body: Partial<IContentMetaGroupUser>,\n  send_boards_notification_email?: boolean,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentMetaGroupUser, IError | IValidationError>> => {\n  return sdk.post<IContentMetaGroupUser, IError | IValidationError>(\n    '/content_metadata_access',\n    { send_boards_notification_email },\n    body,\n    options\n  )\n}\n\n/**\n * ### Update type of access for content metadata.\n *\n * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser\n *\n * @param sdk IAPIMethods implementation\n * @param content_metadata_access_id Id of content metadata access\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param options one-time API call overrides\n *\n */\nexport const update_content_metadata_access = async (\n  sdk: IAPIMethods,\n  content_metadata_access_id: string,\n  body: Partial<IContentMetaGroupUser>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentMetaGroupUser, IError | IValidationError>> => {\n  content_metadata_access_id = encodeParam(content_metadata_access_id)\n  return sdk.put<IContentMetaGroupUser, IError | IValidationError>(\n    `/content_metadata_access/${content_metadata_access_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Remove content metadata access.\n *\n * DELETE /content_metadata_access/{content_metadata_access_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param content_metadata_access_id Id of content metadata access\n * @param options one-time API call overrides\n *\n */\nexport const delete_content_metadata_access = async (\n  sdk: IAPIMethods,\n  content_metadata_access_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  content_metadata_access_id = encodeParam(content_metadata_access_id)\n  return sdk.delete<string, IError>(\n    `/content_metadata_access/${content_metadata_access_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get an image representing the contents of a dashboard or look.\n *\n * The returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\n * reflect the actual data displayed in the respective visualizations.\n *\n * GET /content_thumbnail/{type}/{resource_id} -> string\n *\n * @remarks\n * **NOTE**: Binary content may be returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestContentThumbnail\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const content_thumbnail = async (\n  sdk: IAPIMethods,\n  request: IRequestContentThumbnail,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  request.type = encodeParam(request.type)\n  request.resource_id = encodeParam(request.resource_id)\n  return sdk.get<string, IError>(\n    `/content_thumbnail/${request.type}/${request.resource_id}`,\n    {\n      reload: request.reload,\n      format: request.format,\n      width: request.width,\n      height: request.height,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Validate All Content\n *\n * Performs validation of all looks and dashboards\n * Returns a list of errors found as well as metadata about the content validation run.\n *\n * GET /content_validation -> IContentValidation\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const content_validation = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentValidation, IError | IValidationError>> => {\n  return sdk.get<IContentValidation, IError | IValidationError>(\n    '/content_validation',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search Content Views\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /content_view/search -> IContentView[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchContentViews\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_content_views = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchContentViews,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IContentView[], IError>> => {\n  return sdk.get<IContentView[], IError>(\n    '/content_view/search',\n    {\n      view_count: request.view_count,\n      group_id: request.group_id,\n      look_id: request.look_id,\n      dashboard_id: request.dashboard_id,\n      content_metadata_id: request.content_metadata_id,\n      start_of_week_date: request.start_of_week_date,\n      all_time: request.all_time,\n      user_id: request.user_id,\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get a vector image representing the contents of a dashboard or look.\n *\n * # DEPRECATED:  Use [content_thumbnail()](#!/Content/content_thumbnail)\n *\n * The returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\n * reflect the actual data displayed in the respective visualizations.\n *\n * GET /vector_thumbnail/{type}/{resource_id} -> string\n *\n * @deprecated\n *\n * @param sdk IAPIMethods implementation\n * @param type Either dashboard or look\n * @param resource_id ID of the dashboard or look to render\n * @param reload Whether or not to refresh the rendered image with the latest content\n * @param options one-time API call overrides\n *\n */\nexport const vector_thumbnail = async (\n  sdk: IAPIMethods,\n  type: string,\n  resource_id: string,\n  reload?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  type = encodeParam(type)\n  resource_id = encodeParam(resource_id)\n  return sdk.get<string, IError>(\n    `/vector_thumbnail/${type}/${resource_id}`,\n    { reload },\n    null,\n    options\n  )\n}\n\n//#endregion Content: Manage Content\n\n//#region Dashboard: Manage Dashboards\n\n/**\n * ### Get information about all active dashboards.\n *\n * Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.\n *\n * Get the **full details** of a specific dashboard by id with [dashboard()](#!/Dashboard/dashboard)\n *\n * Find **deleted dashboards** with [search_dashboards()](#!/Dashboard/search_dashboards)\n *\n * GET /dashboards -> IDashboardBase[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_dashboards = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardBase[], IError>> => {\n  return sdk.get<IDashboardBase[], IError>(\n    '/dashboards',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new dashboard\n *\n * Creates a new dashboard object and returns the details of the newly created dashboard.\n *\n * `Title` and `space_id` are required fields.\n * `Space_id` must contain the id of an existing space.\n * A dashboard's `title` must be unique within the space in which it resides.\n *\n * If you receive a 422 error response when creating a dashboard, be sure to look at the\n * response body for information about exactly which fields are missing or contain invalid data.\n *\n * You can **update** an existing dashboard with [update_dashboard()](#!/Dashboard/update_dashboard)\n *\n * You can **permanently delete** an existing dashboard with [delete_dashboard()](#!/Dashboard/delete_dashboard)\n *\n * POST /dashboards -> IDashboard\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteDashboard>\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteDashboard>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard, IError | IValidationError>> => {\n  return sdk.post<IDashboard, IError | IValidationError>(\n    '/dashboards',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Search Dashboards\n *\n * Returns an **array of dashboard objects** that match the specified search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n *\n * The parameters `limit`, and `offset` are recommended for fetching results in page-size chunks.\n *\n * Get a **single dashboard** by id with [dashboard()](#!/Dashboard/dashboard)\n *\n * GET /dashboards/search -> IDashboard[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchDashboards\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_dashboards = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchDashboards,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard[], IError>> => {\n  return sdk.get<IDashboard[], IError>(\n    '/dashboards/search',\n    {\n      id: request.id,\n      slug: request.slug,\n      title: request.title,\n      description: request.description,\n      content_favorite_id: request.content_favorite_id,\n      folder_id: request.folder_id,\n      deleted: request.deleted,\n      user_id: request.user_id,\n      view_count: request.view_count,\n      content_metadata_id: request.content_metadata_id,\n      curate: request.curate,\n      last_viewed_at: request.last_viewed_at,\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Import a LookML dashboard to a space as a UDD\n * Creates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard\n * and places it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.\n *\n * To give the imported dashboard specify a (e.g. title: \"my title\") in the body of your request, otherwise the imported\n * dashboard will have the same title as the original LookML dashboard.\n *\n * For this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to\n * create content in the space the dashboard is being imported to.\n *\n * **Sync** a linked UDD with [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard)\n * **Unlink** a linked UDD by setting lookml_link_id to null with [update_dashboard()](#!/Dashboard/update_dashboard)\n *\n * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard\n *\n * @param sdk IAPIMethods implementation\n * @param lookml_dashboard_id Id of LookML dashboard\n * @param space_id Id of space to import the dashboard to\n * @param body Partial<IWriteDashboard>\n * @param raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.\n * @param options one-time API call overrides\n *\n */\nexport const import_lookml_dashboard = async (\n  sdk: IAPIMethods,\n  lookml_dashboard_id: string,\n  space_id: string,\n  body?: Partial<IWriteDashboard>,\n  raw_locale?: boolean,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard, IError | IValidationError>> => {\n  lookml_dashboard_id = encodeParam(lookml_dashboard_id)\n  space_id = encodeParam(space_id)\n  return sdk.post<IDashboard, IError | IValidationError>(\n    `/dashboards/${lookml_dashboard_id}/import/${space_id}`,\n    { raw_locale },\n    body,\n    options\n  )\n}\n\n/**\n * ### Update all linked dashboards to match the specified LookML dashboard.\n *\n * Any UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a `lookml_link_id`\n * property value referring to a LookML dashboard's id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.\n *\n * For this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards\n * that the user has permission to update will be synced.\n *\n * To **link** or **unlink** a UDD set the `lookml_link_id` property with [update_dashboard()](#!/Dashboard/update_dashboard)\n *\n * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]\n *\n * @param sdk IAPIMethods implementation\n * @param lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'\n * @param body Partial<IWriteDashboard>\n * @param raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.\n * @param options one-time API call overrides\n *\n */\nexport const sync_lookml_dashboard = async (\n  sdk: IAPIMethods,\n  lookml_dashboard_id: string,\n  body: Partial<IWriteDashboard>,\n  raw_locale?: boolean,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<number[], IError | IValidationError>> => {\n  lookml_dashboard_id = encodeParam(lookml_dashboard_id)\n  return sdk.patch<number[], IError | IValidationError>(\n    `/dashboards/${lookml_dashboard_id}/sync`,\n    { raw_locale },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a dashboard\n *\n * Returns the full details of the identified dashboard object\n *\n * Get a **summary list** of all active dashboards with [all_dashboards()](#!/Dashboard/all_dashboards)\n *\n * You can **Search** for dashboards with [search_dashboards()](#!/Dashboard/search_dashboards)\n *\n * GET /dashboards/{dashboard_id} -> IDashboard\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard, IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.get<IDashboard, IError>(\n    `/dashboards/${dashboard_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a dashboard\n *\n * You can use this function to change the string and integer properties of\n * a dashboard. Nested objects such as filters, dashboard elements, or dashboard layout components\n * cannot be modified by this function - use the update functions for the respective\n * nested object types (like [update_dashboard_filter()](#!/3.1/Dashboard/update_dashboard_filter) to change a filter)\n * to modify nested objects referenced by a dashboard.\n *\n * If you receive a 422 error response when updating a dashboard, be sure to look at the\n * response body for information about exactly which fields are missing or contain invalid data.\n *\n * PATCH /dashboards/{dashboard_id} -> IDashboard\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param body Partial<IWriteDashboard>\n * @param options one-time API call overrides\n *\n */\nexport const update_dashboard = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  body: Partial<IWriteDashboard>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard, IError | IValidationError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.patch<IDashboard, IError | IValidationError>(\n    `/dashboards/${dashboard_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete the dashboard with the specified id\n *\n * Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)\n *\n * \"Soft\" delete or hide a dashboard by setting its `deleted` status to `True` with [update_dashboard()](#!/Dashboard/update_dashboard).\n *\n * Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.\n *\n * DELETE /dashboards/{dashboard_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param options one-time API call overrides\n *\n */\nexport const delete_dashboard = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.delete<string, IError>(\n    `/dashboards/${dashboard_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Aggregate Table LookML for Each Query on a Dahboard\n *\n * Returns a JSON object that contains the dashboard id and Aggregate Table lookml\n *\n * GET /dashboards/aggregate_table_lookml/{dashboard_id} -> IDashboardAggregateTableLookml\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_aggregate_table_lookml = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardAggregateTableLookml, IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.get<IDashboardAggregateTableLookml, IError>(\n    `/dashboards/aggregate_table_lookml/${dashboard_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get lookml of a UDD\n *\n * Returns a JSON object that contains the dashboard id and the full lookml\n *\n * GET /dashboards/lookml/{dashboard_id} -> IDashboardLookml\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_lookml = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLookml, IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.get<IDashboardLookml, IError>(\n    `/dashboards/lookml/${dashboard_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Move an existing dashboard\n *\n * Moves a dashboard to a specified folder, and returns the moved dashboard.\n *\n * `dashboard_id` and `folder_id` are required.\n * `dashboard_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n *\n * PATCH /dashboards/{dashboard_id}/move -> IDashboard\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Dashboard id to move.\n * @param folder_id Folder id to move to.\n * @param options one-time API call overrides\n *\n */\nexport const move_dashboard = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  folder_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard, IError | IValidationError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.patch<IDashboard, IError | IValidationError>(\n    `/dashboards/${dashboard_id}/move`,\n    { folder_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Creates a dashboard object based on LookML Dashboard YAML, and returns the details of the newly created dashboard.\n *\n * If a dashboard exists with the YAML-defined \"preferred_slug\", the new dashboard will overwrite it. Otherwise, a new\n * dashboard will be created. Note that when a dashboard is overwritten, alerts will not be maintained.\n *\n * If a folder_id is specified: new dashboards will be placed in that folder, and overwritten dashboards will be moved to it\n * If the folder_id isn't specified: new dashboards will be placed in the caller's personal folder, and overwritten dashboards\n * will remain where they were\n *\n * LookML must contain valid LookML YAML code. It's recommended to use the LookML format returned\n * from [dashboard_lookml()](#!/Dashboard/dashboard_lookml) as the input LookML (newlines replaced with\n * ).\n *\n * Note that the created dashboard is not linked to any LookML Dashboard,\n * i.e. [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard) will not update dashboards created by this method.\n *\n * POST /dashboards/lookml -> IDashboardLookml\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteDashboardLookml>\n * @param options one-time API call overrides\n *\n */\nexport const import_dashboard_from_lookml = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteDashboardLookml>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLookml, IError | IValidationError>> => {\n  return sdk.post<IDashboardLookml, IError | IValidationError>(\n    '/dashboards/lookml',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * # DEPRECATED:  Use [import_dashboard_from_lookml()](#!/Dashboard/import_dashboard_from_lookml)\n *\n * POST /dashboards/from_lookml -> IDashboardLookml\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteDashboardLookml>\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard_from_lookml = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteDashboardLookml>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLookml, IError | IValidationError>> => {\n  return sdk.post<IDashboardLookml, IError | IValidationError>(\n    '/dashboards/from_lookml',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Copy an existing dashboard\n *\n * Creates a copy of an existing dashboard, in a specified folder, and returns the copied dashboard.\n *\n * `dashboard_id` is required, `dashboard_id` and `folder_id` must already exist if specified.\n * `folder_id` will default to the existing folder.\n *\n * If a dashboard with the same title already exists in the target folder, the copy will have '(copy)'\n *   or '(copy <# of copies>)' appended.\n *\n * POST /dashboards/{dashboard_id}/copy -> IDashboard\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Dashboard id to copy.\n * @param folder_id Folder id to copy to.\n * @param options one-time API call overrides\n *\n */\nexport const copy_dashboard = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  folder_id?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard, IError | IValidationError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.post<IDashboard, IError | IValidationError>(\n    `/dashboards/${dashboard_id}/copy`,\n    { folder_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search Dashboard Elements\n *\n * Returns an **array of DashboardElement objects** that match the specified search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /dashboard_elements/search -> IDashboardElement[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchDashboardElements\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_dashboard_elements = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchDashboardElements,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardElement[], IError>> => {\n  return sdk.get<IDashboardElement[], IError>(\n    '/dashboard_elements/search',\n    {\n      dashboard_id: request.dashboard_id,\n      look_id: request.look_id,\n      title: request.title,\n      deleted: request.deleted,\n      fields: request.fields,\n      filter_or: request.filter_or,\n      sorts: request.sorts,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the dashboard element with a specific id.\n *\n * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_element_id Id of dashboard element\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_element = async (\n  sdk: IAPIMethods,\n  dashboard_element_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardElement, IError>> => {\n  dashboard_element_id = encodeParam(dashboard_element_id)\n  return sdk.get<IDashboardElement, IError>(\n    `/dashboard_elements/${dashboard_element_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the dashboard element with a specific id.\n *\n * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_element_id Id of dashboard element\n * @param body Partial<IWriteDashboardElement>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_dashboard_element = async (\n  sdk: IAPIMethods,\n  dashboard_element_id: string,\n  body: Partial<IWriteDashboardElement>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardElement, IError | IValidationError>> => {\n  dashboard_element_id = encodeParam(dashboard_element_id)\n  return sdk.patch<IDashboardElement, IError | IValidationError>(\n    `/dashboard_elements/${dashboard_element_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a dashboard element with a specific id.\n *\n * DELETE /dashboard_elements/{dashboard_element_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_element_id Id of dashboard element\n * @param options one-time API call overrides\n *\n */\nexport const delete_dashboard_element = async (\n  sdk: IAPIMethods,\n  dashboard_element_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  dashboard_element_id = encodeParam(dashboard_element_id)\n  return sdk.delete<string, IError>(\n    `/dashboard_elements/${dashboard_element_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all the dashboard elements on a dashboard with a specific id.\n *\n * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_dashboard_elements = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardElement[], IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.get<IDashboardElement[], IError>(\n    `/dashboards/${dashboard_id}/dashboard_elements`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a dashboard element on the dashboard with a specific id.\n *\n * POST /dashboard_elements -> IDashboardElement\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestCreateDashboardElement\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard_element = async (\n  sdk: IAPIMethods,\n  request: IRequestCreateDashboardElement,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardElement, IError | IValidationError>> => {\n  return sdk.post<IDashboardElement, IError | IValidationError>(\n    '/dashboard_elements',\n    { fields: request.fields, apply_filters: request.apply_filters },\n    request.body,\n    options\n  )\n}\n\n/**\n * ### Get information about the dashboard filters with a specific id.\n *\n * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_filter_id Id of dashboard filters\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_filter = async (\n  sdk: IAPIMethods,\n  dashboard_filter_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardFilter, IError>> => {\n  dashboard_filter_id = encodeParam(dashboard_filter_id)\n  return sdk.get<IDashboardFilter, IError>(\n    `/dashboard_filters/${dashboard_filter_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the dashboard filter with a specific id.\n *\n * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_filter_id Id of dashboard filter\n * @param body Partial<IWriteDashboardFilter>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_dashboard_filter = async (\n  sdk: IAPIMethods,\n  dashboard_filter_id: string,\n  body: Partial<IWriteDashboardFilter>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardFilter, IError | IValidationError>> => {\n  dashboard_filter_id = encodeParam(dashboard_filter_id)\n  return sdk.patch<IDashboardFilter, IError | IValidationError>(\n    `/dashboard_filters/${dashboard_filter_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a dashboard filter with a specific id.\n *\n * DELETE /dashboard_filters/{dashboard_filter_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_filter_id Id of dashboard filter\n * @param options one-time API call overrides\n *\n */\nexport const delete_dashboard_filter = async (\n  sdk: IAPIMethods,\n  dashboard_filter_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  dashboard_filter_id = encodeParam(dashboard_filter_id)\n  return sdk.delete<string, IError>(\n    `/dashboard_filters/${dashboard_filter_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all the dashboard filters on a dashboard with a specific id.\n *\n * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_dashboard_filters = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardFilter[], IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.get<IDashboardFilter[], IError>(\n    `/dashboards/${dashboard_id}/dashboard_filters`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a dashboard filter on the dashboard with a specific id.\n *\n * POST /dashboard_filters -> IDashboardFilter\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteCreateDashboardFilter>\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard_filter = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteCreateDashboardFilter>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardFilter, IError | IValidationError>> => {\n  return sdk.post<IDashboardFilter, IError | IValidationError>(\n    '/dashboard_filters',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about the dashboard elements with a specific id.\n *\n * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_layout_component_id Id of dashboard layout component\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_layout_component = async (\n  sdk: IAPIMethods,\n  dashboard_layout_component_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLayoutComponent, IError>> => {\n  dashboard_layout_component_id = encodeParam(dashboard_layout_component_id)\n  return sdk.get<IDashboardLayoutComponent, IError>(\n    `/dashboard_layout_components/${dashboard_layout_component_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the dashboard element with a specific id.\n *\n * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_layout_component_id Id of dashboard layout component\n * @param body Partial<IWriteDashboardLayoutComponent>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_dashboard_layout_component = async (\n  sdk: IAPIMethods,\n  dashboard_layout_component_id: string,\n  body: Partial<IWriteDashboardLayoutComponent>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IDashboardLayoutComponent, IError | IValidationError>\n> => {\n  dashboard_layout_component_id = encodeParam(dashboard_layout_component_id)\n  return sdk.patch<IDashboardLayoutComponent, IError | IValidationError>(\n    `/dashboard_layout_components/${dashboard_layout_component_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about all the dashboard layout components for a dashboard layout with a specific id.\n *\n * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_layout_id Id of dashboard layout component\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_layout_dashboard_layout_components = async (\n  sdk: IAPIMethods,\n  dashboard_layout_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLayoutComponent[], IError>> => {\n  dashboard_layout_id = encodeParam(dashboard_layout_id)\n  return sdk.get<IDashboardLayoutComponent[], IError>(\n    `/dashboard_layouts/${dashboard_layout_id}/dashboard_layout_components`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the dashboard layouts with a specific id.\n *\n * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_layout_id Id of dashboard layouts\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_layout = async (\n  sdk: IAPIMethods,\n  dashboard_layout_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLayout, IError>> => {\n  dashboard_layout_id = encodeParam(dashboard_layout_id)\n  return sdk.get<IDashboardLayout, IError>(\n    `/dashboard_layouts/${dashboard_layout_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the dashboard layout with a specific id.\n *\n * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_layout_id Id of dashboard layout\n * @param body Partial<IWriteDashboardLayout>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_dashboard_layout = async (\n  sdk: IAPIMethods,\n  dashboard_layout_id: string,\n  body: Partial<IWriteDashboardLayout>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLayout, IError | IValidationError>> => {\n  dashboard_layout_id = encodeParam(dashboard_layout_id)\n  return sdk.patch<IDashboardLayout, IError | IValidationError>(\n    `/dashboard_layouts/${dashboard_layout_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a dashboard layout with a specific id.\n *\n * DELETE /dashboard_layouts/{dashboard_layout_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_layout_id Id of dashboard layout\n * @param options one-time API call overrides\n *\n */\nexport const delete_dashboard_layout = async (\n  sdk: IAPIMethods,\n  dashboard_layout_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  dashboard_layout_id = encodeParam(dashboard_layout_id)\n  return sdk.delete<string, IError | IValidationError>(\n    `/dashboard_layouts/${dashboard_layout_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all the dashboard elements on a dashboard with a specific id.\n *\n * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_id Id of dashboard\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const dashboard_dashboard_layouts = async (\n  sdk: IAPIMethods,\n  dashboard_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLayout[], IError>> => {\n  dashboard_id = encodeParam(dashboard_id)\n  return sdk.get<IDashboardLayout[], IError>(\n    `/dashboards/${dashboard_id}/dashboard_layouts`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a dashboard layout on the dashboard with a specific id.\n *\n * POST /dashboard_layouts -> IDashboardLayout\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteDashboardLayout>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard_layout = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteDashboardLayout>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboardLayout, IError | IValidationError>> => {\n  return sdk.post<IDashboardLayout, IError | IValidationError>(\n    '/dashboard_layouts',\n    { fields },\n    body,\n    options\n  )\n}\n\n//#endregion Dashboard: Manage Dashboards\n\n//#region DataAction: Run Data Actions\n\n/**\n * Perform a data action. The data action object can be obtained from query results, and used to perform an arbitrary action.\n *\n * POST /data_actions -> IDataActionResponse\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IDataActionRequest>\n * @param options one-time API call overrides\n *\n */\nexport const perform_data_action = async (\n  sdk: IAPIMethods,\n  body: Partial<IDataActionRequest>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDataActionResponse, IError>> => {\n  return sdk.post<IDataActionResponse, IError>(\n    '/data_actions',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * For some data actions, the remote server may supply a form requesting further user input. This endpoint takes a data action, asks the remote server to generate a form for it, and returns that form to you for presentation to the user.\n *\n * POST /data_actions/form -> IDataActionForm\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IDictionary<string>>\n * @param options one-time API call overrides\n *\n */\nexport const fetch_remote_data_action_form = async (\n  sdk: IAPIMethods,\n  body: Partial<IDictionary<string>>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDataActionForm, IError | IValidationError>> => {\n  return sdk.post<IDataActionForm, IError | IValidationError>(\n    '/data_actions/form',\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion DataAction: Run Data Actions\n\n//#region Datagroup: Manage Datagroups\n\n/**\n * ### Get information about all datagroups.\n *\n * GET /datagroups -> IDatagroup[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_datagroups = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDatagroup[], IError>> => {\n  return sdk.get<IDatagroup[], IError>('/datagroups', null, null, options)\n}\n\n/**\n * ### Get information about a datagroup.\n *\n * GET /datagroups/{datagroup_id} -> IDatagroup\n *\n * @param sdk IAPIMethods implementation\n * @param datagroup_id ID of datagroup.\n * @param options one-time API call overrides\n *\n */\nexport const datagroup = async (\n  sdk: IAPIMethods,\n  datagroup_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDatagroup, IError>> => {\n  datagroup_id = encodeParam(datagroup_id)\n  return sdk.get<IDatagroup, IError>(\n    `/datagroups/${datagroup_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a datagroup using the specified params.\n *\n * PATCH /datagroups/{datagroup_id} -> IDatagroup\n *\n * @param sdk IAPIMethods implementation\n * @param datagroup_id ID of datagroup.\n * @param body Partial<IWriteDatagroup>\n * @param options one-time API call overrides\n *\n */\nexport const update_datagroup = async (\n  sdk: IAPIMethods,\n  datagroup_id: string,\n  body: Partial<IWriteDatagroup>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDatagroup, IError | IValidationError>> => {\n  datagroup_id = encodeParam(datagroup_id)\n  return sdk.patch<IDatagroup, IError | IValidationError>(\n    `/datagroups/${datagroup_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion Datagroup: Manage Datagroups\n\n//#region DerivedTable: View Derived Table graphs\n\n/**\n * ### Discover information about derived tables\n *\n * GET /derived_table/graph/model/{model} -> IDependencyGraph\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestGraphDerivedTablesForModel\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const graph_derived_tables_for_model = async (\n  sdk: IAPIMethods,\n  request: IRequestGraphDerivedTablesForModel,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDependencyGraph, IError>> => {\n  request.model = encodeParam(request.model)\n  return sdk.get<IDependencyGraph, IError>(\n    `/derived_table/graph/model/${request.model}`,\n    { format: request.format, color: request.color },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the subgraph representing this derived table and its dependencies.\n *\n * GET /derived_table/graph/view/{view} -> IDependencyGraph\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestGraphDerivedTablesForView\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const graph_derived_tables_for_view = async (\n  sdk: IAPIMethods,\n  request: IRequestGraphDerivedTablesForView,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDependencyGraph, IError>> => {\n  request.view = encodeParam(request.view)\n  return sdk.get<IDependencyGraph, IError>(\n    `/derived_table/graph/view/${request.view}`,\n    { models: request.models, workspace: request.workspace },\n    null,\n    options\n  )\n}\n\n/**\n * Enqueue materialization for a PDT with the given model name and view name\n *\n * GET /derived_table/{model_name}/{view_name}/start -> IMaterializePDT\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestStartPdtBuild\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const start_pdt_build = async (\n  sdk: IAPIMethods,\n  request: IRequestStartPdtBuild,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMaterializePDT, IError>> => {\n  request.model_name = encodeParam(request.model_name)\n  request.view_name = encodeParam(request.view_name)\n  return sdk.get<IMaterializePDT, IError>(\n    `/derived_table/${request.model_name}/${request.view_name}/start`,\n    {\n      force_rebuild: request.force_rebuild,\n      force_full_incremental: request.force_full_incremental,\n      workspace: request.workspace,\n      source: request.source,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * Check status of PDT materialization\n *\n * GET /derived_table/{materialization_id}/status -> IMaterializePDT\n *\n * @param sdk IAPIMethods implementation\n * @param materialization_id The materialization id to check status for.\n * @param options one-time API call overrides\n *\n */\nexport const check_pdt_build = async (\n  sdk: IAPIMethods,\n  materialization_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMaterializePDT, IError>> => {\n  materialization_id = encodeParam(materialization_id)\n  return sdk.get<IMaterializePDT, IError>(\n    `/derived_table/${materialization_id}/status`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Stop a PDT materialization\n *\n * GET /derived_table/{materialization_id}/stop -> IMaterializePDT\n *\n * @param sdk IAPIMethods implementation\n * @param materialization_id The materialization id to stop.\n * @param source The source of this request.\n * @param options one-time API call overrides\n *\n */\nexport const stop_pdt_build = async (\n  sdk: IAPIMethods,\n  materialization_id: string,\n  source?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMaterializePDT, IError>> => {\n  materialization_id = encodeParam(materialization_id)\n  return sdk.get<IMaterializePDT, IError>(\n    `/derived_table/${materialization_id}/stop`,\n    { source },\n    null,\n    options\n  )\n}\n\n//#endregion DerivedTable: View Derived Table graphs\n\n//#region Folder: Manage Folders\n\n/**\n * Search for folders by creator id, parent id, name, etc\n *\n * GET /folders/search -> IFolder[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchFolders\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_folders = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchFolders,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder[], IError>> => {\n  return sdk.get<IFolder[], IError>(\n    '/folders/search',\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      name: request.name,\n      id: request.id,\n      parent_id: request.parent_id,\n      creator_id: request.creator_id,\n      filter_or: request.filter_or,\n      is_shared_root: request.is_shared_root,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the folder with a specific id.\n *\n * GET /folders/{folder_id} -> IFolder\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const folder = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder, IError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.get<IFolder, IError>(\n    `/folders/${folder_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the folder with a specific id.\n *\n * PATCH /folders/{folder_id} -> IFolder\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param body Partial<IUpdateFolder>\n * @param options one-time API call overrides\n *\n */\nexport const update_folder = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  body: Partial<IUpdateFolder>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder, IError | IValidationError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.patch<IFolder, IError | IValidationError>(\n    `/folders/${folder_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete the folder with a specific id including any children folders.\n * **DANGER** this will delete all looks and dashboards in the folder.\n *\n * DELETE /folders/{folder_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param options one-time API call overrides\n *\n */\nexport const delete_folder = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.delete<string, IError>(\n    `/folders/${folder_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all folders.\n *\n * In API 3.x, this will not return empty personal folders, unless they belong to the calling user,\n * or if they contain soft-deleted content.\n *\n * In API 4.0+, all personal folders will be returned.\n *\n * GET /folders -> IFolder[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_folders = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder[], IError>> => {\n  return sdk.get<IFolder[], IError>('/folders', { fields }, null, options)\n}\n\n/**\n * ### Create a folder with specified information.\n *\n * Caller must have permission to edit the parent folder and to create folders, otherwise the request\n * returns 404 Not Found.\n *\n * POST /folders -> IFolder\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ICreateFolder>\n * @param options one-time API call overrides\n *\n */\nexport const create_folder = async (\n  sdk: IAPIMethods,\n  body: Partial<ICreateFolder>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder, IError | IValidationError>> => {\n  return sdk.post<IFolder, IError | IValidationError>(\n    '/folders',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get the children of a folder.\n *\n * GET /folders/{folder_id}/children -> IFolder[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestFolderChildren\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const folder_children = async (\n  sdk: IAPIMethods,\n  request: IRequestFolderChildren,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder[], IError>> => {\n  request.folder_id = encodeParam(request.folder_id)\n  return sdk.get<IFolder[], IError>(\n    `/folders/${request.folder_id}/children`,\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search the children of a folder\n *\n * GET /folders/{folder_id}/children/search -> IFolder[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestFolderChildrenSearch\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const folder_children_search = async (\n  sdk: IAPIMethods,\n  request: IRequestFolderChildrenSearch,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder[], IError>> => {\n  request.folder_id = encodeParam(request.folder_id)\n  return sdk.get<IFolder[], IError>(\n    `/folders/${request.folder_id}/children/search`,\n    { fields: request.fields, sorts: request.sorts, name: request.name },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the parent of a folder\n *\n * GET /folders/{folder_id}/parent -> IFolder\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const folder_parent = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder, IError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.get<IFolder, IError>(\n    `/folders/${folder_id}/parent`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the ancestors of a folder\n *\n * GET /folders/{folder_id}/ancestors -> IFolder[]\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const folder_ancestors = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IFolder[], IError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.get<IFolder[], IError>(\n    `/folders/${folder_id}/ancestors`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get all looks in a folder.\n * In API 3.x, this will return all looks in a folder, including looks in the trash.\n * In API 4.0+, all looks in a folder will be returned, excluding looks in the trash.\n *\n * GET /folders/{folder_id}/looks -> ILookWithQuery[]\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const folder_looks = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookWithQuery[], IError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.get<ILookWithQuery[], IError>(\n    `/folders/${folder_id}/looks`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the dashboards in a folder\n *\n * GET /folders/{folder_id}/dashboards -> IDashboard[]\n *\n * @param sdk IAPIMethods implementation\n * @param folder_id Id of folder\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const folder_dashboards = async (\n  sdk: IAPIMethods,\n  folder_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDashboard[], IError>> => {\n  folder_id = encodeParam(folder_id)\n  return sdk.get<IDashboard[], IError>(\n    `/folders/${folder_id}/dashboards`,\n    { fields },\n    null,\n    options\n  )\n}\n\n//#endregion Folder: Manage Folders\n\n//#region Group: Manage Groups\n\n/**\n * ### Get information about all groups.\n *\n * GET /groups -> IGroup[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllGroups\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_groups = async (\n  sdk: IAPIMethods,\n  request: IRequestAllGroups,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup[], IError>> => {\n  return sdk.get<IGroup[], IError>(\n    '/groups',\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      ids: request.ids,\n      content_metadata_id: request.content_metadata_id,\n      can_add_to_content_metadata: request.can_add_to_content_metadata,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Creates a new group (admin only).\n *\n * POST /groups -> IGroup\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteGroup>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_group = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteGroup>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup, IError | IValidationError>> => {\n  return sdk.post<IGroup, IError | IValidationError>(\n    '/groups',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Search groups\n *\n * Returns all group records that match the given search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /groups/search -> IGroup[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchGroups\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_groups = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchGroups,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup[], IError>> => {\n  return sdk.get<IGroup[], IError>(\n    '/groups/search',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n      id: request.id,\n      name: request.name,\n      external_group_id: request.external_group_id,\n      externally_managed: request.externally_managed,\n      externally_orphaned: request.externally_orphaned,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search groups include roles\n *\n * Returns all group records that match the given search criteria, and attaches any associated roles.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /groups/search/with_roles -> IGroupSearch[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchGroupsWithRoles\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_groups_with_roles = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchGroupsWithRoles,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroupSearch[], IError>> => {\n  return sdk.get<IGroupSearch[], IError>(\n    '/groups/search/with_roles',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n      id: request.id,\n      name: request.name,\n      external_group_id: request.external_group_id,\n      externally_managed: request.externally_managed,\n      externally_orphaned: request.externally_orphaned,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search groups include hierarchy\n *\n * Returns all group records that match the given search criteria, and attaches\n * associated role_ids and parent group_ids.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /groups/search/with_hierarchy -> IGroupHierarchy[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchGroupsWithHierarchy\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_groups_with_hierarchy = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchGroupsWithHierarchy,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroupHierarchy[], IError>> => {\n  return sdk.get<IGroupHierarchy[], IError>(\n    '/groups/search/with_hierarchy',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n      id: request.id,\n      name: request.name,\n      external_group_id: request.external_group_id,\n      externally_managed: request.externally_managed,\n      externally_orphaned: request.externally_orphaned,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about a group.\n *\n * GET /groups/{group_id} -> IGroup\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const group = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup, IError>> => {\n  group_id = encodeParam(group_id)\n  return sdk.get<IGroup, IError>(\n    `/groups/${group_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Updates the a group (admin only).\n *\n * PATCH /groups/{group_id} -> IGroup\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param body Partial<IWriteGroup>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_group = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  body: Partial<IWriteGroup>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup, IError | IValidationError>> => {\n  group_id = encodeParam(group_id)\n  return sdk.patch<IGroup, IError | IValidationError>(\n    `/groups/${group_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Deletes a group (admin only).\n *\n * DELETE /groups/{group_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param options one-time API call overrides\n *\n */\nexport const delete_group = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  group_id = encodeParam(group_id)\n  return sdk.delete<string, IError>(`/groups/${group_id}`, null, null, options)\n}\n\n/**\n * ### Get information about all the groups in a group\n *\n * GET /groups/{group_id}/groups -> IGroup[]\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_group_groups = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup[], IError>> => {\n  group_id = encodeParam(group_id)\n  return sdk.get<IGroup[], IError>(\n    `/groups/${group_id}/groups`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Adds a new group to a group.\n *\n * POST /groups/{group_id}/groups -> IGroup\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param options one-time API call overrides\n *\n */\nexport const add_group_group = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  body: Partial<IGroupIdForGroupInclusion>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup, IError>> => {\n  group_id = encodeParam(group_id)\n  return sdk.post<IGroup, IError>(\n    `/groups/${group_id}/groups`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about all the users directly included in a group.\n *\n * GET /groups/{group_id}/users -> IUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllGroupUsers\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_group_users = async (\n  sdk: IAPIMethods,\n  request: IRequestAllGroupUsers,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser[], IError>> => {\n  request.group_id = encodeParam(request.group_id)\n  return sdk.get<IUser[], IError>(\n    `/groups/${request.group_id}/users`,\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Adds a new user to a group.\n *\n * POST /groups/{group_id}/users -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param options one-time API call overrides\n *\n */\nexport const add_group_user = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  body: Partial<IGroupIdForGroupUserInclusion>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError>> => {\n  group_id = encodeParam(group_id)\n  return sdk.post<IUser, IError>(\n    `/groups/${group_id}/users`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Removes a user from a group.\n *\n * DELETE /groups/{group_id}/users/{user_id} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param user_id Id of user to remove from group\n * @param options one-time API call overrides\n *\n */\nexport const delete_group_user = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  group_id = encodeParam(group_id)\n  user_id = encodeParam(user_id)\n  return sdk.delete<void, IError>(\n    `/groups/${group_id}/users/${user_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Removes a group from a group.\n *\n * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param deleting_group_id Id of group to delete\n * @param options one-time API call overrides\n *\n */\nexport const delete_group_from_group = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  deleting_group_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  group_id = encodeParam(group_id)\n  deleting_group_id = encodeParam(deleting_group_id)\n  return sdk.delete<void, IError>(\n    `/groups/${group_id}/groups/${deleting_group_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Set the value of a user attribute for a group.\n *\n * For information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n *\n * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param user_attribute_id Id of user attribute\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param options one-time API call overrides\n *\n */\nexport const update_user_attribute_group_value = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  user_attribute_id: string,\n  body: Partial<IUserAttributeGroupValue>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IUserAttributeGroupValue, IError | IValidationError>\n> => {\n  group_id = encodeParam(group_id)\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.patch<IUserAttributeGroupValue, IError | IValidationError>(\n    `/groups/${group_id}/attribute_values/${user_attribute_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Remove a user attribute value from a group.\n *\n * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param group_id Id of group\n * @param user_attribute_id Id of user attribute\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_attribute_group_value = async (\n  sdk: IAPIMethods,\n  group_id: string,\n  user_attribute_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  group_id = encodeParam(group_id)\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.delete<void, IError>(\n    `/groups/${group_id}/attribute_values/${user_attribute_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Group: Manage Groups\n\n//#region Homepage: Manage Homepage\n\n/**\n * ### Get information about the primary homepage's sections.\n *\n * GET /primary_homepage_sections -> IHomepageSection[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_primary_homepage_sections = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IHomepageSection[], IError>> => {\n  return sdk.get<IHomepageSection[], IError>(\n    '/primary_homepage_sections',\n    { fields },\n    null,\n    options\n  )\n}\n\n//#endregion Homepage: Manage Homepage\n\n//#region Integration: Manage Integrations\n\n/**\n * ### Get information about all Integration Hubs.\n *\n * GET /integration_hubs -> IIntegrationHub[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_integration_hubs = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegrationHub[], IError>> => {\n  return sdk.get<IIntegrationHub[], IError>(\n    '/integration_hubs',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new Integration Hub.\n *\n * This API is rate limited to prevent it from being used for SSRF attacks\n *\n * POST /integration_hubs -> IIntegrationHub\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteIntegrationHub>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_integration_hub = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteIntegrationHub>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegrationHub, IError | IValidationError>> => {\n  return sdk.post<IIntegrationHub, IError | IValidationError>(\n    '/integration_hubs',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a Integration Hub.\n *\n * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub\n *\n * @param sdk IAPIMethods implementation\n * @param integration_hub_id Id of integration_hub\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const integration_hub = async (\n  sdk: IAPIMethods,\n  integration_hub_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegrationHub, IError>> => {\n  integration_hub_id = encodeParam(integration_hub_id)\n  return sdk.get<IIntegrationHub, IError>(\n    `/integration_hubs/${integration_hub_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a Integration Hub definition.\n *\n * This API is rate limited to prevent it from being used for SSRF attacks\n *\n * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub\n *\n * @param sdk IAPIMethods implementation\n * @param integration_hub_id Id of integration_hub\n * @param body Partial<IWriteIntegrationHub>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_integration_hub = async (\n  sdk: IAPIMethods,\n  integration_hub_id: string,\n  body: Partial<IWriteIntegrationHub>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegrationHub, IError | IValidationError>> => {\n  integration_hub_id = encodeParam(integration_hub_id)\n  return sdk.patch<IIntegrationHub, IError | IValidationError>(\n    `/integration_hubs/${integration_hub_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a Integration Hub.\n *\n * DELETE /integration_hubs/{integration_hub_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param integration_hub_id Id of integration_hub\n * @param options one-time API call overrides\n *\n */\nexport const delete_integration_hub = async (\n  sdk: IAPIMethods,\n  integration_hub_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  integration_hub_id = encodeParam(integration_hub_id)\n  return sdk.delete<string, IError>(\n    `/integration_hubs/${integration_hub_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.\n *\n * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub\n *\n * @param sdk IAPIMethods implementation\n * @param integration_hub_id Id of integration_hub\n * @param options one-time API call overrides\n *\n */\nexport const accept_integration_hub_legal_agreement = async (\n  sdk: IAPIMethods,\n  integration_hub_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegrationHub, IError | IValidationError>> => {\n  integration_hub_id = encodeParam(integration_hub_id)\n  return sdk.post<IIntegrationHub, IError | IValidationError>(\n    `/integration_hubs/${integration_hub_id}/accept_legal_agreement`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all Integrations.\n *\n * GET /integrations -> IIntegration[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllIntegrations\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_integrations = async (\n  sdk: IAPIMethods,\n  request: IRequestAllIntegrations,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegration[], IError>> => {\n  return sdk.get<IIntegration[], IError>(\n    '/integrations',\n    { fields: request.fields, integration_hub_id: request.integration_hub_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about a Integration.\n *\n * GET /integrations/{integration_id} -> IIntegration\n *\n * @param sdk IAPIMethods implementation\n * @param integration_id Id of integration\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const integration = async (\n  sdk: IAPIMethods,\n  integration_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegration, IError>> => {\n  integration_id = encodeParam(integration_id)\n  return sdk.get<IIntegration, IError>(\n    `/integrations/${integration_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update parameters on a Integration.\n *\n * PATCH /integrations/{integration_id} -> IIntegration\n *\n * @param sdk IAPIMethods implementation\n * @param integration_id Id of integration\n * @param body Partial<IWriteIntegration>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_integration = async (\n  sdk: IAPIMethods,\n  integration_id: string,\n  body: Partial<IWriteIntegration>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegration, IError | IValidationError>> => {\n  integration_id = encodeParam(integration_id)\n  return sdk.patch<IIntegration, IError | IValidationError>(\n    `/integrations/${integration_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * Returns the Integration form for presentation to the user.\n *\n * POST /integrations/{integration_id}/form -> IDataActionForm\n *\n * @param sdk IAPIMethods implementation\n * @param integration_id Id of integration\n * @param body Partial<IDictionary<string>>\n * @param options one-time API call overrides\n *\n */\nexport const fetch_integration_form = async (\n  sdk: IAPIMethods,\n  integration_id: string,\n  body?: Partial<IDictionary<string>>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDataActionForm, IError | IValidationError>> => {\n  integration_id = encodeParam(integration_id)\n  return sdk.post<IDataActionForm, IError | IValidationError>(\n    `/integrations/${integration_id}/form`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * Tests the integration to make sure all the settings are working.\n *\n * POST /integrations/{integration_id}/test -> IIntegrationTestResult\n *\n * @param sdk IAPIMethods implementation\n * @param integration_id Id of integration\n * @param options one-time API call overrides\n *\n */\nexport const test_integration = async (\n  sdk: IAPIMethods,\n  integration_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IIntegrationTestResult, IError | IValidationError>> => {\n  integration_id = encodeParam(integration_id)\n  return sdk.post<IIntegrationTestResult, IError | IValidationError>(\n    `/integrations/${integration_id}/test`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Integration: Manage Integrations\n\n//#region Look: Run and Manage Looks\n\n/**\n * ### Get information about all active Looks\n *\n * Returns an array of **abbreviated Look objects** describing all the looks that the caller has access to. Soft-deleted Looks are **not** included.\n *\n * Get the **full details** of a specific look by id with [look(id)](#!/Look/look)\n *\n * Find **soft-deleted looks** with [search_looks()](#!/Look/search_looks)\n *\n * GET /looks -> ILook[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_looks = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILook[], IError>> => {\n  return sdk.get<ILook[], IError>('/looks', { fields }, null, options)\n}\n\n/**\n * ### Create a Look\n *\n * To create a look to display query data, first create the query with [create_query()](#!/Query/create_query)\n * then assign the query's id to the `query_id` property in the call to `create_look()`.\n *\n * To place the look into a particular space, assign the space's id to the `space_id` property\n * in the call to `create_look()`.\n *\n * POST /looks -> ILookWithQuery\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLookWithQuery>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_look = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLookWithQuery>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookWithQuery, IError | IValidationError>> => {\n  return sdk.post<ILookWithQuery, IError | IValidationError>(\n    '/looks',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Search Looks\n *\n * Returns an **array of Look objects** that match the specified search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n *\n * Get a **single look** by id with [look(id)](#!/Look/look)\n *\n * GET /looks/search -> ILook[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchLooks\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_looks = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchLooks,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILook[], IError>> => {\n  return sdk.get<ILook[], IError>(\n    '/looks/search',\n    {\n      id: request.id,\n      title: request.title,\n      description: request.description,\n      content_favorite_id: request.content_favorite_id,\n      folder_id: request.folder_id,\n      user_id: request.user_id,\n      view_count: request.view_count,\n      deleted: request.deleted,\n      query_id: request.query_id,\n      curate: request.curate,\n      last_viewed_at: request.last_viewed_at,\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get a Look.\n *\n * Returns detailed information about a Look and its associated Query.\n *\n * GET /looks/{look_id} -> ILookWithQuery\n *\n * @param sdk IAPIMethods implementation\n * @param look_id Id of look\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const look = async (\n  sdk: IAPIMethods,\n  look_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookWithQuery, IError>> => {\n  look_id = encodeParam(look_id)\n  return sdk.get<ILookWithQuery, IError>(\n    `/looks/${look_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Modify a Look\n *\n * Use this function to modify parts of a look. Property values given in a call to `update_look` are\n * applied to the existing look, so there's no need to include properties whose values are not changing.\n * It's best to specify only the properties you want to change and leave everything else out\n * of your `update_look` call. **Look properties marked 'read-only' will be ignored.**\n *\n * When a user deletes a look in the Looker UI, the look data remains in the database but is\n * marked with a deleted flag (\"soft-deleted\"). Soft-deleted looks can be undeleted (by an admin)\n * if the delete was in error.\n *\n * To soft-delete a look via the API, use [update_look()](#!/Look/update_look) to change the look's `deleted` property to `true`.\n * You can undelete a look by calling `update_look` to change the look's `deleted` property to `false`.\n *\n * Soft-deleted looks are excluded from the results of [all_looks()](#!/Look/all_looks) and [search_looks()](#!/Look/search_looks), so they\n * essentially disappear from view even though they still reside in the db.\n * In API 3.1 and later, you can pass `deleted: true` as a parameter to [search_looks()](#!/3.1/Look/search_looks) to list soft-deleted looks.\n *\n * NOTE: [delete_look()](#!/Look/delete_look) performs a \"hard delete\" - the look data is removed from the Looker\n * database and destroyed. There is no \"undo\" for `delete_look()`.\n *\n * PATCH /looks/{look_id} -> ILookWithQuery\n *\n * @param sdk IAPIMethods implementation\n * @param look_id Id of look\n * @param body Partial<IWriteLookWithQuery>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_look = async (\n  sdk: IAPIMethods,\n  look_id: string,\n  body: Partial<IWriteLookWithQuery>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookWithQuery, IError | IValidationError>> => {\n  look_id = encodeParam(look_id)\n  return sdk.patch<ILookWithQuery, IError | IValidationError>(\n    `/looks/${look_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Permanently Delete a Look\n *\n * This operation **permanently** removes a look from the Looker database.\n *\n * NOTE: There is no \"undo\" for this kind of delete.\n *\n * For information about soft-delete (which can be undone) see [update_look()](#!/Look/update_look).\n *\n * DELETE /looks/{look_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param look_id Id of look\n * @param options one-time API call overrides\n *\n */\nexport const delete_look = async (\n  sdk: IAPIMethods,\n  look_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  look_id = encodeParam(look_id)\n  return sdk.delete<string, IError>(`/looks/${look_id}`, null, null, options)\n}\n\n/**\n * ### Run a Look\n *\n * Runs a given look's query and returns the results in the requested format.\n *\n * Supported formats:\n *\n * | result_format | Description\n * | :-----------: | :--- |\n * | json | Plain json\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | md | Simple markdown\n * | xlsx | MS Excel spreadsheet\n * | sql | Returns the generated SQL rather than running the query\n * | png | A PNG image of the visualization of the query\n * | jpg | A JPG image of the visualization of the query\n *\n * GET /looks/{look_id}/run/{result_format} -> string\n *\n * @remarks\n * **NOTE**: Binary content may be returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestRunLook\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const run_look = async (\n  sdk: IAPIMethods,\n  request: IRequestRunLook,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  request.look_id = encodeParam(request.look_id)\n  request.result_format = encodeParam(request.result_format)\n  return sdk.get<string, IError | IValidationError>(\n    `/looks/${request.look_id}/run/${request.result_format}`,\n    {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Copy an existing look\n *\n * Creates a copy of an existing look, in a specified folder, and returns the copied look.\n *\n * `look_id` and `folder_id` are required.\n *\n * `look_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n *\n * POST /looks/{look_id}/copy -> ILookWithQuery\n *\n * @param sdk IAPIMethods implementation\n * @param look_id Look id to copy.\n * @param folder_id Folder id to copy to.\n * @param options one-time API call overrides\n *\n */\nexport const copy_look = async (\n  sdk: IAPIMethods,\n  look_id: string,\n  folder_id?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookWithQuery, IError | IValidationError>> => {\n  look_id = encodeParam(look_id)\n  return sdk.post<ILookWithQuery, IError | IValidationError>(\n    `/looks/${look_id}/copy`,\n    { folder_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Move an existing look\n *\n * Moves a look to a specified folder, and returns the moved look.\n *\n * `look_id` and `folder_id` are required.\n * `look_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n *\n * PATCH /looks/{look_id}/move -> ILookWithQuery\n *\n * @param sdk IAPIMethods implementation\n * @param look_id Look id to move.\n * @param folder_id Folder id to move to.\n * @param options one-time API call overrides\n *\n */\nexport const move_look = async (\n  sdk: IAPIMethods,\n  look_id: string,\n  folder_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookWithQuery, IError | IValidationError>> => {\n  look_id = encodeParam(look_id)\n  return sdk.patch<ILookWithQuery, IError | IValidationError>(\n    `/looks/${look_id}/move`,\n    { folder_id },\n    null,\n    options\n  )\n}\n\n//#endregion Look: Run and Manage Looks\n\n//#region LookmlModel: Manage LookML Models\n\n/**\n * ### Get information about all lookml models.\n *\n * GET /lookml_models -> ILookmlModel[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllLookmlModels\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_lookml_models = async (\n  sdk: IAPIMethods,\n  request: IRequestAllLookmlModels,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlModel[], IError>> => {\n  return sdk.get<ILookmlModel[], IError>(\n    '/lookml_models',\n    { fields: request.fields, limit: request.limit, offset: request.offset },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a lookml model using the specified configuration.\n *\n * POST /lookml_models -> ILookmlModel\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteLookmlModel>\n * @param options one-time API call overrides\n *\n */\nexport const create_lookml_model = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteLookmlModel>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlModel, IError | IValidationError>> => {\n  return sdk.post<ILookmlModel, IError | IValidationError>(\n    '/lookml_models',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a lookml model.\n *\n * GET /lookml_models/{lookml_model_name} -> ILookmlModel\n *\n * @param sdk IAPIMethods implementation\n * @param lookml_model_name Name of lookml model.\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const lookml_model = async (\n  sdk: IAPIMethods,\n  lookml_model_name: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlModel, IError>> => {\n  lookml_model_name = encodeParam(lookml_model_name)\n  return sdk.get<ILookmlModel, IError>(\n    `/lookml_models/${lookml_model_name}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a lookml model using the specified configuration.\n *\n * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel\n *\n * @param sdk IAPIMethods implementation\n * @param lookml_model_name Name of lookml model.\n * @param body Partial<IWriteLookmlModel>\n * @param options one-time API call overrides\n *\n */\nexport const update_lookml_model = async (\n  sdk: IAPIMethods,\n  lookml_model_name: string,\n  body: Partial<IWriteLookmlModel>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlModel, IError | IValidationError>> => {\n  lookml_model_name = encodeParam(lookml_model_name)\n  return sdk.patch<ILookmlModel, IError | IValidationError>(\n    `/lookml_models/${lookml_model_name}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a lookml model.\n *\n * DELETE /lookml_models/{lookml_model_name} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param lookml_model_name Name of lookml model.\n * @param options one-time API call overrides\n *\n */\nexport const delete_lookml_model = async (\n  sdk: IAPIMethods,\n  lookml_model_name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  lookml_model_name = encodeParam(lookml_model_name)\n  return sdk.delete<string, IError>(\n    `/lookml_models/${lookml_model_name}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about a lookml model explore.\n *\n * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore\n *\n * @param sdk IAPIMethods implementation\n * @param lookml_model_name Name of lookml model.\n * @param explore_name Name of explore.\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const lookml_model_explore = async (\n  sdk: IAPIMethods,\n  lookml_model_name: string,\n  explore_name: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlModelExplore, IError>> => {\n  lookml_model_name = encodeParam(lookml_model_name)\n  explore_name = encodeParam(explore_name)\n  return sdk.get<ILookmlModelExplore, IError>(\n    `/lookml_models/${lookml_model_name}/explores/${explore_name}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n//#endregion LookmlModel: Manage LookML Models\n\n//#region Metadata: Connection Metadata Features\n\n/**\n * ### Field name suggestions for a model and view\n *\n * `filters` is a string hash of values, with the key as the field name and the string value as the filter expression:\n *\n * ```ruby\n * {'users.age': '>=60'}\n * ```\n *\n * or\n *\n * ```ruby\n * {'users.age': '<30'}\n * ```\n *\n * or\n *\n * ```ruby\n * {'users.age': '=50'}\n * ```\n *\n * GET /models/{model_name}/views/{view_name}/fields/{field_name}/suggestions -> IModelFieldSuggestions\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestModelFieldnameSuggestions\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const model_fieldname_suggestions = async (\n  sdk: IAPIMethods,\n  request: IRequestModelFieldnameSuggestions,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModelFieldSuggestions, IError>> => {\n  request.model_name = encodeParam(request.model_name)\n  request.view_name = encodeParam(request.view_name)\n  request.field_name = encodeParam(request.field_name)\n  return sdk.get<IModelFieldSuggestions, IError>(\n    `/models/${request.model_name}/views/${request.view_name}/fields/${request.field_name}/suggestions`,\n    { term: request.term, filters: request.filters },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get a single model\n *\n * GET /models/{model_name} -> IModel\n *\n * @param sdk IAPIMethods implementation\n * @param model_name Name of model\n * @param options one-time API call overrides\n *\n */\nexport const get_model = async (\n  sdk: IAPIMethods,\n  model_name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModel, IError>> => {\n  model_name = encodeParam(model_name)\n  return sdk.get<IModel, IError>(`/models/${model_name}`, null, null, options)\n}\n\n/**\n * ### List databases available to this connection\n *\n * Certain dialects can support multiple databases per single connection.\n * If this connection supports multiple databases, the database names will be returned in an array.\n *\n * Connections using dialects that do not support multiple databases will return an empty array.\n *\n * **Note**: [Connection Features](#!/Metadata/connection_features) can be used to determine if a connection supports\n * multiple databases.\n *\n * GET /connections/{connection_name}/databases -> string[]\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param options one-time API call overrides\n *\n */\nexport const connection_databases = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string[], IError>> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.get<string[], IError>(\n    `/connections/${connection_name}/databases`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Retrieve metadata features for this connection\n *\n * Returns a list of feature names with `true` (available) or `false` (not available)\n *\n * GET /connections/{connection_name}/features -> IConnectionFeatures\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const connection_features = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IConnectionFeatures, IError | IValidationError>> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.get<IConnectionFeatures, IError | IValidationError>(\n    `/connections/${connection_name}/features`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the list of schemas and tables for a connection\n *\n * GET /connections/{connection_name}/schemas -> ISchema[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestConnectionSchemas\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const connection_schemas = async (\n  sdk: IAPIMethods,\n  request: IRequestConnectionSchemas,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISchema[], IError | IValidationError>> => {\n  request.connection_name = encodeParam(request.connection_name)\n  return sdk.get<ISchema[], IError | IValidationError>(\n    `/connections/${request.connection_name}/schemas`,\n    {\n      database: request.database,\n      cache: request.cache,\n      fields: request.fields,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the list of tables for a schema\n *\n * For dialects that support multiple databases, optionally identify which to use. If not provided, the default\n * database for the connection will be used.\n *\n * For dialects that do **not** support multiple databases, **do not use** the database parameter\n *\n * GET /connections/{connection_name}/tables -> ISchemaTables[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestConnectionTables\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const connection_tables = async (\n  sdk: IAPIMethods,\n  request: IRequestConnectionTables,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISchemaTables[], IError | IValidationError>> => {\n  request.connection_name = encodeParam(request.connection_name)\n  return sdk.get<ISchemaTables[], IError | IValidationError>(\n    `/connections/${request.connection_name}/tables`,\n    {\n      database: request.database,\n      schema_name: request.schema_name,\n      cache: request.cache,\n      fields: request.fields,\n      table_filter: request.table_filter,\n      table_limit: request.table_limit,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the columns (and therefore also the tables) in a specific schema\n *\n * GET /connections/{connection_name}/columns -> ISchemaColumns[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestConnectionColumns\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const connection_columns = async (\n  sdk: IAPIMethods,\n  request: IRequestConnectionColumns,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISchemaColumns[], IError | IValidationError>> => {\n  request.connection_name = encodeParam(request.connection_name)\n  return sdk.get<ISchemaColumns[], IError | IValidationError>(\n    `/connections/${request.connection_name}/columns`,\n    {\n      database: request.database,\n      schema_name: request.schema_name,\n      cache: request.cache,\n      table_limit: request.table_limit,\n      table_names: request.table_names,\n      fields: request.fields,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search a connection for columns matching the specified name\n *\n * **Note**: `column_name` must be a valid column name. It is not a search pattern.\n *\n * GET /connections/{connection_name}/search_columns -> IColumnSearch[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestConnectionSearchColumns\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const connection_search_columns = async (\n  sdk: IAPIMethods,\n  request: IRequestConnectionSearchColumns,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IColumnSearch[], IError | IValidationError>> => {\n  request.connection_name = encodeParam(request.connection_name)\n  return sdk.get<IColumnSearch[], IError | IValidationError>(\n    `/connections/${request.connection_name}/search_columns`,\n    { column_name: request.column_name, fields: request.fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Connection cost estimating\n *\n * Assign a `sql` statement to the body of the request. e.g., for Ruby, `{sql: 'select * from users'}`\n *\n * **Note**: If the connection's dialect has no support for cost estimates, an error will be returned\n *\n * POST /connections/{connection_name}/cost_estimate -> ICostEstimate\n *\n * @param sdk IAPIMethods implementation\n * @param connection_name Name of connection\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const connection_cost_estimate = async (\n  sdk: IAPIMethods,\n  connection_name: string,\n  body: Partial<ICreateCostEstimate>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICostEstimate, IError | IValidationError>> => {\n  connection_name = encodeParam(connection_name)\n  return sdk.post<ICostEstimate, IError | IValidationError>(\n    `/connections/${connection_name}/cost_estimate`,\n    { fields },\n    body,\n    options\n  )\n}\n\n//#endregion Metadata: Connection Metadata Features\n\n//#region Project: Manage Projects\n\n/**\n * ### Generate Lockfile for All LookML Dependencies\n *\n *       Git must have been configured, must be in dev mode and deploy permission required\n *\n *       Install_all is a two step process\n *       1. For each remote_dependency in a project the dependency manager will resolve any ambiguous ref.\n *       2. The project will then write out a lockfile including each remote_dependency with its resolved ref.\n *\n * POST /projects/{project_id}/manifest/lock_all -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Id of project\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const lock_all = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/projects/${project_id}/manifest/lock_all`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get All Git Branches\n *\n * Returns a list of git branches in the project repository\n *\n * GET /projects/{project_id}/git_branches -> IGitBranch[]\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param options one-time API call overrides\n *\n */\nexport const all_git_branches = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGitBranch[], IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IGitBranch[], IError>(\n    `/projects/${project_id}/git_branches`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the Current Git Branch\n *\n * Returns the git branch currently checked out in the given project repository\n *\n * GET /projects/{project_id}/git_branch -> IGitBranch\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param options one-time API call overrides\n *\n */\nexport const git_branch = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGitBranch, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IGitBranch, IError>(\n    `/projects/${project_id}/git_branch`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Checkout and/or reset --hard an existing Git Branch\n *\n * Only allowed in development mode\n *   - Call `update_session` to select the 'dev' workspace.\n *\n * Checkout an existing branch if name field is different from the name of the currently checked out branch.\n *\n * Optionally specify a branch name, tag name or commit SHA to which the branch should be reset.\n *   **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.\n *\n * PUT /projects/{project_id}/git_branch -> IGitBranch\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param body Partial<IWriteGitBranch>\n * @param options one-time API call overrides\n *\n */\nexport const update_git_branch = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  body: Partial<IWriteGitBranch>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGitBranch, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.put<IGitBranch, IError | IValidationError>(\n    `/projects/${project_id}/git_branch`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Create and Checkout a Git Branch\n *\n * Creates and checks out a new branch in the given project repository\n * Only allowed in development mode\n *   - Call `update_session` to select the 'dev' workspace.\n *\n * Optionally specify a branch name, tag name or commit SHA as the start point in the ref field.\n *   If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.\n *\n * POST /projects/{project_id}/git_branch -> IGitBranch\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param body Partial<IWriteGitBranch>\n * @param options one-time API call overrides\n *\n */\nexport const create_git_branch = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  body: Partial<IWriteGitBranch>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGitBranch, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<IGitBranch, IError | IValidationError>(\n    `/projects/${project_id}/git_branch`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get the specified Git Branch\n *\n * Returns the git branch specified in branch_name path param if it exists in the given project repository\n *\n * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param branch_name Branch Name\n * @param options one-time API call overrides\n *\n */\nexport const find_git_branch = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  branch_name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGitBranch, IError>> => {\n  project_id = encodeParam(project_id)\n  branch_name = encodeParam(branch_name)\n  return sdk.get<IGitBranch, IError>(\n    `/projects/${project_id}/git_branch/${branch_name}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Delete the specified Git Branch\n *\n * Delete git branch specified in branch_name path param from local and remote of specified project repository\n *\n * DELETE /projects/{project_id}/git_branch/{branch_name} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param branch_name Branch Name\n * @param options one-time API call overrides\n *\n */\nexport const delete_git_branch = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  branch_name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  project_id = encodeParam(project_id)\n  branch_name = encodeParam(branch_name)\n  return sdk.delete<string, IError>(\n    `/projects/${project_id}/git_branch/${branch_name}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Deploy a Remote Branch or Ref to Production\n *\n * Git must have been configured and deploy permission required.\n *\n * Deploy is a one/two step process\n * 1. If this is the first deploy of this project, create the production project with git repository.\n * 2. Pull the branch or ref into the production project.\n *\n * Can only specify either a branch or a ref.\n *\n * POST /projects/{project_id}/deploy_ref_to_production -> string\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestDeployRefToProduction\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const deploy_ref_to_production = async (\n  sdk: IAPIMethods,\n  request: IRequestDeployRefToProduction,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  request.project_id = encodeParam(request.project_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/projects/${request.project_id}/deploy_ref_to_production`,\n    { branch: request.branch, ref: request.ref },\n    null,\n    options\n  )\n}\n\n/**\n * ### Deploy LookML from this Development Mode Project to Production\n *\n * Git must have been configured, must be in dev mode and deploy permission required\n *\n * Deploy is a two / three step process:\n *\n * 1. Push commits in current branch of dev mode project to the production branch (origin/master).\n *    Note a. This step is skipped in read-only projects.\n *    Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has\n *              commits not in current branch), subsequent steps will be skipped.\n * 2. If this is the first deploy of this project, create the production project with git repository.\n * 3. Pull the production branch into the production project.\n *\n * POST /projects/{project_id}/deploy_to_production -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Id of project\n * @param options one-time API call overrides\n *\n */\nexport const deploy_to_production = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/projects/${project_id}/deploy_to_production`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Reset a project to the revision of the project that is in production.\n *\n * **DANGER** this will delete any changes that have not been pushed to a remote repository.\n *\n * POST /projects/{project_id}/reset_to_production -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Id of project\n * @param options one-time API call overrides\n *\n */\nexport const reset_project_to_production = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/projects/${project_id}/reset_to_production`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Reset a project development branch to the revision of the project that is on the remote.\n *\n * **DANGER** this will delete any changes that have not been pushed to a remote repository.\n *\n * POST /projects/{project_id}/reset_to_remote -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Id of project\n * @param options one-time API call overrides\n *\n */\nexport const reset_project_to_remote = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/projects/${project_id}/reset_to_remote`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get All Projects\n *\n * Returns all projects visible to the current user\n *\n * GET /projects -> IProject[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const all_projects = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProject[], IError>> => {\n  return sdk.get<IProject[], IError>('/projects', { fields }, null, options)\n}\n\n/**\n * ### Create A Project\n *\n * dev mode required.\n * - Call `update_session` to select the 'dev' workspace.\n *\n * `name` is required.\n * `git_remote_url` is not allowed. To configure Git for the newly created project, follow the instructions in `update_project`.\n *\n * POST /projects -> IProject\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteProject>\n * @param options one-time API call overrides\n *\n */\nexport const create_project = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteProject>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProject, IError | IValidationError>> => {\n  return sdk.post<IProject, IError | IValidationError>(\n    '/projects',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get A Project\n *\n * Returns the project with the given project id\n *\n * GET /projects/{project_id} -> IProject\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const project = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProject, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IProject, IError>(\n    `/projects/${project_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update Project Configuration\n *\n * Apply changes to a project's configuration.\n *\n *\n * #### Configuring Git for a Project\n *\n * To set up a Looker project with a remote git repository, follow these steps:\n *\n * 1. Call `update_session` to select the 'dev' workspace.\n * 1. Call `create_git_deploy_key` to create a new deploy key for the project\n * 1. Copy the deploy key text into the remote git repository's ssh key configuration\n * 1. Call `update_project` to set project's `git_remote_url` ()and `git_service_name`, if necessary).\n *\n * When you modify a project's `git_remote_url`, Looker connects to the remote repository to fetch\n * metadata. The remote git repository MUST be configured with the Looker-generated deploy\n * key for this project prior to setting the project's `git_remote_url`.\n *\n * To set up a Looker project with a git repository residing on the Looker server (a 'bare' git repo):\n *\n * 1. Call `update_session` to select the 'dev' workspace.\n * 1. Call `update_project` setting `git_remote_url` to null and `git_service_name` to \"bare\".\n *\n * PATCH /projects/{project_id} -> IProject\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param body Partial<IWriteProject>\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const update_project = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  body: Partial<IWriteProject>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProject, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.patch<IProject, IError | IValidationError>(\n    `/projects/${project_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get A Projects Manifest object\n *\n * Returns the project with the given project id\n *\n * GET /projects/{project_id}/manifest -> IManifest\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param options one-time API call overrides\n *\n */\nexport const manifest = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IManifest, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IManifest, IError>(\n    `/projects/${project_id}/manifest`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Git Deploy Key\n *\n * Returns the ssh public key previously created for a project's git repository.\n *\n * GET /projects/{project_id}/git/deploy_key -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param options one-time API call overrides\n *\n */\nexport const git_deploy_key = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<string, IError>(\n    `/projects/${project_id}/git/deploy_key`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Create Git Deploy Key\n *\n * Create a public/private key pair for authenticating ssh git requests from Looker to a remote git repository\n * for a particular Looker project.\n *\n * Returns the public key of the generated ssh key pair.\n *\n * Copy this public key to your remote git repository's ssh keys configuration so that the remote git service can\n * validate and accept git requests from the Looker server.\n *\n * POST /projects/{project_id}/git/deploy_key -> string\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param options one-time API call overrides\n *\n */\nexport const create_git_deploy_key = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<string, IError | IValidationError>(\n    `/projects/${project_id}/git/deploy_key`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Cached Project Validation Results\n *\n * Returns the cached results of a previous project validation calculation, if any.\n * Returns http status 204 No Content if no validation results exist.\n *\n * Validating the content of all the files in a project can be computationally intensive\n * for large projects. Use this API to simply fetch the results of the most recent\n * project validation rather than revalidating the entire project from scratch.\n *\n * A value of `\"stale\": true` in the response indicates that the project has changed since\n * the cached validation results were computed. The cached validation results may no longer\n * reflect the current state of the project.\n *\n * GET /projects/{project_id}/validate -> IProjectValidationCache\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const project_validation_results = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProjectValidationCache, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IProjectValidationCache, IError>(\n    `/projects/${project_id}/validate`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Validate Project\n *\n * Performs lint validation of all lookml files in the project.\n * Returns a list of errors found, if any.\n *\n * Validating the content of all the files in a project can be computationally intensive\n * for large projects. For best performance, call `validate_project(project_id)` only\n * when you really want to recompute project validation. To quickly display the results of\n * the most recent project validation (without recomputing), use `project_validation_results(project_id)`\n *\n * POST /projects/{project_id}/validate -> IProjectValidation\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const validate_project = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProjectValidation, IError | IValidationError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.post<IProjectValidation, IError | IValidationError>(\n    `/projects/${project_id}/validate`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Project Workspace\n *\n * Returns information about the state of the project files in the currently selected workspace\n *\n * GET /projects/{project_id}/current_workspace -> IProjectWorkspace\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const project_workspace = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProjectWorkspace, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IProjectWorkspace, IError>(\n    `/projects/${project_id}/current_workspace`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get All Project Files\n *\n * Returns a list of the files in the project\n *\n * GET /projects/{project_id}/files -> IProjectFile[]\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const all_project_files = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProjectFile[], IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IProjectFile[], IError>(\n    `/projects/${project_id}/files`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Project File Info\n *\n * Returns information about a file in the project\n *\n * GET /projects/{project_id}/files/file -> IProjectFile\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param file_id File Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const project_file = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  file_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProjectFile, IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IProjectFile, IError>(\n    `/projects/${project_id}/files/file`,\n    { file_id, fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get All Git Connection Tests\n *\n * dev mode required.\n *   - Call `update_session` to select the 'dev' workspace.\n *\n * Returns a list of tests which can be run against a project's (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.\n *\n * Tests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.\n *\n * For example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.\n *\n * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.\n * @param options one-time API call overrides\n *\n */\nexport const all_git_connection_tests = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  remote_url?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGitConnectionTest[], IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<IGitConnectionTest[], IError>(\n    `/projects/${project_id}/git_connection_tests`,\n    { remote_url },\n    null,\n    options\n  )\n}\n\n/**\n * ### Run a git connection test\n *\n * Run the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This\n * is intended to help debug git connections when things do not work properly, to give\n * more helpful information about why a git url is not working with Looker.\n *\n * Tests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).\n *\n * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestRunGitConnectionTest\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const run_git_connection_test = async (\n  sdk: IAPIMethods,\n  request: IRequestRunGitConnectionTest,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IGitConnectionTestResult, IError | IValidationError>\n> => {\n  request.project_id = encodeParam(request.project_id)\n  request.test_id = encodeParam(request.test_id)\n  return sdk.get<IGitConnectionTestResult, IError | IValidationError>(\n    `/projects/${request.project_id}/git_connection_tests/${request.test_id}`,\n    { remote_url: request.remote_url, use_production: request.use_production },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get All LookML Tests\n *\n * Returns a list of tests which can be run to validate a project's LookML code and/or the underlying data,\n * optionally filtered by the file id.\n * Call [Run LookML Test](#!/Project/run_lookml_test) to execute tests.\n *\n * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]\n *\n * @param sdk IAPIMethods implementation\n * @param project_id Project Id\n * @param file_id File Id\n * @param options one-time API call overrides\n *\n */\nexport const all_lookml_tests = async (\n  sdk: IAPIMethods,\n  project_id: string,\n  file_id?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlTest[], IError>> => {\n  project_id = encodeParam(project_id)\n  return sdk.get<ILookmlTest[], IError>(\n    `/projects/${project_id}/lookml_tests`,\n    { file_id },\n    null,\n    options\n  )\n}\n\n/**\n * ### Run LookML Tests\n *\n * Runs all tests in the project, optionally filtered by file, test, and/or model.\n *\n * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestRunLookmlTest\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const run_lookml_test = async (\n  sdk: IAPIMethods,\n  request: IRequestRunLookmlTest,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ILookmlTestResult[], IError | IValidationError>> => {\n  request.project_id = encodeParam(request.project_id)\n  return sdk.get<ILookmlTestResult[], IError | IValidationError>(\n    `/projects/${request.project_id}/lookml_tests/run`,\n    { file_id: request.file_id, test: request.test, model: request.model },\n    null,\n    options\n  )\n}\n\n/**\n * ### Creates a tag for the most recent commit, or a specific ref is a SHA is provided\n *\n * This is an internal-only, undocumented route.\n *\n * POST /projects/{project_id}/tag -> IProject\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestTagRef\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const tag_ref = async (\n  sdk: IAPIMethods,\n  request: IRequestTagRef,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IProject, IError | IValidationError>> => {\n  request.project_id = encodeParam(request.project_id)\n  return sdk.post<IProject, IError | IValidationError>(\n    `/projects/${request.project_id}/tag`,\n    {\n      commit_sha: request.commit_sha,\n      tag_name: request.tag_name,\n      tag_message: request.tag_message,\n    },\n    request.body,\n    options\n  )\n}\n\n/**\n * ### Configure Repository Credential for a remote dependency\n *\n * Admin required.\n *\n * `root_project_id` is required.\n * `credential_id` is required.\n *\n * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential\n *\n * @param sdk IAPIMethods implementation\n * @param root_project_id Root Project Id\n * @param credential_id Credential Id\n * @param body Partial<IWriteRepositoryCredential>\n * @param options one-time API call overrides\n *\n */\nexport const update_repository_credential = async (\n  sdk: IAPIMethods,\n  root_project_id: string,\n  credential_id: string,\n  body: Partial<IWriteRepositoryCredential>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRepositoryCredential, IError | IValidationError>> => {\n  root_project_id = encodeParam(root_project_id)\n  credential_id = encodeParam(credential_id)\n  return sdk.put<IRepositoryCredential, IError | IValidationError>(\n    `/projects/${root_project_id}/credential/${credential_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Repository Credential for a remote dependency\n *\n * Admin required.\n *\n * `root_project_id` is required.\n * `credential_id` is required.\n *\n * DELETE /projects/{root_project_id}/credential/{credential_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param root_project_id Root Project Id\n * @param credential_id Credential Id\n * @param options one-time API call overrides\n *\n */\nexport const delete_repository_credential = async (\n  sdk: IAPIMethods,\n  root_project_id: string,\n  credential_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  root_project_id = encodeParam(root_project_id)\n  credential_id = encodeParam(credential_id)\n  return sdk.delete<string, IError>(\n    `/projects/${root_project_id}/credential/${credential_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get all Repository Credentials for a project\n *\n * `root_project_id` is required.\n *\n * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]\n *\n * @param sdk IAPIMethods implementation\n * @param root_project_id Root Project Id\n * @param options one-time API call overrides\n *\n */\nexport const get_all_repository_credentials = async (\n  sdk: IAPIMethods,\n  root_project_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRepositoryCredential[], IError>> => {\n  root_project_id = encodeParam(root_project_id)\n  return sdk.get<IRepositoryCredential[], IError>(\n    `/projects/${root_project_id}/credentials`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Project: Manage Projects\n\n//#region Query: Run and Manage Queries\n\n/**\n * ### Create an async query task\n *\n * Creates a query task (job) to run a previously created query asynchronously. Returns a Query Task ID.\n *\n * Use [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task.\n * After the query task status reaches \"Complete\", use [query_task_results(query_task_id)](#!/Query/query_task_results) to fetch the results of the query.\n *\n * POST /query_tasks -> IQueryTask\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestCreateQueryTask\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const create_query_task = async (\n  sdk: IAPIMethods,\n  request: IRequestCreateQueryTask,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IQueryTask, IError | IValidationError>> => {\n  return sdk.post<IQueryTask, IError | IValidationError>(\n    '/query_tasks',\n    {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      fields: request.fields,\n    },\n    request.body,\n    options\n  )\n}\n\n/**\n * ### Fetch results of multiple async queries\n *\n * Returns the results of multiple async queries in one request.\n *\n * For Query Tasks that are not completed, the response will include the execution status of the Query Task but will not include query results.\n * Query Tasks whose results have expired will have a status of 'expired'.\n * If the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of 'missing'\n *\n * GET /query_tasks/multi_results -> IDictionary<any>\n *\n * @param sdk IAPIMethods implementation\n * @param query_task_ids List of Query Task IDs\n * @param options one-time API call overrides\n *\n */\nexport const query_task_multi_results = async (\n  sdk: IAPIMethods,\n  query_task_ids: DelimArray<string>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IDictionary<any>, IError>> => {\n  return sdk.get<IDictionary<any>, IError>(\n    '/query_tasks/multi_results',\n    { query_task_ids },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Query Task details\n *\n * Use this function to check the status of an async query task. After the status\n * reaches \"Complete\", you can call [query_task_results(query_task_id)](#!/Query/query_task_results) to\n * retrieve the results of the query.\n *\n * Use [create_query_task()](#!/Query/create_query_task) to create an async query task.\n *\n * GET /query_tasks/{query_task_id} -> IQueryTask\n *\n * @param sdk IAPIMethods implementation\n * @param query_task_id ID of the Query Task\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const query_task = async (\n  sdk: IAPIMethods,\n  query_task_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IQueryTask, IError>> => {\n  query_task_id = encodeParam(query_task_id)\n  return sdk.get<IQueryTask, IError>(\n    `/query_tasks/${query_task_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Async Query Results\n *\n * Returns the results of an async query task if the query has completed.\n *\n * If the query task is still running or waiting to run, this function returns 204 No Content.\n *\n * If the query task ID is invalid or the cached results of the query task have expired, this function returns 404 Not Found.\n *\n * Use [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task\n * Call query_task_results only after the query task status reaches \"Complete\".\n *\n * You can also use [query_task_multi_results()](#!/Query/query_task_multi_results) retrieve the\n * results of multiple async query tasks at the same time.\n *\n * #### SQL Error Handling:\n * If the query fails due to a SQL db error, how this is communicated depends on the result_format you requested in `create_query_task()`.\n *\n * For `json_detail` result_format: `query_task_results()` will respond with HTTP status '200 OK' and db SQL error info\n * will be in the `errors` property of the response object. The 'data' property will be empty.\n *\n * For all other result formats: `query_task_results()` will respond with HTTP status `400 Bad Request` and some db SQL error info\n * will be in the message of the 400 error response, but not as detailed as expressed in `json_detail.errors`.\n * These data formats can only carry row data, and error info is not row data.\n *\n * GET /query_tasks/{query_task_id}/results -> string\n *\n * @param sdk IAPIMethods implementation\n * @param query_task_id ID of the Query Task\n * @param options one-time API call overrides\n *\n */\nexport const query_task_results = async (\n  sdk: IAPIMethods,\n  query_task_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  query_task_id = encodeParam(query_task_id)\n  return sdk.get<string, IError>(\n    `/query_tasks/${query_task_id}/results`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get a previously created query by id.\n *\n * A Looker query object includes the various parameters that define a database query that has been run or\n * could be run in the future. These parameters include: model, view, fields, filters, pivots, etc.\n * Query *results* are not part of the query object.\n *\n * Query objects are unique and immutable. Query objects are created automatically in Looker as users explore data.\n * Looker does not delete them; they become part of the query history. When asked to create a query for\n * any given set of parameters, Looker will first try to find an existing query object with matching\n * parameters and will only create a new object when an appropriate object can not be found.\n *\n * This 'get' method is used to get the details about a query for a given id. See the other methods here\n * to 'create' and 'run' queries.\n *\n * Note that some fields like 'filter_config' and 'vis_config' etc are specific to how the Looker UI\n * builds queries and visualizations and are not generally useful for API use. They are not required when\n * creating new queries and can usually just be ignored.\n *\n * GET /queries/{query_id} -> IQuery\n *\n * @param sdk IAPIMethods implementation\n * @param query_id Id of query\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const query = async (\n  sdk: IAPIMethods,\n  query_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IQuery, IError>> => {\n  query_id = encodeParam(query_id)\n  return sdk.get<IQuery, IError>(\n    `/queries/${query_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the query for a given query slug.\n *\n * This returns the query for the 'slug' in a query share URL.\n *\n * The 'slug' is a randomly chosen short string that is used as an alternative to the query's id value\n * for use in URLs etc. This method exists as a convenience to help you use the API to 'find' queries that\n * have been created using the Looker UI.\n *\n * You can use the Looker explore page to build a query and then choose the 'Share' option to\n * show the share url for the query. Share urls generally look something like 'https://looker.yourcompany/x/vwGSbfc'.\n * The trailing 'vwGSbfc' is the share slug. You can pass that string to this api method to get details about the query.\n * Those details include the 'id' that you can use to run the query. Or, you can copy the query body\n * (perhaps with your own modification) and use that as the basis to make/run new queries.\n *\n * This will also work with slugs from Looker explore urls like\n * 'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'. In this case\n * 'aogBgL6o3cKK1jN3RoZl5s' is the slug.\n *\n * GET /queries/slug/{slug} -> IQuery\n *\n * @param sdk IAPIMethods implementation\n * @param slug Slug of query\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const query_for_slug = async (\n  sdk: IAPIMethods,\n  slug: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IQuery, IError>> => {\n  slug = encodeParam(slug)\n  return sdk.get<IQuery, IError>(\n    `/queries/slug/${slug}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a query.\n *\n * This allows you to create a new query that you can later run. Looker queries are immutable once created\n * and are not deleted. If you create a query that is exactly like an existing query then the existing query\n * will be returned and no new query will be created. Whether a new query is created or not, you can use\n * the 'id' in the returned query with the 'run' method.\n *\n * The query parameters are passed as json in the body of the request.\n *\n * POST /queries -> IQuery\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteQuery>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_query = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteQuery>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IQuery, IError | IValidationError>> => {\n  return sdk.post<IQuery, IError | IValidationError>(\n    '/queries',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Run a saved query.\n *\n * This runs a previously saved query. You can use this on a query that was generated in the Looker UI\n * or one that you have explicitly created using the API. You can also use a query 'id' from a saved 'Look'.\n *\n * The 'result_format' parameter specifies the desired structure and format of the response.\n *\n * Supported formats:\n *\n * | result_format | Description\n * | :-----------: | :--- |\n * | json | Plain json\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | md | Simple markdown\n * | xlsx | MS Excel spreadsheet\n * | sql | Returns the generated SQL rather than running the query\n * | png | A PNG image of the visualization of the query\n * | jpg | A JPG image of the visualization of the query\n *\n * GET /queries/{query_id}/run/{result_format} -> string\n *\n * @remarks\n * **NOTE**: Binary content may be returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestRunQuery\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const run_query = async (\n  sdk: IAPIMethods,\n  request: IRequestRunQuery,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  request.query_id = encodeParam(request.query_id)\n  request.result_format = encodeParam(request.result_format)\n  return sdk.get<string, IError | IValidationError>(\n    `/queries/${request.query_id}/run/${request.result_format}`,\n    {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs,\n      source: request.source,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Run the query that is specified inline in the posted body.\n *\n * This allows running a query as defined in json in the posted body. This combines\n * the two actions of posting & running a query into one step.\n *\n * Here is an example body in json:\n * ```\n * {\n *   \"model\":\"thelook\",\n *   \"view\":\"inventory_items\",\n *   \"fields\":[\"category.name\",\"inventory_items.days_in_inventory_tier\",\"products.count\"],\n *   \"filters\":{\"category.name\":\"socks\"},\n *   \"sorts\":[\"products.count desc 0\"],\n *   \"limit\":\"500\",\n *   \"query_timezone\":\"America/Los_Angeles\"\n * }\n * ```\n *\n * When using the Ruby SDK this would be passed as a Ruby hash like:\n * ```\n * {\n *  :model=>\"thelook\",\n *  :view=>\"inventory_items\",\n *  :fields=>\n *   [\"category.name\",\n *    \"inventory_items.days_in_inventory_tier\",\n *    \"products.count\"],\n *  :filters=>{:\"category.name\"=>\"socks\"},\n *  :sorts=>[\"products.count desc 0\"],\n *  :limit=>\"500\",\n *  :query_timezone=>\"America/Los_Angeles\",\n * }\n * ```\n *\n * This will return the result of running the query in the format specified by the 'result_format' parameter.\n *\n * Supported formats:\n *\n * | result_format | Description\n * | :-----------: | :--- |\n * | json | Plain json\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | md | Simple markdown\n * | xlsx | MS Excel spreadsheet\n * | sql | Returns the generated SQL rather than running the query\n * | png | A PNG image of the visualization of the query\n * | jpg | A JPG image of the visualization of the query\n *\n * POST /queries/run/{result_format} -> string\n *\n * @remarks\n * **NOTE**: Binary content may be returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestRunInlineQuery\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const run_inline_query = async (\n  sdk: IAPIMethods,\n  request: IRequestRunInlineQuery,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  request.result_format = encodeParam(request.result_format)\n  return sdk.post<string, IError | IValidationError>(\n    `/queries/run/${request.result_format}`,\n    {\n      limit: request.limit,\n      apply_formatting: request.apply_formatting,\n      apply_vis: request.apply_vis,\n      cache: request.cache,\n      image_width: request.image_width,\n      image_height: request.image_height,\n      generate_drill_links: request.generate_drill_links,\n      force_production: request.force_production,\n      cache_only: request.cache_only,\n      path_prefix: request.path_prefix,\n      rebuild_pdts: request.rebuild_pdts,\n      server_table_calcs: request.server_table_calcs,\n    },\n    request.body,\n    options\n  )\n}\n\n/**\n * ### Run an URL encoded query.\n *\n * This requires the caller to encode the specifiers for the query into the URL query part using\n * Looker-specific syntax as explained below.\n *\n * Generally, you would want to use one of the methods that takes the parameters as json in the POST body\n * for creating and/or running queries. This method exists for cases where one really needs to encode the\n * parameters into the URL of a single 'GET' request. This matches the way that the Looker UI formats\n * 'explore' URLs etc.\n *\n * The parameters here are very similar to the json body formatting except that the filter syntax is\n * tricky. Unfortunately, this format makes this method not currently callable via the 'Try it out!' button\n * in this documentation page. But, this is callable when creating URLs manually or when using the Looker SDK.\n *\n * Here is an example inline query URL:\n *\n * ```\n * https://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles\n * ```\n *\n * When invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:\n *\n * ```ruby\n * query_params =\n * {\n *   fields: \"category.name,inventory_items.days_in_inventory_tier,products.count\",\n *   :\"f[category.name]\" => \"socks\",\n *   sorts: \"products.count desc 0\",\n *   limit: \"500\",\n *   query_timezone: \"America/Los_Angeles\"\n * }\n * response = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json', query_params)\n *\n * ```\n *\n * Again, it is generally easier to use the variant of this method that passes the full query in the POST body.\n * This method is available for cases where other alternatives won't fit the need.\n *\n * Supported formats:\n *\n * | result_format | Description\n * | :-----------: | :--- |\n * | json | Plain json\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | md | Simple markdown\n * | xlsx | MS Excel spreadsheet\n * | sql | Returns the generated SQL rather than running the query\n * | png | A PNG image of the visualization of the query\n * | jpg | A JPG image of the visualization of the query\n *\n * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string\n *\n * @remarks\n * **NOTE**: Binary content may be returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param model_name Model name\n * @param view_name View name\n * @param result_format Format of result\n * @param options one-time API call overrides\n *\n */\nexport const run_url_encoded_query = async (\n  sdk: IAPIMethods,\n  model_name: string,\n  view_name: string,\n  result_format: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  model_name = encodeParam(model_name)\n  view_name = encodeParam(view_name)\n  result_format = encodeParam(result_format)\n  return sdk.get<string, IError | IValidationError>(\n    `/queries/models/${model_name}/views/${view_name}/run/${result_format}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Merge Query\n *\n * Returns a merge query object given its id.\n *\n * GET /merge_queries/{merge_query_id} -> IMergeQuery\n *\n * @param sdk IAPIMethods implementation\n * @param merge_query_id Merge Query Id\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const merge_query = async (\n  sdk: IAPIMethods,\n  merge_query_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMergeQuery, IError>> => {\n  merge_query_id = encodeParam(merge_query_id)\n  return sdk.get<IMergeQuery, IError>(\n    `/merge_queries/${merge_query_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create Merge Query\n *\n * Creates a new merge query object.\n *\n * A merge query takes the results of one or more queries and combines (merges) the results\n * according to field mapping definitions. The result is similar to a SQL left outer join.\n *\n * A merge query can merge results of queries from different SQL databases.\n *\n * The order that queries are defined in the source_queries array property is significant. The\n * first query in the array defines the primary key into which the results of subsequent\n * queries will be merged.\n *\n * Like model/view query objects, merge queries are immutable and have structural identity - if\n * you make a request to create a new merge query that is identical to an existing merge query,\n * the existing merge query will be returned instead of creating a duplicate. Conversely, any\n * change to the contents of a merge query will produce a new object with a new id.\n *\n * POST /merge_queries -> IMergeQuery\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteMergeQuery>\n * @param fields Requested fields\n * @param options one-time API call overrides\n *\n */\nexport const create_merge_query = async (\n  sdk: IAPIMethods,\n  body?: Partial<IWriteMergeQuery>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IMergeQuery, IError | IValidationError>> => {\n  return sdk.post<IMergeQuery, IError | IValidationError>(\n    '/merge_queries',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * Get information about all running queries.\n *\n * GET /running_queries -> IRunningQueries[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_running_queries = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRunningQueries[], IError>> => {\n  return sdk.get<IRunningQueries[], IError>(\n    '/running_queries',\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Kill a query with a specific query_task_id.\n *\n * DELETE /running_queries/{query_task_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param query_task_id Query task id.\n * @param options one-time API call overrides\n *\n */\nexport const kill_query = async (\n  sdk: IAPIMethods,\n  query_task_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  query_task_id = encodeParam(query_task_id)\n  return sdk.delete<string, IError | IValidationError>(\n    `/running_queries/${query_task_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * Get a SQL Runner query.\n *\n * GET /sql_queries/{slug} -> ISqlQuery\n *\n * @param sdk IAPIMethods implementation\n * @param slug slug of query\n * @param options one-time API call overrides\n *\n */\nexport const sql_query = async (\n  sdk: IAPIMethods,\n  slug: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISqlQuery, IError>> => {\n  slug = encodeParam(slug)\n  return sdk.get<ISqlQuery, IError>(`/sql_queries/${slug}`, null, null, options)\n}\n\n/**\n * ### Create a SQL Runner Query\n *\n * Either the `connection_name` or `model_name` parameter MUST be provided.\n *\n * POST /sql_queries -> ISqlQuery\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ISqlQueryCreate>\n * @param options one-time API call overrides\n *\n */\nexport const create_sql_query = async (\n  sdk: IAPIMethods,\n  body: Partial<ISqlQueryCreate>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISqlQuery, IError | IValidationError>> => {\n  return sdk.post<ISqlQuery, IError | IValidationError>(\n    '/sql_queries',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * Execute a SQL Runner query in a given result_format.\n *\n * POST /sql_queries/{slug}/run/{result_format} -> string\n *\n * @remarks\n * **NOTE**: Binary content may be returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param slug slug of query\n * @param result_format Format of result, options are: [\"inline_json\", \"json\", \"json_detail\", \"json_fe\", \"csv\", \"html\", \"md\", \"txt\", \"xlsx\", \"gsxml\", \"json_label\"]\n * @param download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.\n * @param options one-time API call overrides\n *\n */\nexport const run_sql_query = async (\n  sdk: IAPIMethods,\n  slug: string,\n  result_format: string,\n  download?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError | IValidationError>> => {\n  slug = encodeParam(slug)\n  result_format = encodeParam(result_format)\n  return sdk.post<string, IError | IValidationError>(\n    `/sql_queries/${slug}/run/${result_format}`,\n    { download },\n    null,\n    options\n  )\n}\n\n//#endregion Query: Run and Manage Queries\n\n//#region RenderTask: Manage Render Tasks\n\n/**\n * ### Create a new task to render a look to an image.\n *\n * Returns a render task object.\n * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n *\n * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask\n *\n * @param sdk IAPIMethods implementation\n * @param look_id Id of look to render\n * @param result_format Output type: png, or jpg\n * @param width Output width in pixels\n * @param height Output height in pixels\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_look_render_task = async (\n  sdk: IAPIMethods,\n  look_id: string,\n  result_format: string,\n  width: number,\n  height: number,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRenderTask, IError | IValidationError>> => {\n  look_id = encodeParam(look_id)\n  result_format = encodeParam(result_format)\n  return sdk.post<IRenderTask, IError | IValidationError>(\n    `/render_tasks/looks/${look_id}/${result_format}`,\n    { width, height, fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new task to render an existing query to an image.\n *\n * Returns a render task object.\n * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n *\n * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask\n *\n * @param sdk IAPIMethods implementation\n * @param query_id Id of the query to render\n * @param result_format Output type: png or jpg\n * @param width Output width in pixels\n * @param height Output height in pixels\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_query_render_task = async (\n  sdk: IAPIMethods,\n  query_id: string,\n  result_format: string,\n  width: number,\n  height: number,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRenderTask, IError | IValidationError>> => {\n  query_id = encodeParam(query_id)\n  result_format = encodeParam(result_format)\n  return sdk.post<IRenderTask, IError | IValidationError>(\n    `/render_tasks/queries/${query_id}/${result_format}`,\n    { width, height, fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new task to render a dashboard to a document or image.\n *\n * Returns a render task object.\n * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n *\n * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestCreateDashboardRenderTask\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard_render_task = async (\n  sdk: IAPIMethods,\n  request: IRequestCreateDashboardRenderTask,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRenderTask, IError | IValidationError>> => {\n  request.dashboard_id = encodeParam(request.dashboard_id)\n  request.result_format = encodeParam(request.result_format)\n  return sdk.post<IRenderTask, IError | IValidationError>(\n    `/render_tasks/dashboards/${request.dashboard_id}/${request.result_format}`,\n    {\n      width: request.width,\n      height: request.height,\n      fields: request.fields,\n      pdf_paper_size: request.pdf_paper_size,\n      pdf_landscape: request.pdf_landscape,\n      long_tables: request.long_tables,\n    },\n    request.body,\n    options\n  )\n}\n\n/**\n * ### Get information about a render task.\n *\n * Returns a render task object.\n * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n *\n * GET /render_tasks/{render_task_id} -> IRenderTask\n *\n * @param sdk IAPIMethods implementation\n * @param render_task_id Id of render task\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const render_task = async (\n  sdk: IAPIMethods,\n  render_task_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRenderTask, IError>> => {\n  render_task_id = encodeParam(render_task_id)\n  return sdk.get<IRenderTask, IError>(\n    `/render_tasks/${render_task_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the document or image produced by a completed render task.\n *\n * Note that the PDF or image result will be a binary blob in the HTTP response, as indicated by the\n * Content-Type in the response headers. This may require specialized (or at least different) handling than text\n * responses such as JSON. You may need to tell your HTTP client that the response is binary so that it does not\n * attempt to parse the binary data as text.\n *\n * If the render task exists but has not finished rendering the results, the response HTTP status will be\n * **202 Accepted**, the response body will be empty, and the response will have a Retry-After header indicating\n * that the caller should repeat the request at a later time.\n *\n * Returns 404 if the render task cannot be found, if the cached result has expired, or if the caller\n * does not have permission to view the results.\n *\n * For detailed information about the status of the render task, use [Render Task](#!/RenderTask/render_task).\n * Polling loops waiting for completion of a render task would be better served by polling **render_task(id)** until\n * the task status reaches completion (or error) instead of polling **render_task_results(id)** alone.\n *\n * GET /render_tasks/{render_task_id}/results -> string\n *\n * @remarks\n * **NOTE**: Binary content is returned by this function.\n *\n * @param sdk IAPIMethods implementation\n * @param render_task_id Id of render task\n * @param options one-time API call overrides\n *\n */\nexport const render_task_results = async (\n  sdk: IAPIMethods,\n  render_task_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  render_task_id = encodeParam(render_task_id)\n  return sdk.get<string, IError>(\n    `/render_tasks/${render_task_id}/results`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new task to render a dashboard element to an image.\n *\n * Returns a render task object.\n * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n *\n * POST /render_tasks/dashboard_elements/{dashboard_element_id}/{result_format} -> IRenderTask\n *\n * @param sdk IAPIMethods implementation\n * @param dashboard_element_id Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id\n * @param result_format Output type: png or jpg\n * @param width Output width in pixels\n * @param height Output height in pixels\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_dashboard_element_render_task = async (\n  sdk: IAPIMethods,\n  dashboard_element_id: string,\n  result_format: string,\n  width: number,\n  height: number,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRenderTask, IError | IValidationError>> => {\n  dashboard_element_id = encodeParam(dashboard_element_id)\n  result_format = encodeParam(result_format)\n  return sdk.post<IRenderTask, IError | IValidationError>(\n    `/render_tasks/dashboard_elements/${dashboard_element_id}/${result_format}`,\n    { width, height, fields },\n    null,\n    options\n  )\n}\n\n//#endregion RenderTask: Manage Render Tasks\n\n//#region Role: Manage Roles\n\n/**\n * ### Search model sets\n * Returns all model set records that match the given search criteria.\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /model_sets/search -> IModelSet[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchModelSets\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_model_sets = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchModelSets,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModelSet[], IError>> => {\n  return sdk.get<IModelSet[], IError>(\n    '/model_sets/search',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      all_access: request.all_access,\n      built_in: request.built_in,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the model set with a specific id.\n *\n * GET /model_sets/{model_set_id} -> IModelSet\n *\n * @param sdk IAPIMethods implementation\n * @param model_set_id Id of model set\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const model_set = async (\n  sdk: IAPIMethods,\n  model_set_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModelSet, IError>> => {\n  model_set_id = encodeParam(model_set_id)\n  return sdk.get<IModelSet, IError>(\n    `/model_sets/${model_set_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update information about the model set with a specific id.\n *\n * PATCH /model_sets/{model_set_id} -> IModelSet\n *\n * @param sdk IAPIMethods implementation\n * @param model_set_id id of model set\n * @param body Partial<IWriteModelSet>\n * @param options one-time API call overrides\n *\n */\nexport const update_model_set = async (\n  sdk: IAPIMethods,\n  model_set_id: string,\n  body: Partial<IWriteModelSet>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModelSet, IError | IValidationError>> => {\n  model_set_id = encodeParam(model_set_id)\n  return sdk.patch<IModelSet, IError | IValidationError>(\n    `/model_sets/${model_set_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete the model set with a specific id.\n *\n * DELETE /model_sets/{model_set_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param model_set_id id of model set\n * @param options one-time API call overrides\n *\n */\nexport const delete_model_set = async (\n  sdk: IAPIMethods,\n  model_set_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  model_set_id = encodeParam(model_set_id)\n  return sdk.delete<string, IError>(\n    `/model_sets/${model_set_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all model sets.\n *\n * GET /model_sets -> IModelSet[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_model_sets = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModelSet[], IError>> => {\n  return sdk.get<IModelSet[], IError>('/model_sets', { fields }, null, options)\n}\n\n/**\n * ### Create a model set with the specified information. Model sets are used by Roles.\n *\n * POST /model_sets -> IModelSet\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteModelSet>\n * @param options one-time API call overrides\n *\n */\nexport const create_model_set = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteModelSet>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IModelSet, IError | IValidationError>> => {\n  return sdk.post<IModelSet, IError | IValidationError>(\n    '/model_sets',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get all supported permissions.\n *\n * GET /permissions -> IPermission[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_permissions = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPermission[], IError>> => {\n  return sdk.get<IPermission[], IError>('/permissions', null, null, options)\n}\n\n/**\n * ### Search permission sets\n * Returns all permission set records that match the given search criteria.\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /permission_sets/search -> IPermissionSet[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchPermissionSets\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_permission_sets = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchPermissionSets,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPermissionSet[], IError>> => {\n  return sdk.get<IPermissionSet[], IError>(\n    '/permission_sets/search',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      all_access: request.all_access,\n      built_in: request.built_in,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the permission set with a specific id.\n *\n * GET /permission_sets/{permission_set_id} -> IPermissionSet\n *\n * @param sdk IAPIMethods implementation\n * @param permission_set_id Id of permission set\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const permission_set = async (\n  sdk: IAPIMethods,\n  permission_set_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPermissionSet, IError>> => {\n  permission_set_id = encodeParam(permission_set_id)\n  return sdk.get<IPermissionSet, IError>(\n    `/permission_sets/${permission_set_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update information about the permission set with a specific id.\n *\n * PATCH /permission_sets/{permission_set_id} -> IPermissionSet\n *\n * @param sdk IAPIMethods implementation\n * @param permission_set_id Id of permission set\n * @param body Partial<IWritePermissionSet>\n * @param options one-time API call overrides\n *\n */\nexport const update_permission_set = async (\n  sdk: IAPIMethods,\n  permission_set_id: string,\n  body: Partial<IWritePermissionSet>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPermissionSet, IError | IValidationError>> => {\n  permission_set_id = encodeParam(permission_set_id)\n  return sdk.patch<IPermissionSet, IError | IValidationError>(\n    `/permission_sets/${permission_set_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete the permission set with a specific id.\n *\n * DELETE /permission_sets/{permission_set_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param permission_set_id Id of permission set\n * @param options one-time API call overrides\n *\n */\nexport const delete_permission_set = async (\n  sdk: IAPIMethods,\n  permission_set_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  permission_set_id = encodeParam(permission_set_id)\n  return sdk.delete<string, IError>(\n    `/permission_sets/${permission_set_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about all permission sets.\n *\n * GET /permission_sets -> IPermissionSet[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_permission_sets = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPermissionSet[], IError>> => {\n  return sdk.get<IPermissionSet[], IError>(\n    '/permission_sets',\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a permission set with the specified information. Permission sets are used by Roles.\n *\n * POST /permission_sets -> IPermissionSet\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWritePermissionSet>\n * @param options one-time API call overrides\n *\n */\nexport const create_permission_set = async (\n  sdk: IAPIMethods,\n  body: Partial<IWritePermissionSet>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IPermissionSet, IError | IValidationError>> => {\n  return sdk.post<IPermissionSet, IError | IValidationError>(\n    '/permission_sets',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about all roles.\n *\n * GET /roles -> IRole[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllRoles\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_roles = async (\n  sdk: IAPIMethods,\n  request: IRequestAllRoles,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole[], IError>> => {\n  return sdk.get<IRole[], IError>(\n    '/roles',\n    { fields: request.fields, ids: request.ids },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a role with the specified information.\n *\n * POST /roles -> IRole\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteRole>\n * @param options one-time API call overrides\n *\n */\nexport const create_role = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteRole>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole, IError | IValidationError>> => {\n  return sdk.post<IRole, IError | IValidationError>(\n    '/roles',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Search roles\n *\n * Returns all role records that match the given search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /roles/search -> IRole[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchRoles\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_roles = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchRoles,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole[], IError>> => {\n  return sdk.get<IRole[], IError>(\n    '/roles/search',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      built_in: request.built_in,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search roles include user count\n *\n * Returns all role records that match the given search criteria, and attaches\n * associated user counts.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /roles/search/with_user_count -> IRoleSearch[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchRolesWithUserCount\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_roles_with_user_count = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchRolesWithUserCount,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRoleSearch[], IError>> => {\n  return sdk.get<IRoleSearch[], IError>(\n    '/roles/search/with_user_count',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      name: request.name,\n      built_in: request.built_in,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the role with a specific id.\n *\n * GET /roles/{role_id} -> IRole\n *\n * @param sdk IAPIMethods implementation\n * @param role_id id of role\n * @param options one-time API call overrides\n *\n */\nexport const role = async (\n  sdk: IAPIMethods,\n  role_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole, IError>> => {\n  role_id = encodeParam(role_id)\n  return sdk.get<IRole, IError>(`/roles/${role_id}`, null, null, options)\n}\n\n/**\n * ### Update information about the role with a specific id.\n *\n * PATCH /roles/{role_id} -> IRole\n *\n * @param sdk IAPIMethods implementation\n * @param role_id id of role\n * @param body Partial<IWriteRole>\n * @param options one-time API call overrides\n *\n */\nexport const update_role = async (\n  sdk: IAPIMethods,\n  role_id: string,\n  body: Partial<IWriteRole>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole, IError | IValidationError>> => {\n  role_id = encodeParam(role_id)\n  return sdk.patch<IRole, IError | IValidationError>(\n    `/roles/${role_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete the role with a specific id.\n *\n * DELETE /roles/{role_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param role_id id of role\n * @param options one-time API call overrides\n *\n */\nexport const delete_role = async (\n  sdk: IAPIMethods,\n  role_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  role_id = encodeParam(role_id)\n  return sdk.delete<string, IError>(`/roles/${role_id}`, null, null, options)\n}\n\n/**\n * ### Get information about all the groups with the role that has a specific id.\n *\n * GET /roles/{role_id}/groups -> IGroup[]\n *\n * @param sdk IAPIMethods implementation\n * @param role_id id of role\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const role_groups = async (\n  sdk: IAPIMethods,\n  role_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup[], IError>> => {\n  role_id = encodeParam(role_id)\n  return sdk.get<IGroup[], IError>(\n    `/roles/${role_id}/groups`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Set all groups for a role, removing all existing group associations from that role.\n *\n * PUT /roles/{role_id}/groups -> IGroup[]\n *\n * @param sdk IAPIMethods implementation\n * @param role_id id of role\n * @param body Partial<string[]>\n * @param options one-time API call overrides\n *\n */\nexport const set_role_groups = async (\n  sdk: IAPIMethods,\n  role_id: string,\n  body: Partial<string[]>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IGroup[], IError | IValidationError>> => {\n  role_id = encodeParam(role_id)\n  return sdk.put<IGroup[], IError | IValidationError>(\n    `/roles/${role_id}/groups`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about all the users with the role that has a specific id.\n *\n * GET /roles/{role_id}/users -> IUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestRoleUsers\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const role_users = async (\n  sdk: IAPIMethods,\n  request: IRequestRoleUsers,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser[], IError>> => {\n  request.role_id = encodeParam(request.role_id)\n  return sdk.get<IUser[], IError>(\n    `/roles/${request.role_id}/users`,\n    {\n      fields: request.fields,\n      direct_association_only: request.direct_association_only,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Set all the users of the role with a specific id.\n *\n * PUT /roles/{role_id}/users -> IUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param role_id id of role\n * @param body Partial<string[]>\n * @param options one-time API call overrides\n *\n */\nexport const set_role_users = async (\n  sdk: IAPIMethods,\n  role_id: string,\n  body: Partial<string[]>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser[], IError | IValidationError>> => {\n  role_id = encodeParam(role_id)\n  return sdk.put<IUser[], IError | IValidationError>(\n    `/roles/${role_id}/users`,\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion Role: Manage Roles\n\n//#region ScheduledPlan: Manage Scheduled Plans\n\n/**\n * ### Get Scheduled Plans for a Space\n *\n * Returns scheduled plans owned by the caller for a given space id.\n *\n * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]\n *\n * @param sdk IAPIMethods implementation\n * @param space_id Space Id\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plans_for_space = async (\n  sdk: IAPIMethods,\n  space_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan[], IError>> => {\n  space_id = encodeParam(space_id)\n  return sdk.get<IScheduledPlan[], IError>(\n    `/scheduled_plans/space/${space_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Information About a Scheduled Plan\n *\n * Admins can fetch information about other users' Scheduled Plans.\n *\n * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan\n *\n * @param sdk IAPIMethods implementation\n * @param scheduled_plan_id Scheduled Plan Id\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plan = async (\n  sdk: IAPIMethods,\n  scheduled_plan_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan, IError>> => {\n  scheduled_plan_id = encodeParam(scheduled_plan_id)\n  return sdk.get<IScheduledPlan, IError>(\n    `/scheduled_plans/${scheduled_plan_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a Scheduled Plan\n *\n * Admins can update other users' Scheduled Plans.\n *\n * Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations\n * currently defined for the scheduled plan.\n *\n * For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan\n * specifying only B in the destinations, then destinations A and C will be deleted by the update.\n *\n * Updating a scheduled plan to assign null or an empty array to the scheduled_plan_destinations property is an error, as a scheduled plan must always have at least one destination.\n *\n * If you omit the scheduled_plan_destinations property from the object passed to update, then the destinations\n * defined on the original scheduled plan will remain unchanged.\n *\n * #### Email Permissions:\n *\n * For details about permissions required to schedule delivery to email and the safeguards\n * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n *\n *\n * #### Scheduled Plan Destination Formats\n *\n * Scheduled plan destinations must specify the data format to produce and send to the destination.\n *\n * Formats:\n *\n * | format | Description\n * | :-----------: | :--- |\n * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | xlsx | MS Excel spreadsheet\n * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n * ||\n *\n * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n *\n * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan\n *\n * @param sdk IAPIMethods implementation\n * @param scheduled_plan_id Scheduled Plan Id\n * @param body Partial<IWriteScheduledPlan>\n * @param options one-time API call overrides\n *\n */\nexport const update_scheduled_plan = async (\n  sdk: IAPIMethods,\n  scheduled_plan_id: string,\n  body: Partial<IWriteScheduledPlan>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan, IError | IValidationError>> => {\n  scheduled_plan_id = encodeParam(scheduled_plan_id)\n  return sdk.patch<IScheduledPlan, IError | IValidationError>(\n    `/scheduled_plans/${scheduled_plan_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a Scheduled Plan\n *\n * Normal users can only delete their own scheduled plans.\n * Admins can delete other users' scheduled plans.\n * This delete cannot be undone.\n *\n * DELETE /scheduled_plans/{scheduled_plan_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param scheduled_plan_id Scheduled Plan Id\n * @param options one-time API call overrides\n *\n */\nexport const delete_scheduled_plan = async (\n  sdk: IAPIMethods,\n  scheduled_plan_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  scheduled_plan_id = encodeParam(scheduled_plan_id)\n  return sdk.delete<string, IError>(\n    `/scheduled_plans/${scheduled_plan_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### List All Scheduled Plans\n *\n * Returns all scheduled plans which belong to the caller or given user.\n *\n * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n *\n *\n * To list all schedules for all users, pass `all_users=true`.\n *\n *\n * The caller must have `see_schedules` permission to see other users' scheduled plans.\n *\n * GET /scheduled_plans -> IScheduledPlan[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllScheduledPlans\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_scheduled_plans = async (\n  sdk: IAPIMethods,\n  request: IRequestAllScheduledPlans,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan[], IError | IValidationError>> => {\n  return sdk.get<IScheduledPlan[], IError | IValidationError>(\n    '/scheduled_plans',\n    {\n      user_id: request.user_id,\n      fields: request.fields,\n      all_users: request.all_users,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a Scheduled Plan\n *\n * Create a scheduled plan to render a Look or Dashboard on a recurring schedule.\n *\n * To create a scheduled plan, you MUST provide values for the following fields:\n * `name`\n * and\n * `look_id`, `dashboard_id`, `lookml_dashboard_id`, or `query_id`\n * and\n * `cron_tab` or `datagroup`\n * and\n * at least one scheduled_plan_destination\n *\n * A scheduled plan MUST have at least one scheduled_plan_destination defined.\n *\n * When `look_id` is set, `require_no_results`, `require_results`, and `require_change` are all required.\n *\n * If `create_scheduled_plan` fails with a 422 error, be sure to look at the error messages in the response which will explain exactly what fields are missing or values that are incompatible.\n *\n * The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.\n *\n * When `run_as_recipient` is `false` or not specified, the queries that provide the data for the\n * look or dashboard are run in the context of user account that owns the scheduled plan.\n *\n * When `run_as_recipient` is `true` and all the email recipients are Looker user accounts, the\n * queries are run in the context of each recipient, so different recipients may see different\n * data from the same scheduled render of a look or dashboard. For more details, see [Run As Recipient](https://docs.looker.com/r/admin/run-as-recipient).\n *\n * Admins can create and modify scheduled plans on behalf of other users by specifying a user id.\n * Non-admin users may not create or modify scheduled plans by or for other users.\n *\n * #### Email Permissions:\n *\n * For details about permissions required to schedule delivery to email and the safeguards\n * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n *\n *\n * #### Scheduled Plan Destination Formats\n *\n * Scheduled plan destinations must specify the data format to produce and send to the destination.\n *\n * Formats:\n *\n * | format | Description\n * | :-----------: | :--- |\n * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | xlsx | MS Excel spreadsheet\n * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n * ||\n *\n * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n *\n * POST /scheduled_plans -> IScheduledPlan\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteScheduledPlan>\n * @param options one-time API call overrides\n *\n */\nexport const create_scheduled_plan = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteScheduledPlan>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan, IError | IValidationError>> => {\n  return sdk.post<IScheduledPlan, IError | IValidationError>(\n    '/scheduled_plans',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Run a Scheduled Plan Immediately\n *\n * Create a scheduled plan that runs only once, and immediately.\n *\n * This can be useful for testing a Scheduled Plan before committing to a production schedule.\n *\n * Admins can create scheduled plans on behalf of other users by specifying a user id.\n *\n * This API is rate limited to prevent it from being used for relay spam or DoS attacks\n *\n * #### Email Permissions:\n *\n * For details about permissions required to schedule delivery to email and the safeguards\n * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n *\n *\n * #### Scheduled Plan Destination Formats\n *\n * Scheduled plan destinations must specify the data format to produce and send to the destination.\n *\n * Formats:\n *\n * | format | Description\n * | :-----------: | :--- |\n * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | xlsx | MS Excel spreadsheet\n * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n * ||\n *\n * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n *\n * POST /scheduled_plans/run_once -> IScheduledPlan\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteScheduledPlan>\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plan_run_once = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteScheduledPlan>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan, IError | IValidationError>> => {\n  return sdk.post<IScheduledPlan, IError | IValidationError>(\n    '/scheduled_plans/run_once',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get Scheduled Plans for a Look\n *\n * Returns all scheduled plans for a look which belong to the caller or given user.\n *\n * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n *\n *\n * To list all schedules for all users, pass `all_users=true`.\n *\n *\n * The caller must have `see_schedules` permission to see other users' scheduled plans.\n *\n * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestScheduledPlansForLook\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plans_for_look = async (\n  sdk: IAPIMethods,\n  request: IRequestScheduledPlansForLook,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan[], IError>> => {\n  request.look_id = encodeParam(request.look_id)\n  return sdk.get<IScheduledPlan[], IError>(\n    `/scheduled_plans/look/${request.look_id}`,\n    {\n      user_id: request.user_id,\n      fields: request.fields,\n      all_users: request.all_users,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Scheduled Plans for a Dashboard\n *\n * Returns all scheduled plans for a dashboard which belong to the caller or given user.\n *\n * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n *\n *\n * To list all schedules for all users, pass `all_users=true`.\n *\n *\n * The caller must have `see_schedules` permission to see other users' scheduled plans.\n *\n * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestScheduledPlansForDashboard\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plans_for_dashboard = async (\n  sdk: IAPIMethods,\n  request: IRequestScheduledPlansForDashboard,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan[], IError>> => {\n  request.dashboard_id = encodeParam(request.dashboard_id)\n  return sdk.get<IScheduledPlan[], IError>(\n    `/scheduled_plans/dashboard/${request.dashboard_id}`,\n    {\n      user_id: request.user_id,\n      all_users: request.all_users,\n      fields: request.fields,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get Scheduled Plans for a LookML Dashboard\n *\n * Returns all scheduled plans for a LookML Dashboard which belong to the caller or given user.\n *\n * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n *\n *\n * To list all schedules for all users, pass `all_users=true`.\n *\n *\n * The caller must have `see_schedules` permission to see other users' scheduled plans.\n *\n * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestScheduledPlansForLookmlDashboard\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plans_for_lookml_dashboard = async (\n  sdk: IAPIMethods,\n  request: IRequestScheduledPlansForLookmlDashboard,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan[], IError>> => {\n  request.lookml_dashboard_id = encodeParam(request.lookml_dashboard_id)\n  return sdk.get<IScheduledPlan[], IError>(\n    `/scheduled_plans/lookml_dashboard/${request.lookml_dashboard_id}`,\n    {\n      user_id: request.user_id,\n      fields: request.fields,\n      all_users: request.all_users,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Run a Scheduled Plan By Id Immediately\n * This function creates a run-once schedule plan based on an existing scheduled plan,\n * applies modifications (if any) to the new scheduled plan, and runs the new schedule plan immediately.\n * This can be useful for testing modifications to an existing scheduled plan before committing to a production schedule.\n *\n * This function internally performs the following operations:\n *\n * 1. Copies the properties of the existing scheduled plan into a new scheduled plan\n * 2. Copies any properties passed in the JSON body of this request into the new scheduled plan (replacing the original values)\n * 3. Creates the new scheduled plan\n * 4. Runs the new scheduled plan\n *\n * The original scheduled plan is not modified by this operation.\n * Admins can create, modify, and run scheduled plans on behalf of other users by specifying a user id.\n * Non-admins can only create, modify, and run their own scheduled plans.\n *\n * #### Email Permissions:\n *\n * For details about permissions required to schedule delivery to email and the safeguards\n * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n *\n *\n * #### Scheduled Plan Destination Formats\n *\n * Scheduled plan destinations must specify the data format to produce and send to the destination.\n *\n * Formats:\n *\n * | format | Description\n * | :-----------: | :--- |\n * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n * | csv | Comma separated values with a header\n * | txt | Tab separated values with a header\n * | html | Simple html\n * | xlsx | MS Excel spreadsheet\n * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n * ||\n *\n * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n *\n *\n *\n * This API is rate limited to prevent it from being used for relay spam or DoS attacks\n *\n * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan\n *\n * @param sdk IAPIMethods implementation\n * @param scheduled_plan_id Id of schedule plan to copy and run\n * @param body Partial<IWriteScheduledPlan>\n * @param options one-time API call overrides\n *\n */\nexport const scheduled_plan_run_once_by_id = async (\n  sdk: IAPIMethods,\n  scheduled_plan_id: string,\n  body?: Partial<IWriteScheduledPlan>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IScheduledPlan, IError | IValidationError>> => {\n  scheduled_plan_id = encodeParam(scheduled_plan_id)\n  return sdk.post<IScheduledPlan, IError | IValidationError>(\n    `/scheduled_plans/${scheduled_plan_id}/run_once`,\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion ScheduledPlan: Manage Scheduled Plans\n\n//#region Session: Session Information\n\n/**\n * ### Get API Session\n *\n * Returns information about the current API session, such as which workspace is selected for the session.\n *\n * GET /session -> IApiSession\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const session = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IApiSession, IError>> => {\n  return sdk.get<IApiSession, IError>('/session', null, null, options)\n}\n\n/**\n * ### Update API Session\n *\n * #### API Session Workspace\n *\n * You can use this endpoint to change the active workspace for the current API session.\n *\n * Only one workspace can be active in a session. The active workspace can be changed\n * any number of times in a session.\n *\n * The default workspace for API sessions is the \"production\" workspace.\n *\n * All Looker APIs that use projects or lookml models (such as running queries) will\n * use the version of project and model files defined by this workspace for the lifetime of the\n * current API session or until the session workspace is changed again.\n *\n * An API session has the same lifetime as the access_token used to authenticate API requests. Each successful\n * API login generates a new access_token and a new API session.\n *\n * If your Looker API client application needs to work in a dev workspace across multiple\n * API sessions, be sure to select the dev workspace after each login.\n *\n * PATCH /session -> IApiSession\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteApiSession>\n * @param options one-time API call overrides\n *\n */\nexport const update_session = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteApiSession>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IApiSession, IError | IValidationError>> => {\n  return sdk.patch<IApiSession, IError | IValidationError>(\n    '/session',\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion Session: Session Information\n\n//#region Theme: Manage Themes\n\n/**\n * ### Get an array of all existing themes\n *\n * Get a **single theme** by id with [Theme](#!/Theme/theme)\n *\n * This method returns an array of all existing themes. The active time for the theme is not considered.\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * GET /themes -> ITheme[]\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_themes = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme[], IError>> => {\n  return sdk.get<ITheme[], IError>('/themes', { fields }, null, options)\n}\n\n/**\n * ### Create a theme\n *\n * Creates a new theme object, returning the theme details, including the created id.\n *\n * If `settings` are not specified, the default theme settings will be copied into the new theme.\n *\n * The theme `name` can only contain alphanumeric characters or underscores. Theme names should not contain any confidential information, such as customer names.\n *\n * **Update** an existing theme with [Update Theme](#!/Theme/update_theme)\n *\n * **Permanently delete** an existing theme with [Delete Theme](#!/Theme/delete_theme)\n *\n * For more information, see [Creating and Applying Themes](https://docs.looker.com/r/admin/themes).\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * POST /themes -> ITheme\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteTheme>\n * @param options one-time API call overrides\n *\n */\nexport const create_theme = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteTheme>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme, IError | IValidationError>> => {\n  return sdk.post<ITheme, IError | IValidationError>(\n    '/themes',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Search all themes for matching criteria.\n *\n * Returns an **array of theme objects** that match the specified search criteria.\n *\n * | Search Parameters | Description\n * | :-------------------: | :------ |\n * | `begin_at` only | Find themes active at or after `begin_at`\n * | `end_at` only | Find themes active at or before `end_at`\n * | both set | Find themes with an active inclusive period between `begin_at` and `end_at`\n *\n * Note: Range matching requires boolean AND logic.\n * When using `begin_at` and `end_at` together, do not use `filter_or`=TRUE\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n *\n * Get a **single theme** by id with [Theme](#!/Theme/theme)\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * GET /themes/search -> ITheme[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchThemes\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_themes = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchThemes,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme[], IError>> => {\n  return sdk.get<ITheme[], IError>(\n    '/themes/search',\n    {\n      id: request.id,\n      name: request.name,\n      begin_at: request.begin_at,\n      end_at: request.end_at,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      fields: request.fields,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the default theme\n *\n * Returns the active theme object set as the default.\n *\n * The **default** theme name can be set in the UI on the Admin|Theme UI page\n *\n * The optional `ts` parameter can specify a different timestamp than \"now.\" If specified, it returns the default theme at the time indicated.\n *\n * GET /themes/default -> ITheme\n *\n * @param sdk IAPIMethods implementation\n * @param ts Timestamp representing the target datetime for the active period. Defaults to 'now'\n * @param options one-time API call overrides\n *\n */\nexport const default_theme = async (\n  sdk: IAPIMethods,\n  ts?: Date,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme, IError>> => {\n  return sdk.get<ITheme, IError>('/themes/default', { ts }, null, options)\n}\n\n/**\n * ### Set the global default theme by theme name\n *\n * Only Admin users can call this function.\n *\n * Only an active theme with no expiration (`end_at` not set) can be assigned as the default theme. As long as a theme has an active record with no expiration, it can be set as the default.\n *\n * [Create Theme](#!/Theme/create) has detailed information on rules for default and active themes\n *\n * Returns the new specified default theme object.\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * PUT /themes/default -> ITheme\n *\n * @param sdk IAPIMethods implementation\n * @param name Name of theme to set as default\n * @param options one-time API call overrides\n *\n */\nexport const set_default_theme = async (\n  sdk: IAPIMethods,\n  name: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme, IError | IValidationError>> => {\n  return sdk.put<ITheme, IError | IValidationError>(\n    '/themes/default',\n    { name },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get active themes\n *\n * Returns an array of active themes.\n *\n * If the `name` parameter is specified, it will return an array with one theme if it's active and found.\n *\n * The optional `ts` parameter can specify a different timestamp than \"now.\"\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * GET /themes/active -> ITheme[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestActiveThemes\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const active_themes = async (\n  sdk: IAPIMethods,\n  request: IRequestActiveThemes,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme[], IError>> => {\n  return sdk.get<ITheme[], IError>(\n    '/themes/active',\n    { name: request.name, ts: request.ts, fields: request.fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get the named theme if it's active. Otherwise, return the default theme\n *\n * The optional `ts` parameter can specify a different timestamp than \"now.\"\n * Note: API users with `show` ability can call this function\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * GET /themes/theme_or_default -> ITheme\n *\n * @param sdk IAPIMethods implementation\n * @param name Name of theme\n * @param ts Timestamp representing the target datetime for the active period. Defaults to 'now'\n * @param options one-time API call overrides\n *\n */\nexport const theme_or_default = async (\n  sdk: IAPIMethods,\n  name: string,\n  ts?: Date,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme, IError>> => {\n  return sdk.get<ITheme, IError>(\n    '/themes/theme_or_default',\n    { name, ts },\n    null,\n    options\n  )\n}\n\n/**\n * ### Validate a theme with the specified information\n *\n * Validates all values set for the theme, returning any errors encountered, or 200 OK if valid\n *\n * See [Create Theme](#!/Theme/create_theme) for constraints\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * POST /themes/validate -> IValidationError\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteTheme>\n * @param options one-time API call overrides\n *\n */\nexport const validate_theme = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteTheme>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IValidationError, IError | IValidationError>> => {\n  return sdk.post<IValidationError, IError | IValidationError>(\n    '/themes/validate',\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Get a theme by ID\n *\n * Use this to retrieve a specific theme, whether or not it's currently active.\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * GET /themes/{theme_id} -> ITheme\n *\n * @param sdk IAPIMethods implementation\n * @param theme_id Id of theme\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const theme = async (\n  sdk: IAPIMethods,\n  theme_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme, IError>> => {\n  theme_id = encodeParam(theme_id)\n  return sdk.get<ITheme, IError>(\n    `/themes/${theme_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update the theme by id.\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * PATCH /themes/{theme_id} -> ITheme\n *\n * @param sdk IAPIMethods implementation\n * @param theme_id Id of theme\n * @param body Partial<IWriteTheme>\n * @param options one-time API call overrides\n *\n */\nexport const update_theme = async (\n  sdk: IAPIMethods,\n  theme_id: string,\n  body: Partial<IWriteTheme>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ITheme, IError | IValidationError>> => {\n  theme_id = encodeParam(theme_id)\n  return sdk.patch<ITheme, IError | IValidationError>(\n    `/themes/${theme_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a specific theme by id\n *\n * This operation permanently deletes the identified theme from the database.\n *\n * Because multiple themes can have the same name (with different activation time spans) themes can only be deleted by ID.\n *\n * All IDs associated with a theme name can be retrieved by searching for the theme name with [Theme Search](#!/Theme/search).\n *\n * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n *\n * DELETE /themes/{theme_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param theme_id Id of theme\n * @param options one-time API call overrides\n *\n */\nexport const delete_theme = async (\n  sdk: IAPIMethods,\n  theme_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  theme_id = encodeParam(theme_id)\n  return sdk.delete<string, IError>(`/themes/${theme_id}`, null, null, options)\n}\n\n//#endregion Theme: Manage Themes\n\n//#region User: Manage Users\n\n/**\n * ### Search email credentials\n *\n * Returns all credentials_email records that match the given search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n * GET /credentials_email/search -> ICredentialsEmailSearch[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchCredentialsEmail\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_credentials_email = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchCredentialsEmail,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmailSearch[], IError>> => {\n  return sdk.get<ICredentialsEmailSearch[], IError>(\n    '/credentials_email/search',\n    {\n      fields: request.fields,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      email: request.email,\n      emails: request.emails,\n      filter_or: request.filter_or,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the current user; i.e. the user account currently calling the API.\n *\n * GET /user -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const me = async (\n  sdk: IAPIMethods,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError>> => {\n  return sdk.get<IUser, IError>('/user', { fields }, null, options)\n}\n\n/**\n * ### Get information about all users.\n *\n * GET /users -> IUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllUsers\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_users = async (\n  sdk: IAPIMethods,\n  request: IRequestAllUsers,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser[], IError>> => {\n  return sdk.get<IUser[], IError>(\n    '/users',\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      ids: request.ids,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a user with the specified information.\n *\n * POST /users -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteUser>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_user = async (\n  sdk: IAPIMethods,\n  body?: Partial<IWriteUser>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError | IValidationError>> => {\n  return sdk.post<IUser, IError | IValidationError>(\n    '/users',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Search users\n *\n * Returns all<sup>*</sup> user records that match the given search criteria.\n *\n * If multiple search params are given and `filter_or` is FALSE or not specified,\n * search params are combined in a logical AND operation.\n * Only rows that match *all* search param criteria will be returned.\n *\n * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n * Results will include rows that match **any** of the search criteria.\n *\n * String search params use case-insensitive matching.\n * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n * example=\"D_m%\" will match \"Damage\" and \"dump\"\n *\n * Integer search params can accept a single value or a comma separated list of values. The multiple\n * values will be combined under a logical OR operation - results will match at least one of\n * the given values.\n *\n * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n * or exclude (respectively) rows where the column is null.\n *\n * Boolean search params accept only \"true\" and \"false\" as values.\n *\n *\n * (<sup>*</sup>) Results are always filtered to the level of information the caller is permitted to view.\n * Looker admins can see all user details; normal users in an open system can see\n * names of other users but no details; normal users in a closed system can only see\n * names of other users who are members of the same group as the user.\n *\n * GET /users/search -> IUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchUsers\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_users = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchUsers,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser[], IError>> => {\n  return sdk.get<IUser[], IError>(\n    '/users/search',\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      first_name: request.first_name,\n      last_name: request.last_name,\n      verified_looker_employee: request.verified_looker_employee,\n      embed_user: request.embed_user,\n      email: request.email,\n      is_disabled: request.is_disabled,\n      filter_or: request.filter_or,\n      content_metadata_id: request.content_metadata_id,\n      group_id: request.group_id,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Search for user accounts by name\n *\n * Returns all user accounts where `first_name` OR `last_name` OR `email` field values match a pattern.\n * The pattern can contain `%` and `_` wildcards as in SQL LIKE expressions.\n *\n * Any additional search params will be combined into a logical AND expression.\n *\n * GET /users/search/names/{pattern} -> IUser[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestSearchUsersNames\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const search_users_names = async (\n  sdk: IAPIMethods,\n  request: IRequestSearchUsersNames,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser[], IError>> => {\n  request.pattern = encodeParam(request.pattern)\n  return sdk.get<IUser[], IError>(\n    `/users/search/names/${request.pattern}`,\n    {\n      fields: request.fields,\n      page: request.page,\n      per_page: request.per_page,\n      limit: request.limit,\n      offset: request.offset,\n      sorts: request.sorts,\n      id: request.id,\n      first_name: request.first_name,\n      last_name: request.last_name,\n      verified_looker_employee: request.verified_looker_employee,\n      email: request.email,\n      is_disabled: request.is_disabled,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about the user with a specific id.\n *\n * If the caller is an admin or the caller is the user being specified, then full user information will\n * be returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains\n * The user name and avatar url, but no sensitive information.\n *\n * GET /users/{user_id} -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<IUser, IError>(`/users/${user_id}`, { fields }, null, options)\n}\n\n/**\n * ### Update information about the user with a specific id.\n *\n * PATCH /users/{user_id} -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param body Partial<IWriteUser>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_user = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  body: Partial<IWriteUser>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.patch<IUser, IError | IValidationError>(\n    `/users/${user_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete the user with a specific id.\n *\n * **DANGER** this will delete the user and all looks and other information owned by the user.\n *\n * DELETE /users/{user_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(`/users/${user_id}`, null, null, options)\n}\n\n/**\n * ### Get information about the user with a credential of given type with specific id.\n *\n * This is used to do things like find users by their embed external_user_id. Or, find the user with\n * a given api3 client_id, etc. The 'credential_type' matches the 'type' name of the various credential\n * types. It must be one of the values listed in the table below. The 'credential_id' is your unique Id\n * for the user and is specific to each type of credential.\n *\n * An example using the Ruby sdk might look like:\n *\n * `sdk.user_for_credential('embed', 'customer-4959425')`\n *\n * This table shows the supported 'Credential Type' strings. The right column is for reference; it shows\n * which field in the given credential type is actually searched when finding a user with the supplied\n * 'credential_id'.\n *\n * | Credential Types | Id Field Matched |\n * | ---------------- | ---------------- |\n * | email            | email            |\n * | google           | google_user_id   |\n * | saml             | saml_user_id     |\n * | oidc             | oidc_user_id     |\n * | ldap             | ldap_id          |\n * | api              | token            |\n * | api3             | client_id        |\n * | embed            | external_user_id |\n * | looker_openid    | email            |\n *\n * **NOTE**: The 'api' credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is 'api3'.\n *\n * GET /users/credential/{credential_type}/{credential_id} -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param credential_type Type name of credential\n * @param credential_id Id of credential\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_for_credential = async (\n  sdk: IAPIMethods,\n  credential_type: string,\n  credential_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError>> => {\n  credential_type = encodeParam(credential_type)\n  credential_id = encodeParam(credential_id)\n  return sdk.get<IUser, IError>(\n    `/users/credential/${credential_type}/${credential_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Email/password login information for the specified user.\n *\n * GET /users/{user_id}/credentials_email -> ICredentialsEmail\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_email = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmail, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsEmail, IError>(\n    `/users/${user_id}/credentials_email`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Email/password login information for the specified user.\n *\n * POST /users/{user_id}/credentials_email -> ICredentialsEmail\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param body Partial<IWriteCredentialsEmail>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_user_credentials_email = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  body: Partial<IWriteCredentialsEmail>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmail, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.post<ICredentialsEmail, IError | IValidationError>(\n    `/users/${user_id}/credentials_email`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Email/password login information for the specified user.\n *\n * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param body Partial<IWriteCredentialsEmail>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_user_credentials_email = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  body: Partial<IWriteCredentialsEmail>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmail, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.patch<ICredentialsEmail, IError | IValidationError>(\n    `/users/${user_id}/credentials_email`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Email/password login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_email -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_email = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_email`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Two-factor login information for the specified user.\n *\n * GET /users/{user_id}/credentials_totp -> ICredentialsTotp\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_totp = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsTotp, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsTotp, IError>(\n    `/users/${user_id}/credentials_totp`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Two-factor login information for the specified user.\n *\n * POST /users/{user_id}/credentials_totp -> ICredentialsTotp\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_user_credentials_totp = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  body?: Partial<ICredentialsTotp>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsTotp, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.post<ICredentialsTotp, IError | IValidationError>(\n    `/users/${user_id}/credentials_totp`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Two-factor login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_totp -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_totp = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_totp`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### LDAP login information for the specified user.\n *\n * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_ldap = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsLDAP, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsLDAP, IError>(\n    `/users/${user_id}/credentials_ldap`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### LDAP login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_ldap -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_ldap = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_ldap`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Google authentication login information for the specified user.\n *\n * GET /users/{user_id}/credentials_google -> ICredentialsGoogle\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_google = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsGoogle, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsGoogle, IError>(\n    `/users/${user_id}/credentials_google`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Google authentication login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_google -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_google = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_google`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Saml authentication login information for the specified user.\n *\n * GET /users/{user_id}/credentials_saml -> ICredentialsSaml\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_saml = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsSaml, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsSaml, IError>(\n    `/users/${user_id}/credentials_saml`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Saml authentication login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_saml -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_saml = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_saml`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### OpenID Connect (OIDC) authentication login information for the specified user.\n *\n * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_oidc = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsOIDC, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsOIDC, IError>(\n    `/users/${user_id}/credentials_oidc`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### OpenID Connect (OIDC) authentication login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_oidc -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_oidc = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_oidc`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n *\n * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param credentials_api3_id Id of API 3 Credential\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_api3 = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  credentials_api3_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsApi3, IError>> => {\n  user_id = encodeParam(user_id)\n  credentials_api3_id = encodeParam(credentials_api3_id)\n  return sdk.get<ICredentialsApi3, IError>(\n    `/users/${user_id}/credentials_api3/${credentials_api3_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n *\n * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param credentials_api3_id Id of API 3 Credential\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_api3 = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  credentials_api3_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  credentials_api3_id = encodeParam(credentials_api3_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_api3/${credentials_api3_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n *\n * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_user_credentials_api3s = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsApi3[], IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsApi3[], IError>(\n    `/users/${user_id}/credentials_api3`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n *\n * POST /users/{user_id}/credentials_api3 -> ICreateCredentialsApi3\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_user_credentials_api3 = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICreateCredentialsApi3, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.post<ICreateCredentialsApi3, IError | IValidationError>(\n    `/users/${user_id}/credentials_api3`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Embed login information for the specified user.\n *\n * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param credentials_embed_id Id of Embedding Credential\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_embed = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  credentials_embed_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmbed, IError>> => {\n  user_id = encodeParam(user_id)\n  credentials_embed_id = encodeParam(credentials_embed_id)\n  return sdk.get<ICredentialsEmbed, IError>(\n    `/users/${user_id}/credentials_embed/${credentials_embed_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Embed login information for the specified user.\n *\n * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param credentials_embed_id Id of Embedding Credential\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_embed = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  credentials_embed_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  credentials_embed_id = encodeParam(credentials_embed_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_embed/${credentials_embed_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Embed login information for the specified user.\n *\n * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_user_credentials_embeds = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmbed[], IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsEmbed[], IError>(\n    `/users/${user_id}/credentials_embed`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Looker Openid login information for the specified user. Used by Looker Analysts.\n *\n * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_credentials_looker_openid = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsLookerOpenid, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ICredentialsLookerOpenid, IError>(\n    `/users/${user_id}/credentials_looker_openid`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Looker Openid login information for the specified user. Used by Looker Analysts.\n *\n * DELETE /users/{user_id}/credentials_looker_openid -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_credentials_looker_openid = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/credentials_looker_openid`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Web login session for the specified user.\n *\n * GET /users/{user_id}/sessions/{session_id} -> ISession\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param session_id Id of Web Login Session\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_session = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  session_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISession, IError>> => {\n  user_id = encodeParam(user_id)\n  session_id = encodeParam(session_id)\n  return sdk.get<ISession, IError>(\n    `/users/${user_id}/sessions/${session_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Web login session for the specified user.\n *\n * DELETE /users/{user_id}/sessions/{session_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param session_id Id of Web Login Session\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_session = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  session_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_id = encodeParam(user_id)\n  session_id = encodeParam(session_id)\n  return sdk.delete<string, IError>(\n    `/users/${user_id}/sessions/${session_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Web login session for the specified user.\n *\n * GET /users/{user_id}/sessions -> ISession[]\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_user_sessions = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ISession[], IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.get<ISession[], IError>(\n    `/users/${user_id}/sessions`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a password reset token.\n * This will create a cryptographically secure random password reset token for the user.\n * If the user already has a password reset token then this invalidates the old token and creates a new one.\n * The token is expressed as the 'password_reset_url' of the user's email/password credential object.\n * This takes an optional 'expires' param to indicate if the new token should be an expiring token.\n * Tokens that expire are typically used for self-service password resets for existing users.\n * Invitation emails for new users typically are not set to expire.\n * The expire period is always 60 minutes when expires is enabled.\n * This method can be called with an empty body.\n *\n * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestCreateUserCredentialsEmailPasswordReset\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const create_user_credentials_email_password_reset = async (\n  sdk: IAPIMethods,\n  request: IRequestCreateUserCredentialsEmailPasswordReset,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmail, IError>> => {\n  request.user_id = encodeParam(request.user_id)\n  return sdk.post<ICredentialsEmail, IError>(\n    `/users/${request.user_id}/credentials_email/password_reset`,\n    { expires: request.expires, fields: request.fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Get information about roles of a given user\n *\n * GET /users/{user_id}/roles -> IRole[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestUserRoles\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const user_roles = async (\n  sdk: IAPIMethods,\n  request: IRequestUserRoles,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole[], IError>> => {\n  request.user_id = encodeParam(request.user_id)\n  return sdk.get<IRole[], IError>(\n    `/users/${request.user_id}/roles`,\n    {\n      fields: request.fields,\n      direct_association_only: request.direct_association_only,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Set roles of the user with a specific id.\n *\n * PUT /users/{user_id}/roles -> IRole[]\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param body Partial<string[]>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const set_user_roles = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  body: Partial<string[]>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IRole[], IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.put<IRole[], IError>(\n    `/users/${user_id}/roles`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get user attribute values for a given user.\n *\n * Returns the values of specified user attributes (or all user attributes) for a certain user.\n *\n * A value for each user attribute is searched for in the following locations, in this order:\n *\n * 1. in the user's account information\n * 1. in groups that the user is a member of\n * 1. the default value of the user attribute\n *\n * If more than one group has a value defined for a user attribute, the group with the lowest rank wins.\n *\n * The response will only include user attributes for which values were found. Use `include_unset=true` to include\n * empty records for user attributes with no value.\n *\n * The value of all hidden user attributes will be blank.\n *\n * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestUserAttributeUserValues\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const user_attribute_user_values = async (\n  sdk: IAPIMethods,\n  request: IRequestUserAttributeUserValues,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttributeWithValue[], IError>> => {\n  request.user_id = encodeParam(request.user_id)\n  return sdk.get<IUserAttributeWithValue[], IError>(\n    `/users/${request.user_id}/attribute_values`,\n    {\n      fields: request.fields,\n      user_attribute_ids: request.user_attribute_ids,\n      all_values: request.all_values,\n      include_unset: request.include_unset,\n    },\n    null,\n    options\n  )\n}\n\n/**\n * ### Store a custom value for a user attribute in a user's account settings.\n *\n * Per-user user attribute values take precedence over group or default values.\n *\n * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param user_attribute_id Id of user attribute\n * @param body Partial<IWriteUserAttributeWithValue>\n * @param options one-time API call overrides\n *\n */\nexport const set_user_attribute_user_value = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  user_attribute_id: string,\n  body: Partial<IWriteUserAttributeWithValue>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttributeWithValue, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.patch<IUserAttributeWithValue, IError | IValidationError>(\n    `/users/${user_id}/attribute_values/${user_attribute_id}`,\n    null,\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a user attribute value from a user's account settings.\n *\n * After the user attribute value is deleted from the user's account settings, subsequent requests\n * for the user attribute value for this user will draw from the user's groups or the default\n * value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more\n * information about how user attribute values are resolved.\n *\n * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param user_attribute_id Id of user attribute\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_attribute_user_value = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  user_attribute_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<void, IError>> => {\n  user_id = encodeParam(user_id)\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.delete<void, IError>(\n    `/users/${user_id}/attribute_values/${user_attribute_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Send a password reset token.\n * This will send a password reset email to the user. If a password reset token does not already exist\n * for this user, it will create one and then send it.\n * If the user has not yet set up their account, it will send a setup email to the user.\n * The URL sent in the email is expressed as the 'password_reset_url' of the user's email/password credential object.\n * Password reset URLs will expire in 60 minutes.\n * This method can be called with an empty body.\n *\n * POST /users/{user_id}/credentials_email/send_password_reset -> ICredentialsEmail\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const send_user_credentials_email_password_reset = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<ICredentialsEmail, IError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.post<ICredentialsEmail, IError>(\n    `/users/${user_id}/credentials_email/send_password_reset`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Change a disabled user's email addresses\n *\n * Allows the admin to change the email addresses for all the user's\n * associated credentials.  Will overwrite all associated email addresses with\n * the value supplied in the 'email' body param.\n * The user's 'is_disabled' status must be true.\n *\n * POST /users/{user_id}/update_emails -> IUser\n *\n * @param sdk IAPIMethods implementation\n * @param user_id Id of user\n * @param body Partial<IUserEmailOnly>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const wipeout_user_emails = async (\n  sdk: IAPIMethods,\n  user_id: string,\n  body: Partial<IUserEmailOnly>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUser, IError | IValidationError>> => {\n  user_id = encodeParam(user_id)\n  return sdk.post<IUser, IError | IValidationError>(\n    `/users/${user_id}/update_emails`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * Create an embed user from an external user ID\n *\n * POST /users/embed_user -> IUserPublic\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<ICreateEmbedUserRequest>\n * @param options one-time API call overrides\n *\n */\nexport const create_embed_user = async (\n  sdk: IAPIMethods,\n  body: Partial<ICreateEmbedUserRequest>,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserPublic, IError>> => {\n  return sdk.post<IUserPublic, IError>('/users/embed_user', null, body, options)\n}\n\n//#endregion User: Manage Users\n\n//#region UserAttribute: Manage User Attributes\n\n/**\n * ### Get information about all user attributes.\n *\n * GET /user_attributes -> IUserAttribute[]\n *\n * @param sdk IAPIMethods implementation\n * @param request composed interface \"IRequestAllUserAttributes\" for complex method parameters\n * @param options one-time API call overrides\n *\n */\nexport const all_user_attributes = async (\n  sdk: IAPIMethods,\n  request: IRequestAllUserAttributes,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttribute[], IError>> => {\n  return sdk.get<IUserAttribute[], IError>(\n    '/user_attributes',\n    { fields: request.fields, sorts: request.sorts },\n    null,\n    options\n  )\n}\n\n/**\n * ### Create a new user attribute\n *\n * Permission information for a user attribute is conveyed through the `can` and `user_can_edit` fields.\n * The `user_can_edit` field indicates whether an attribute is user-editable _anywhere_ in the application.\n * The `can` field gives more granular access information, with the `set_value` child field indicating whether\n * an attribute's value can be set by [Setting the User Attribute User Value](#!/User/set_user_attribute_user_value).\n *\n * Note: `name` and `label` fields must be unique across all user attributes in the Looker instance.\n * Attempting to create a new user attribute with a name or label that duplicates an existing\n * user attribute will fail with a 422 error.\n *\n * POST /user_attributes -> IUserAttribute\n *\n * @param sdk IAPIMethods implementation\n * @param body Partial<IWriteUserAttribute>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const create_user_attribute = async (\n  sdk: IAPIMethods,\n  body: Partial<IWriteUserAttribute>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttribute, IError | IValidationError>> => {\n  return sdk.post<IUserAttribute, IError | IValidationError>(\n    '/user_attributes',\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Get information about a user attribute.\n *\n * GET /user_attributes/{user_attribute_id} -> IUserAttribute\n *\n * @param sdk IAPIMethods implementation\n * @param user_attribute_id Id of user attribute\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const user_attribute = async (\n  sdk: IAPIMethods,\n  user_attribute_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttribute, IError>> => {\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.get<IUserAttribute, IError>(\n    `/user_attributes/${user_attribute_id}`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Update a user attribute definition.\n *\n * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute\n *\n * @param sdk IAPIMethods implementation\n * @param user_attribute_id Id of user attribute\n * @param body Partial<IWriteUserAttribute>\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const update_user_attribute = async (\n  sdk: IAPIMethods,\n  user_attribute_id: string,\n  body: Partial<IWriteUserAttribute>,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttribute, IError | IValidationError>> => {\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.patch<IUserAttribute, IError | IValidationError>(\n    `/user_attributes/${user_attribute_id}`,\n    { fields },\n    body,\n    options\n  )\n}\n\n/**\n * ### Delete a user attribute (admin only).\n *\n * DELETE /user_attributes/{user_attribute_id} -> string\n *\n * @param sdk IAPIMethods implementation\n * @param user_attribute_id Id of user attribute\n * @param options one-time API call overrides\n *\n */\nexport const delete_user_attribute = async (\n  sdk: IAPIMethods,\n  user_attribute_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<string, IError>> => {\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.delete<string, IError>(\n    `/user_attributes/${user_attribute_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n/**\n * ### Returns all values of a user attribute defined by user groups, in precedence order.\n *\n * A user may be a member of multiple groups which define different values for a given user attribute.\n * The order of group-values in the response determines precedence for selecting which group-value applies\n * to a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n *\n * Results will only include groups that the caller's user account has permission to see.\n *\n * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]\n *\n * @param sdk IAPIMethods implementation\n * @param user_attribute_id Id of user attribute\n * @param fields Requested fields.\n * @param options one-time API call overrides\n *\n */\nexport const all_user_attribute_group_values = async (\n  sdk: IAPIMethods,\n  user_attribute_id: string,\n  fields?: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IUserAttributeGroupValue[], IError>> => {\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.get<IUserAttributeGroupValue[], IError>(\n    `/user_attributes/${user_attribute_id}/group_values`,\n    { fields },\n    null,\n    options\n  )\n}\n\n/**\n * ### Define values for a user attribute across a set of groups, in priority order.\n *\n * This function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting\n * all users in the system. This function replaces any existing group value definitions for the indicated user attribute.\n *\n * The value of a user attribute for a given user is determined by searching the following locations, in this order:\n *\n * 1. the user's account settings\n * 2. the groups that the user is a member of\n * 3. the default value of the user attribute, if any\n *\n * The user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter\n * determines which group takes priority for that user. Lowest array index wins.\n *\n * An alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each\n * group-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a\n * rank value to every group-value object in the array.\n *\n *   To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).\n * To set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).\n *\n * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]\n *\n * @param sdk IAPIMethods implementation\n * @param user_attribute_id Id of user attribute\n * @param body Partial<IUserAttributeGroupValue[]>\n * @param options one-time API call overrides\n *\n */\nexport const set_user_attribute_group_values = async (\n  sdk: IAPIMethods,\n  user_attribute_id: string,\n  body: Partial<IUserAttributeGroupValue[]>,\n  options?: Partial<ITransportSettings>\n): Promise<\n  SDKResponse<IUserAttributeGroupValue[], IError | IValidationError>\n> => {\n  user_attribute_id = encodeParam(user_attribute_id)\n  return sdk.post<IUserAttributeGroupValue[], IError | IValidationError>(\n    `/user_attributes/${user_attribute_id}/group_values`,\n    null,\n    body,\n    options\n  )\n}\n\n//#endregion UserAttribute: Manage User Attributes\n\n//#region Workspace: Manage Workspaces\n\n/**\n * ### Get All Workspaces\n *\n * Returns all workspaces available to the calling user.\n *\n * GET /workspaces -> IWorkspace[]\n *\n * @param sdk IAPIMethods implementation\n * @param options one-time API call overrides\n *\n */\nexport const all_workspaces = async (\n  sdk: IAPIMethods,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IWorkspace[], IError>> => {\n  return sdk.get<IWorkspace[], IError>('/workspaces', null, null, options)\n}\n\n/**\n * ### Get A Workspace\n *\n * Returns information about a workspace such as the git status and selected branches\n * of all projects available to the caller's user account.\n *\n * A workspace defines which versions of project files will be used to evaluate expressions\n * and operations that use model definitions - operations such as running queries or rendering dashboards.\n * Each project has its own git repository, and each project in a workspace may be configured to reference\n * particular branch or revision within their respective repositories.\n *\n * There are two predefined workspaces available: \"production\" and \"dev\".\n *\n * The production workspace is shared across all Looker users. Models in the production workspace are read-only.\n * Changing files in production is accomplished by modifying files in a git branch and using Pull Requests\n * to merge the changes from the dev branch into the production branch, and then telling\n * Looker to sync with production.\n *\n * The dev workspace is local to each Looker user. Changes made to project/model files in the dev workspace only affect\n * that user, and only when the dev workspace is selected as the active workspace for the API session.\n * (See set_session_workspace()).\n *\n * The dev workspace is NOT unique to an API session. Two applications accessing the Looker API using\n * the same user account will see the same files in the dev workspace. To avoid collisions between\n * API clients it's best to have each client login with API3 credentials for a different user account.\n *\n * Changes made to files in a dev workspace are persistent across API sessions. It's a good\n * idea to commit any changes you've made to the git repository, but not strictly required. Your modified files\n * reside in a special user-specific directory on the Looker server and will still be there when you login in again\n * later and use update_session(workspace_id: \"dev\") to select the dev workspace for the new API session.\n *\n * GET /workspaces/{workspace_id} -> IWorkspace\n *\n * @param sdk IAPIMethods implementation\n * @param workspace_id Id of the workspace\n * @param options one-time API call overrides\n *\n */\nexport const workspace = async (\n  sdk: IAPIMethods,\n  workspace_id: string,\n  options?: Partial<ITransportSettings>\n): Promise<SDKResponse<IWorkspace, IError>> => {\n  workspace_id = encodeParam(workspace_id)\n  return sdk.get<IWorkspace, IError>(\n    `/workspaces/${workspace_id}`,\n    null,\n    null,\n    options\n  )\n}\n\n//#endregion Workspace: Manage Workspaces\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}