{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseTransport = void 0;\nvar _transport = require(\"./transport\");\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nclass BaseTransport {\n  constructor(options) {\n    this.options = options;\n    _defineProperty(this, \"observer\", undefined);\n    this.options = options;\n  }\n  ok(res) {\n    return res.statusCode >= _transport.StatusCode.OK && res.statusCode <= _transport.StatusCode.IMUsed;\n  }\n  makeUrl(path, options, queryParams) {\n    var base = options.base_url;\n    if (!path.match(/^(http:\\/\\/|https:\\/\\/)/gi)) {\n      path = \"\".concat(base).concat(path);\n    }\n    path = (0, _transport.addQueryParams)(path, queryParams);\n    return path;\n  }\n}\nexports.BaseTransport = BaseTransport;","map":{"version":3,"names":["_transport","require","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","BaseTransport","constructor","options","ok","statusCode","StatusCode","OK","IMUsed","makeUrl","path","queryParams","base","base_url","match","concat","addQueryParams","exports"],"sources":["C:\\Users\\ximo.cerdan\\AppData\\Local\\Google\\Cloud SDK\\mashup_iframe\\node_modules\\@looker\\sdk-rtl\\src\\baseTransport.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { Readable } from 'readable-stream'\nimport { addQueryParams, StatusCode } from './transport'\nimport type {\n  Authenticator,\n  HttpMethod,\n  IRawResponse,\n  ITransport,\n  ITransportSettings,\n  SDKResponse,\n  Values,\n  RawObserver,\n} from './transport'\n\nexport abstract class BaseTransport implements ITransport {\n  protected constructor(protected readonly options: ITransportSettings) {\n    this.options = options\n  }\n\n  observer: RawObserver | undefined = undefined\n\n  abstract parseResponse<TSuccess, TError>(\n    raw: IRawResponse\n  ): Promise<SDKResponse<TSuccess, TError>>\n\n  ok(res: IRawResponse): boolean {\n    return (\n      res.statusCode >= StatusCode.OK && res.statusCode <= StatusCode.IMUsed\n    )\n  }\n\n  /**\n   * HTTP request function for atomic, fully downloaded raw HTTP responses\n   *\n   * NOTE: This method has no error handling. It simply returns the results of the HTTP request.\n   *\n   * @param method of HTTP request\n   * @param path request path, either relative or fully specified\n   * @param queryParams name/value pairs to pass as part of the URL\n   * @param body data for the body of the request\n   * @param authenticator authenticator callback, typically from `IAuthSession` implementation\n   * @param options overrides of default transport settings\n   * @returns typed response of `TSuccess`, or `TError` result\n   */\n  abstract rawRequest(\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<IRawResponse>\n\n  /**\n   * Request a streaming response\n   * @param {HttpMethod} method\n   * @param {string} path Request path\n   * @param queryParams query parameters for the request\n   * @param body http body to include with request\n   * @param {Authenticator} authenticator callback to add authentication information to the request\n   * @param {Partial<ITransportSettings>} options transport option overrides\n   * @returns {Promise<TSuccess>} the streaming response\n   */\n  abstract request<TSuccess, TError>(\n    method: HttpMethod,\n    path: string,\n    queryParams?: any,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<SDKResponse<TSuccess, TError>>\n\n  /**\n   * Request a streaming response\n   * @param {(readable: _Readable.Readable) => Promise<TSuccess>} callback A function will be called with a Node.js or\n   *  Browser `Readable` object. The readable object represents the streaming data.\n   * @param {HttpMethod} method\n   * @param {string} path Request path\n   * @param queryParams query parameters for the request\n   * @param body http body to include with request\n   * @param {Authenticator} authenticator callback to add authentication information to the request\n   * @param {Partial<ITransportSettings>} options transport option overrides\n   * @returns {Promise<TSuccess>} the streaming response\n   */\n  abstract stream<TSuccess>(\n    callback: (readable: Readable) => Promise<TSuccess>,\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<TSuccess>\n\n  /**\n   * Determine whether the url should be an API path, relative from base_url, or is already fully specified override\n   * @param path Request path\n   * @param options Transport settings\n   * @param queryParams Collection of query Params\n   * @returns the fully specified request path including any query string parameters\n   */\n  makeUrl(\n    path: string,\n    options: Partial<ITransportSettings>,\n    queryParams?: Values\n  ) {\n    // is this an API-versioned call?\n    const base = options.base_url\n    if (!path.match(/^(http:\\/\\/|https:\\/\\/)/gi)) {\n      path = `${base}${path}` // path was relative\n    }\n    path = addQueryParams(path, queryParams)\n    return path\n  }\n}\n"],"mappings":";;;;;;AA2BA,IAAAA,UAAA,GAAAC,OAAA;AAAwD,SAAAC,gBAAAC,GAAA,EAAAC,GAAA,EAAAC,KAAA;EAAAD,GAAA,GAAAE,cAAA,CAAAF,GAAA;EAAA,IAAAA,GAAA,IAAAD,GAAA;IAAAI,MAAA,CAAAC,cAAA,CAAAL,GAAA,EAAAC,GAAA;MAAAC,KAAA,EAAAA,KAAA;MAAAI,UAAA;MAAAC,YAAA;MAAAC,QAAA;IAAA;EAAA;IAAAR,GAAA,CAAAC,GAAA,IAAAC,KAAA;EAAA;EAAA,OAAAF,GAAA;AAAA;AAAA,SAAAG,eAAAM,GAAA;EAAA,IAAAR,GAAA,GAAAS,YAAA,CAAAD,GAAA;EAAA,cAAAR,GAAA,gBAAAA,GAAA,GAAAU,MAAA,CAAAV,GAAA;AAAA;AAAA,SAAAS,aAAAE,KAAA,EAAAC,IAAA;EAAA,WAAAD,KAAA,iBAAAA,KAAA,kBAAAA,KAAA;EAAA,IAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA;EAAA,IAAAF,IAAA,KAAAG,SAAA;IAAA,IAAAC,GAAA,GAAAJ,IAAA,CAAAK,IAAA,CAAAP,KAAA,EAAAC,IAAA;IAAA,WAAAK,GAAA,sBAAAA,GAAA;IAAA,UAAAE,SAAA;EAAA;EAAA,QAAAP,IAAA,gBAAAF,MAAA,GAAAU,MAAA,EAAAT,KAAA;AAAA;AAYjD,MAAeU,aAAa,CAAuB;EAC9CC,WAAWA,CAAoBC,OAA2B,EAAE;IAAA,KAA7BA,OAA2B,GAA3BA,OAA2B;IAAAzB,eAAA,mBAIhCkB,SAAS;IAH3C,IAAI,CAACO,OAAO,GAAGA,OAAO;EACxB;EAQAC,EAAEA,CAACP,GAAiB,EAAW;IAC7B,OACEA,GAAG,CAACQ,UAAU,IAAI7B,UAAA,CAAA8B,UAAU,CAACC,EAAE,IAAIV,GAAG,CAACQ,UAAU,IAAI7B,UAAA,CAAA8B,UAAU,CAACE,MAAM;EAE1E;EAwEAC,OAAOA,CACLC,IAAY,EACZP,OAAoC,EACpCQ,WAAoB,EACpB;IAEA,IAAMC,IAAI,GAAGT,OAAO,CAACU,QAAQ;IAC7B,IAAI,CAACH,IAAI,CAACI,KAAK,CAAC,2BAA2B,CAAC,EAAE;MAC5CJ,IAAI,MAAAK,MAAA,CAAMH,IAAI,EAAAG,MAAA,CAAGL,IAAI,CAAE;IACzB;IACAA,IAAI,GAAG,IAAAlC,UAAA,CAAAwC,cAAc,EAACN,IAAI,EAAEC,WAAW,CAAC;IACxC,OAAOD,IAAI;EACb;AACF;AAACO,OAAA,CAAAhB,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}