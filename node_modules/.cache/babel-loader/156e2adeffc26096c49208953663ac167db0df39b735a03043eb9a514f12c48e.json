{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.strBadConfiguration = exports.configValue = exports.ValueSettings = exports.DefaultSettings = exports.ApiSettings = exports.ApiConfigMap = void 0;\nvar _transport = require(\"./transport\");\nvar _constants = require(\"./constants\");\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nvar ApiConfigMap = envPrefix => {\n  if (!envPrefix) return {};\n  return {\n    base_url: \"\".concat(envPrefix, \"_BASE_URL\"),\n    client_id: \"\".concat(envPrefix, \"_CLIENT_ID\"),\n    client_secret: \"\".concat(envPrefix, \"_CLIENT_SECRET\"),\n    timeout: \"\".concat(envPrefix, \"_TIMEOUT\"),\n    verify_ssl: \"\".concat(envPrefix, \"_VERIFY_SSL\")\n  };\n};\nexports.ApiConfigMap = ApiConfigMap;\nvar strBadConfiguration = \"\".concat(_transport.agentPrefix, \" configuration error:\\nMissing required configuration values like base_url\\n\");\nexports.strBadConfiguration = strBadConfiguration;\nvar DefaultSettings = () => ({\n  agentTag: _transport.agentPrefix,\n  base_url: '',\n  timeout: _transport.defaultTimeout,\n  verify_ssl: true\n});\nexports.DefaultSettings = DefaultSettings;\nvar configValue = (values, name, envKey) => {\n  var val = values[envKey[name]] || values[name];\n  return typeof val === 'string' ? (0, _constants.unquote)(val) : val;\n};\nexports.configValue = configValue;\nvar ValueSettings = (values, envPrefix) => {\n  var settings = DefaultSettings();\n  var envKey = ApiConfigMap(envPrefix);\n  settings.base_url = configValue(values, 'base_url', envKey) || settings.base_url;\n  settings.verify_ssl = (0, _constants.boolDefault)(configValue(values, 'verify_ssl', envKey), true);\n  settings.agentTag = \"TS-SDK\";\n  var timeout = configValue(values, 'timeout', envKey);\n  settings.timeout = timeout ? parseInt(timeout, 10) : _transport.defaultTimeout;\n  return settings;\n};\nexports.ValueSettings = ValueSettings;\nclass ApiSettings {\n  constructor(settings) {\n    var _settings$verify_ssl, _settings$timeout;\n    _defineProperty(this, \"base_url\", '');\n    _defineProperty(this, \"verify_ssl\", true);\n    _defineProperty(this, \"timeout\", _transport.defaultTimeout);\n    _defineProperty(this, \"agentTag\", _transport.agentPrefix);\n    this.base_url = 'base_url' in settings ? (0, _constants.unquote)(settings.base_url) : this.base_url;\n    this.verify_ssl = 'verify_ssl' in settings ? (0, _constants.isTrue)((0, _constants.unquote)((_settings$verify_ssl = settings.verify_ssl) === null || _settings$verify_ssl === void 0 ? void 0 : _settings$verify_ssl.toString())) : this.verify_ssl;\n    this.timeout = 'timeout' in settings ? parseInt((0, _constants.unquote)((_settings$timeout = settings.timeout) === null || _settings$timeout === void 0 ? void 0 : _settings$timeout.toString()), 10) : this.timeout;\n    if ('agentTag' in settings && settings.agentTag) this.agentTag = settings.agentTag;\n    if (!this.isConfigured()) {\n      throw new Error(strBadConfiguration);\n    }\n  }\n  isConfigured() {\n    return !!this.base_url;\n  }\n  readConfig(_section) {\n    return {};\n  }\n}\nexports.ApiSettings = ApiSettings;","map":{"version":3,"names":["_transport","require","_constants","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","ApiConfigMap","envPrefix","base_url","concat","client_id","client_secret","timeout","verify_ssl","exports","strBadConfiguration","agentPrefix","DefaultSettings","agentTag","defaultTimeout","configValue","values","name","envKey","val","unquote","ValueSettings","settings","boolDefault","parseInt","ApiSettings","constructor","_settings$verify_ssl","_settings$timeout","isTrue","toString","isConfigured","Error","readConfig","_section"],"sources":["C:\\Users\\ximo.cerdan\\AppData\\Local\\Google\\Cloud SDK\\mashup_iframe\\node_modules\\@looker\\sdk-rtl\\src\\apiSettings.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { ITransportSettings } from './transport'\nimport { agentPrefix, defaultTimeout } from './transport'\nimport { boolDefault, isTrue, unquote } from './constants'\n\n/** Used for reading configuration name/value pairs */\nexport interface IValueSettings {\n  [name: string]: string\n}\n\n/**\n * Gets list of environment variable names for config values\n * @param envPrefix Environment naming prefix to use. Pass an empty string to return no variable keys\n * @constructor\n */\nexport const ApiConfigMap = (envPrefix: string): IValueSettings => {\n  if (!envPrefix) return {} as IValueSettings\n  return {\n    base_url: `${envPrefix}_BASE_URL`,\n    client_id: `${envPrefix}_CLIENT_ID`,\n    client_secret: `${envPrefix}_CLIENT_SECRET`,\n    timeout: `${envPrefix}_TIMEOUT`,\n    verify_ssl: `${envPrefix}_VERIFY_SSL`,\n  }\n}\n\nexport const strBadConfiguration = `${agentPrefix} configuration error:\nMissing required configuration values like base_url\n`\n\nexport interface IApiSection {\n  [key: string]: string\n}\n\nexport interface IApiSettings extends ITransportSettings {\n  /**\n   * Reading API settings on demand from some configuration source\n   */\n  readConfig(section?: string): IApiSection\n\n  /**\n   * Checks to see if minimal configuration values are assigned.\n   *\n   * If this function returns `false`, the Api configuration class will typically throw a run-time\n   * error so the implementer knows required configuration values are missing\n   *\n   * @returns true or false\n   */\n  isConfigured(): boolean\n}\n\n/**\n * default the runtime configuration settings\n * @constructor\n *\n */\nexport const DefaultSettings = () =>\n  ({\n    agentTag: agentPrefix,\n    base_url: '',\n    timeout: defaultTimeout,\n    verify_ssl: true,\n  } as IApiSettings)\n\n/**\n * Return environment variable name value first, otherwise config name value\n * @param {IValueSettings} values\n * @param {string} name of config variable\n * @param envKey key collection of environment variables\n * @returns {string} environment value\n */\nexport const configValue = (\n  values: IValueSettings,\n  name: string,\n  envKey: IValueSettings\n) => {\n  const val = values[envKey[name]] || values[name]\n  return typeof val === 'string' ? unquote(val) : val\n}\n\n/**\n * Read any key/value collection for environment variable names and return as IApiSettings\n * @constructor\n *\n * The keys for the values are:\n *  - <environmentPrefix>_BASE_URL or `base_url`\n *  - <environmentPrefix>_CLIENT_ID or `client_id`\n *  - <environmentPrefix>_CLIENT_SECRET or `client_secret`\n *  - <environmentPrefix>_VERIFY_SSL or `verify_ssl`\n *  - <environmentPrefix>_TIMEOUT or `timeout`\n */\nexport const ValueSettings = (\n  values: IValueSettings,\n  envPrefix: string\n): IApiSettings => {\n  const settings = DefaultSettings()\n  const envKey = ApiConfigMap(envPrefix)\n  settings.base_url =\n    configValue(values, 'base_url', envKey) || settings.base_url\n  settings.verify_ssl = boolDefault(\n    configValue(values, 'verify_ssl', envKey),\n    true\n  )\n  settings.agentTag = `TS-SDK`\n  const timeout = configValue(values, 'timeout', envKey)\n  settings.timeout = timeout ? parseInt(timeout, 10) : defaultTimeout\n  return settings\n}\n\n/**\n * @class ApiSettings\n *\n * .ini Configuration initializer\n */\nexport class ApiSettings implements IApiSettings {\n  base_url = ''\n  verify_ssl = true\n  timeout: number = defaultTimeout\n  agentTag = agentPrefix\n\n  constructor(settings: Partial<IApiSettings>) {\n    // coerce types to declared types since some paths could have non-conforming settings values\n    this.base_url =\n      'base_url' in settings ? unquote(settings.base_url) : this.base_url\n    this.verify_ssl =\n      'verify_ssl' in settings\n        ? isTrue(unquote(settings.verify_ssl?.toString()))\n        : this.verify_ssl\n    this.timeout =\n      'timeout' in settings\n        ? parseInt(unquote(settings.timeout?.toString()), 10)\n        : this.timeout\n    if ('agentTag' in settings && settings.agentTag)\n      this.agentTag = settings.agentTag\n    if (!this.isConfigured()) {\n      throw new Error(strBadConfiguration)\n    }\n  }\n\n  isConfigured() {\n    return !!this.base_url\n  }\n\n  /**\n   * Default dynamic configuration reader\n   * @param _section key/name of configuration section to read\n   * @returns an empty `IAPISection`\n   */\n  readConfig(_section?: string): IApiSection {\n    return {}\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}